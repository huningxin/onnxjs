{"version":3,"sources":["webpack://onnxruntime-web/webpack/universalModuleDefinition","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/long/src/long.js","webpack://onnxruntime-web/./node_modules/onnx-proto/dist/onnx.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/clip.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dropout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/elu.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/leaky-relu.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/clip.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/dropout.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/elu.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/leaky-relu.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/reduce-op.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/wasm/options-utils.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/string-utils.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/external {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/global","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__2174__","_scriptDir","e","document","currentScript","src","t","N","buffer","M","$","j","r","L","n","P","G","o","B","H","u","s","c","ready","Promise","f","l","hasOwnProperty","d","m","p","h","g","_","v","window","importScripts","process","versions","node","E","y","O","b","w","T","ENVIRONMENT_IS_PTHREAD","A","S","locateFile","x","__dirname","normalize","readFileSync","Uint8Array","U","argv","length","replace","slice","on","Wn","ve","exit","inspect","console","error","Worker","read","readbuffer","scriptArgs","arguments","quit","print","log","warn","printErr","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","k","C","bind","I","D","shown","thisProgram","Atomics","load","store","compareExchange","wasmBinary","R","F","noExitRuntime","WebAssembly","W","Y","String","fromCharCode","z","V","charCodeAt","q","X","K","_n","Q","set","Z","J","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","ee","te","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","SharedArrayBuffer","Error","byteLength","re","ne","ae","oe","ie","preRun","fe","shift","ke","ue","se","hr","Fe","runExitHandlers","ce","postRun","de","unshift","le","me","pe","he","ge","monitorRunDependencies","_e","clearInterval","onAbort","stack","RuntimeError","preloadedImages","preloadedAudios","Ee","ye","startsWith","Oe","be","we","Te","fetch","credentials","then","ok","arrayBuffer","catch","resolve","Ae","gn","asm","eb","Ma","tlsInitFunctions","push","jb","instance","instantiate","instantiateWasm","instantiateStreaming","Se","653988","654006","setTimeout","wn","xe","initRuntime","func","arg","get","Ce","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EAGAIN","EWOULDBLOCK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","ENOMSG","EIDRM","ECHRNG","EL2NSYNC","EL3HLT","EL3RST","ELNRNG","EUNATCH","ENOCSI","EL2HLT","EDEADLK","ENOLCK","EBADE","EBADR","EXFULL","ENOANO","EBADRQC","EBADSLT","EDEADLOCK","EBFONT","ENOSTR","ENODATA","ETIME","ENOSR","ENONET","ENOPKG","EREMOTE","ENOLINK","EADV","ESRMNT","ECOMM","EPROTO","EMULTIHOP","EDOTDOT","EBADMSG","ENOTUNIQ","EBADFD","EREMCHG","ELIBACC","ELIBBAD","ELIBSCN","ELIBMAX","ELIBEXEC","ENOSYS","ENOTEMPTY","ENAMETOOLONG","ELOOP","EOPNOTSUPP","EPFNOSUPPORT","ECONNRESET","ENOBUFS","EAFNOSUPPORT","EPROTOTYPE","ENOTSOCK","ENOPROTOOPT","ESHUTDOWN","ECONNREFUSED","EADDRINUSE","ECONNABORTED","ENETUNREACH","ENETDOWN","ETIMEDOUT","EHOSTDOWN","EHOSTUNREACH","EINPROGRESS","EALREADY","EDESTADDRREQ","EMSGSIZE","EPROTONOSUPPORT","ESOCKTNOSUPPORT","EADDRNOTAVAIL","ENETRESET","EISCONN","ENOTCONN","ETOOMANYREFS","EUSERS","EDQUOT","ESTALE","ENOTSUP","ENOMEDIUM","EILSEQ","EOVERFLOW","ECANCELED","ENOTRECOVERABLE","EOWNERDEAD","ESTRPIPE","Ie","Hn","notify","De","pthreads","worker","terminate","freeThreadData","runningWorkers","splice","pthread","Ne","postMessage","cmd","Re","returnWorkerToPool","_emscripten_futex_wake","unusedWorkers","initMainThreadBlock","kn","On","initWorker","threadExitHandlers","pop","yn","In","runExitHandlersAndDeinitThread","setExitStatus","threadExit","threadCancel","terminateAllThreads","threadInfoStruct","En","allocatedOwnStack","stackBase","runWithoutMainThreadQueuedCalls","Bn","receiveObjectTransfer","threadInit","loadWasmModuleToWorker","onmessage","data","currentProxiedOperationCallerThread","targetThread","transferList","An","Kr","thread","loaded","runPthread","threadId","text","alert","Yn","returnCode","target","filename","lineno","message","urlOrBlob","mainScriptUrlOrBlob","wasmModule","allocateUnusedWorker","getNewWorker","busySpinWait","now","Me","Pn","jn","je","establishStackSpace","invokeEntryPoint","Le","Pe","Ge","Be","keepRuntimeAlive","hrtime","__performance_now_clock_drift","dateNow","He","We","vn","Ue","Date","Ye","ze","DESTRUCTOR_OFFSET","REFCOUNT_OFFSET","TYPE_OFFSET","CAUGHT_OFFSET","RETHROWN_OFFSET","SIZE","Ve","qe","Rt","Xe","Ke","Qe","Ze","this","excPtr","ptr","set_type","get_type","set_destructor","get_destructor","set_refcount","set_caught","get_caught","set_rethrown","get_rethrown","init","add_ref","add","release_ref","sub","Je","$e","mappings","buffers","printChar","varargs","getStr","get64","et","doAccess","tt","rt","nt","at","ot","it","ut","doMkdir","st","Gn","Cn","malloc","len","allocated","fd","prot","flags","offset","ct","ft","lt","dt","mt","doReadlink","pt","ht","gt","_t","vt","Et","yt","Ot","bt","wt","Tt","At","St","apply","xt","kt","Ct","exchange","wait","It","Dt","copyWithin","Nt","navigator","hardwareConcurrency","Mn","Ln","Sn","Ft","Mt","mn","jt","grow","Lt","Math","min","max","Pt","inEventHandler","removeAllEventListeners","eventHandlers","_removeHandler","deferredCalls","registerRemoveEventListeners","removeEventListenersRegistered","deferCall","targetFunction","argsList","precedence","sort","removeDeferredCalls","canPerformEventHandlerRequests","currentEventHandler","allowsDeferredCalls","runDeferredCalls","removeAllHandlersOnTarget","eventTypeString","removeEventListener","eventListenerFunc","useCapture","registerOrRemoveHandler","handlerFunc","callbackfunc","addEventListener","queueEventHandlerOnThread_iiii","xn","getTargetThreadForEventCallback","getNodeNameForTarget","screen","nodeName","fullscreenEnabled","webkitFullscreenEnabled","Gt","Bt","Ht","Wt","Ut","Yt","querySelector","zt","Vt","canvasSharedPtr","offscreenCanvas","controlTransferredOffscreen","GLctxObject","GLctx","getParameter","width","height","viewport","qt","Xt","Kt","Qt","getExtension","vertexAttribDivisor","vertexAttribDivisorANGLE","drawArraysInstanced","drawArraysInstancedANGLE","drawElementsInstanced","drawElementsInstancedANGLE","Zt","createVertexArray","createVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","bindVertexArray","bindVertexArrayOES","isVertexArray","isVertexArrayOES","Jt","drawBuffers","drawBuffersWEBGL","$t","multiDrawWebgl","er","counter","programs","framebuffers","renderbuffers","textures","shaders","vaos","contexts","offscreenCanvases","queries","stringCache","unpackAlignment","recordError","lastError","getNewId","getSource","createContext","getContextSafariWebGL2Fixed","getContext","WebGLRenderingContext","registerContext","handle","attributes","version","majorVersion","canvas","enableExtensionsByDefault","initExtensions","makeContextCurrent","currentContext","ctx","rn","deleteContext","initExtensionsDone","disjointTimerQueryExt","getSupportedExtensions","forEach","includes","tr","rr","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","minorVersion","explicitSwapControl","proxyContextToMainThread","renderViaOffscreenBackBuffer","nr","ar","initManagers","mgrContext","objects","nextId","create","refcount","object","reference","release","mgrGraph","mgrGraphBuilder","mgrNamedInputs","mgrNamedOperands","mgrNamedOutputs","mgrNamedResults","mgrOperand","mgrResult","AutoPad","BuildGraphStatus","ComputeGraphStatus","ErrorFilter","ErrorType","FilterOperandLayout","FusedActivation","InputOperandLayout","OperandType","PowerPreference","makeI32Array","makeArrayBufferView","BYTES_PER_ELEMENT","makeClampOptions","minValue","maxValue","makeBatchNormOptions","scale","bias","axis","epsilon","activation","makeGemmOptions","beta","aTranspose","bTranspose","makeOperandDescriptor","type","dimensions","makeConv2dOptions","padding","strides","dilations","autoPad","groups","inputLayout","filterLayout","makePool2dOptions","windowDimensions","makeInput","makeOutput","or","ml","ir","ur","sr","strings","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","cr","fr","lr","dr","mr","getStreamFromFD","doReadv","pr","_fflush","gr","_r","vr","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getTime","GMTString","Er","called","getFullYear","getTimezoneOffset","Fn","Rn","Number","Nn","toTimeString","match","yr","getSeconds","getMinutes","getHours","getDate","getMonth","getDay","Or","setTime","br","wr","Tr","Ar","averagePool2d","Sr","batchNormalization","xr","buildSync","kr","concat","Cr","constant","Ir","conv2d","Dr","gemm","Nr","input","Rr","matmul","Fr","maxPool2d","Mr","jr","relu","Lr","reshape","Pr","computeSync","Gr","Br","Hr","Wr","Ur","Yr","zr","Vr","qr","Xr","pthread_ptr","stackSize","detached","Dn","start_routine","startRoutine","time","Qr","Tn","Zr","Jr","bn","$r","en","tn","nn","an","setDate","setMonth","setFullYear","un","tm_sec","tm_min","tm_hour","tm_mday","tm_mon","tm_year","tm_wday","tm_yday","tm_isdst","tm_gmtoff","tm_zone","RegExp","toString","substring","ceil","abs","pn","sn","cn","MLGraphBuilder","fn","ln","dn","Array","hn","ba","aa","Ka","Ia","na","La","Ha","Ga","Ca","Ba","Aa","za","ya","xa","wa","va","ua","ta","sa","pa","ra","qa","Fa","Ea","Da","ma","oa","ka","la","ia","ja","ha","ga","Ja","fa","ea","da","ca","___wasm_call_ctors","_OrtInit","Na","_OrtCreateSessionOptions","Oa","_OrtSessionOptionsAppendExecutionProviderWebNN","Pa","_OrtAddSessionConfigEntry","Qa","_OrtReleaseSessionOptions","Ra","_OrtCreateSession","Sa","_OrtReleaseSession","Ta","_OrtGetInputCount","Ua","_OrtGetOutputCount","Va","_OrtGetInputName","Wa","_OrtGetOutputName","Xa","_OrtFree","Ya","_OrtCreateTensor","Za","_OrtGetTensorData","_a","_OrtReleaseTensor","$a","_OrtCreateRunOptions","ab","_OrtAddRunConfigEntry","bb","_OrtReleaseRunOptions","cb","_OrtRun","db","_malloc","fb","___errno_location","gb","_free","hb","_pthread_self","ib","_emscripten_tls_init","_emscripten_current_thread_process_queued_calls","kb","_emscripten_register_main_browser_thread_id","lb","_emscripten_main_browser_thread_id","mb","__emscripten_do_dispatch_to_thread","nb","_emscripten_sync_run_in_main_thread_4","ob","_emscripten_main_thread_process_queued_calls","pb","_emscripten_run_in_main_runtime_thread_js","qb","__emscripten_call_on_thread","rb","__emscripten_thread_init","sb","_memset","tb","___pthread_tsd_run_dtors","ub","_emscripten_get_global_libc","vb","__get_tzname","wb","__get_daylight","xb","__get_timezone","yb","stackSave","zb","stackRestore","Ab","stackAlloc","Bb","_emscripten_stack_set_limits","Cb","_memalign","Db","__emscripten_allow_main_runtime_queued_calls","__emscripten_main_thread_futex","name","Un","setStatus","calledRun","onRuntimeInitialized","onExit","UTF8ToString","stringToUTF8","lengthBytesUTF8","PThread","ExitStatus","run","preInit","ortWasm","undefined","readyPromiseResolve","readyPromiseReject","Module","reject","key","moduleOverrides","arguments_","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","read_","readAsync","readBinary","nodeFS","nodePath","scriptDirectory","path","binary","ret","assert","ex","abort","url","xhr","out","err","ABORT","condition","UTF8Decoder","TextDecoder","UTF8ArrayToString","heap","idx","maxBytesToRead","endIdx","endPtr","subarray","decode","str","u0","u1","u2","ch","stringToUTF8Array","outIdx","maxBytesToWrite","startIdx","outPtr","allocateUTF8","size","writeArrayToMemory","array","writeAsciiToMemory","dontAddNull","alignUp","multiple","updateGlobalBufferAndViews","buf","wasmTable","__ATPRERUN__","__ATINIT__","__ATEXIT__","__ATPOSTRUN__","addOnPreRun","callRuntimeCallbacks","addOnPostRun","addOnInit","runDependencies","runDependencyWatcher","dependenciesFulfilled","addRunDependency","id","removeRunDependency","callback","what","dataURIPrefix","isDataURI","isFileURI","wasmBinaryFile","getBinary","file","getBinaryPromise","createWasm","info","asmLibraryArg","receiveInstance","receiveInstantiationResult","result","instantiateArrayBuffer","receiver","reason","callbacks","ExceptionInfoAttrs","___cxa_allocate_exception","_atexit","___cxa_atexit","a0","a1","___cxa_thread_atexit","ExceptionInfo","destructor","caught","rethrown","value","prev","___cxa_throw","_emscripten_get_now","SYSCALLS","stream","curr","low","high","___sys_access","amode","setErrNo","___sys_fcntl64","___sys_fstat64","___sys_getdents64","dirp","count","___sys_getpid","___sys_ioctl","op","___sys_lstat64","___sys_mkdir","mode","syscallMmap2","addr","off","___sys_mmap2","syscallMunmap","___sys_munmap","___sys_open","___sys_readlink","bufsize","___sys_rmdir","___sys_stat64","___sys_unlink","_abort","_emscripten_get_now_is_monotonic","_clock_gettime","clk_id","tp","_difftime","time1","time0","_dlclose","_dlerror","_dlopen","flag","_dlsym","symbol","_emscripten_get_heap_max","_emscripten_memcpy_big","dest","num","emscripten_realloc_buffer","_emscripten_resize_heap","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","_emscripten_thread_sleep","msecs","start","WebNN","wrapper","arrayPtr","byteSize","_emscripten_webnn_create_context","context","ENV","getExecutableName","getEnvStrings","env","_environ_get","__environ","environ_buf","bufSize","string","_environ_sizes_get","penviron_count","penviron_buf_size","_fd_close","_fd_fdstat_get","pbuf","_fd_read","iov","iovcnt","pnum","_fd_seek","offset_low","offset_high","whence","newOffset","_fd_write","_gettimeofday","_gmtime_r","tmPtr","date","yday","_tzset","currentYear","winter","summer","winterOffset","summerOffset","stdTimezoneOffset","winterName","extractZone","summerName","winterNamePtr","summerNamePtr","_localtime_r","dst","zonePtr","_mktime","guessedOffset","dstOffset","nonDstOffset","trueOffset","_mlContextReference","_mlContextRelease","_mlGraphBuilderAdd","builderId","aId","bId","builder","_mlGraphBuilderAveragePool2d","inputId","optionsPtr","options","pool2d","_mlGraphBuilderBatchNorm","meanId","varianceId","mean","variance","output","_mlGraphBuilderBuildSync","namedOperandsId","namedOperands","graph","_mlGraphBuilderConcat","inputsCount","inputsPtr","inputIds","inputs","_mlGraphBuilderConstant","descPtr","valuePtr","desc","_mlGraphBuilderConv2d","filterId","filter","_mlGraphBuilderGemm","_mlGraphBuilderInput","namePtr","_mlGraphBuilderMatmul","_mlGraphBuilderMaxPool2d","_mlGraphBuilderRelease","_mlGraphBuilderRelu","_mlGraphBuilderReshape","newShapePtr","newShapeCount","newShape","_mlGraphComputeSync","graphId","inputsId","outputsId","outputs","_mlGraphReference","_mlGraphRelease","_mlNamedInputsRelease","_mlNamedInputsSet","namedInputsId","inputPtr","namedInputs","_mlNamedOperandsRelease","_mlNamedOperandsSet","operandId","operand","_mlNamedOutputsRelease","_mlNamedOutputsSet","namedOutputsId","outputPtr","namedOutputs","_mlOperandReference","_mlOperandRelease","_pthread_create","_pthread_join","__isLeapYear","year","__arraySum","index","sum","__MONTH_DAYS_LEAP","__MONTH_DAYS_REGULAR","__addDays","days","newDate","leap","currentMonth","daysInCurrentMonth","_strftime","maxsize","format","tm","pattern","EXPANSION_RULES_1","rule","WEEKDAYS","MONTHS","leadingSomething","digits","character","leadingNulls","compareByDay","date1","date2","sgn","compare","getFirstWeekStartDate","janFourth","getWeekBasedYear","thisDate","janFourthThisYear","janFourthNextYear","firstWeekStartThisYear","firstWeekStartNextYear","EXPANSION_RULES_2","twelveHour","janFirst","firstSunday","endDate","februaryFirstUntilEndMonth","daysDifference","firstMonday","ahead","bytes","intArrayFromString","_strftime_l","_webnnCreateGraphBuilder","contextId","_webnnCreateNamedInputs","_webnnCreateNamedOperands","_webnnCreateNamedOutputs","stringy","u8array","numBytesWritten","args","doRun","runCaller","params","pending","base64","charAt","b64","s64","encode","end","parts","chunk","join","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","listeners","emit","f32","f8b","writeFloat_f32_cpy","val","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","Object","keys","alloc","MAX","slab","call","utf8","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","TypeError","EMPTY","isGuid","validator","gen","createEmpty","parse","raw","random","isEmpty","toJSON","wasm","Instance","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","gte","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","values","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","tensors","graphs","refAttrName","docString","newBuffer","emptyArray","writer","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","isArray","fromObject","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","asPromise","endedByRPC","zero","zzEncode","zeroHash","from","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","onnxjsBackend","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","initializeFlags","initTimeout","simd","numThreads","numCpuLogicalCores","cpus","wasmBackend","initializeWebAssembly","promisify","readFile","handler","OnnxruntimeWebAssemblySessionHandler","registerBackend","ortFbs","onnxruntime","experimental","fbs","Attribute","_attributes","Map","attr","getValue","getType","delete","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","map","utf8String","byteOffset","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","initialize","createSessionHandler","dispose","isBackend","webgl","WebGLBackend","resolveBackend","hint","hints","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","GlslLibRoutine","outputLayout","programInfo","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","samplers","samplerName","inputLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","keptDims","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","FunctionType","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","EncodingGlslLib","encodeFloat32","decodeFloat32","endianness","ArrayBuffer","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","split","tokens","trim","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","glslRegistry","lib","libName","routinesInLib","getFunctions","currentNode","GlslLibRoutineNode","addDependency","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","pack2unpackMap","unpack2packMap","artifact","programManager","getArtifact","createProgramInfo","setArtifact","runData","createRunData","runProgram","outputTextureData","tensor","inputTextureDatas","expectPackedInputs","unpack","checkAndUpdateTextureForm","expectPackedOutputs","td","getTextureData","dataId","createTextureLayoutFromShape","unpackedTextureLayout","getOrCreateTextureLayout","unpackedTextureData","createTextureData","numberData","usage","texture","textureManager","createTextureFromLayout","createTextureDataFromTexture","tensorId","textureData","_id","readTexture","setTextureData","isInitializer","channels","reverseWH","getPackedShape","prefs","texWidth","texHeight","layoutStrategy","computeTextureWH","inferredDims","computeStrides","reversedWH","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","uint8TD","WebGLUint8Encode","runInternal","readUint8TextureAsFloat","cachedId","packOpCache","WebGLPack","unpackOpCache","WebGLUnpack","WEBGL_OP_RESOLVE_RULES","unaryOps","WebGLUnaryOp","NUMBER_TYPES","glslAbs","FLOAT_TYPES","glslAcos","binaryOps","WebGLBinaryOp","glslAdd","glslAnd","glslAsin","glslAtan","WebGLAveragePool","WebGLBatchNormalization","glslCeil","WebGLClip","WebGLConcat","WebGLConv","glslCos","glslDiv","WebGLDropout","WebGLDepthToSpace","glslEqual","WebGLElu","glslExp","WebGLFlatten","glslFloor","WebGLGather","WebGLGemm","WebGLGlobalAveragePool","WebGLGlobalMaxPool","glslGreater","glslIdentity","WebGLImageScaler","WebGLInstanceNormalization","WebGLLeakyRelu","glslLess","glslLog","WebGLMatMul","WebGLMaxPool","glslMul","glslNeg","glslNot","glslOr","WebGLPad","glslPow","glslPRelu","reduceOps","WebGLReduceLogSum","WebGLReduceMax","WebGLReduceMean","WebGLReduceMin","WebGLReduceProd","WebGLReduceSum","WebGLReduceSumSquare","glslRelu","WebGLReshape","WebGLResizePacked","WebGLShape","glslSigmoid","glslSin","WebGLSliceV10","WebGLSlice","WebGLSoftmax","WebGLSplit","glslSqrt","WebGLSqueeze","glslSub","WebGLSum","glslTan","glslTanh","WebGLTile","WebGLTranspose","WebGLUpsample","WebGLUnsqueeze","glslXor","BatchNormalization","inferenceHandler","outputShape","inputTDs","getOrCreateTextureData","outputTD","createTextureDataFromLayout","uniformData","BinaryOp","typeConstraint","glslFunc","resultType","isBroadcast","areEqual","usePackedTexture","ouputLayout","calcShape","aRank","bRank","aBcast","bBcast","ValueBased","glslBuiltinBinary","Clip","WebGLPackedConcat","Concat","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","allGlChannels","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","channelIdx","unpackedImpl","WebGLUnpackedConcat","packedImpl","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getValueFromArrayIndexMethod","sizeInConcatAxis","previousSum","numberOfTensors","tensorRank","codeLines","arrayRank","WebGLConvPacked","Conv","kernelReshape","WebGLReshapePacked","WebGLMatMulPacked","outputReshape","xshape","kshape","kernelShape","PoolConvUtil","adjustPadsBasedOnAutoPad","pads","group","calcOutputShape","im2col","WebGLIm2ColPacked","artifacts","runDataIm2col","im2colOutput","runDataKernelReshape","kernelReshaped","hasBias","runDataMatmul","matmulOutput","outputShapeTensor","runDataOutputReshape","unpackedGroupedConvImpl","WebGLUnpackedGroupedConv","unpackedConvImpl","WebGLUnpackedConv","packedConvImpl","packMode","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","outputSpatialShape","processBias","xShape","wShape","outputChannelsPerGroup","activationFunction","applyActivation","getActicationSnippet","readSize","blockSize","programInfos","createProgramInfoArray","runDataArray","createRunDataArray","wDims","im2colProgramInfo","createIm2ColProgramInfo","createDotProductProgramInfo","kTD","newKernelData","prepKernelForDotProduct","createTextureDataFromLayoutBindTensor","runtDataIm2Col","draw","gl","sharedDim","sharedDimReadSize","sharedDimOffsetLocation","uniformLocations","find","blend","enable","BLEND","checkError","blendEquation","FUNC_ADD","blendFunc","uniform1i","disable","im2colDims","calcIm2ColDims","breakAxis","im2colLayout","adjustedKernelShape","kLayout","bLayout","initValue","isBlendSupported","calcSharedDimReadSize","kernel","numFeatureMaps","oldRowSize","newRowSize","oldOffset","preferredBatchSize","DepthToSpace","transposePerm","firstReshapeShape","blocksize","blocksizeSqr","firstReshapedTensor","transposeProgramInfo","transposeArtifact","runDataTranspose","transposeOutput","inputDepth","inputHeight","inputWidth","Dropout","testMode","_handler","_inputs","_programInfo","Elu","toExponential","Flatten","outputDims","flattenShape","activationName","Gather","indexDataShape","normalizeAxis","indexCopyOps","Gemm","aShape","bShape","GemmUtil","getShapeOfGemmResult","transA","transB","oShape","line","convOutputShape","wshape","im2colShape","kernelSize","unrolled","row","col","ImageScaler","createGetBiasMethod","numChannels","InstanceNormalization","createProgramInfos","runDatas","createRunDatas","checkInputTypes","xLayout","xDims","channelSize","outputUnpackedShape","scaleLayout","meanAndVarianceLayout","meanAndVarianceProgramInfo","createMeanAndVarianceProgramInfo","createComputOutputProgramInfo","inputTD","scaleTD","bTD","LeakyRelu","MatMul","sharedDimIndex","coordsDataType","getA","getB","WebGLUnpackedMatMul","arank","brank","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","getVecChannels","Pad","padShape","alayout","getPadFunction","getPadConstant","getPadReflect","getPadEdge","GlobalAveragePool","createAveragePoolProgramInfo","countIncludePad","AveragePool","isGlobalOperator","adjustPoolAttributes","computePoolOutputShape","op2","generatePoolingCode","GlobalMaxPool","createMaxPoolProgramInfo","MaxPool","op1","startVal","inputDims","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","arrayName","WebGLGenericReduce","ReduceBase","iRank","idxCopy","axes","normalizeAxes","ops","getOps","keepDims","idxZero","Reshape","needSqueezeInputData","originInputShape","inputShape3D","processDims3D","originalInputLayout","calculateReshapedDims","integerData","squeezedOutputShape","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","originalInputTD","squeezedInputLayout","createSharedTextureData","batchDims","batch","reshapedDims","packedShape","newTextureLayout","Upsample","roi","scales","prepareInputs","extrapolationEnabled","extrapolationValue","cubicCoefficientA","excludeOutside","coordinateTransformMode","every","outputHeight","outputWidth","scalesHeight","scalesWidth","getSourceFracIndex","createResizeProgramInfo","useExtrapolation","Shape","Slice","starts","ends","SliceV10","some","ind","sliceOps","Softmax","pi","maxElementPerLogicalRow","normalizationPerLogicalRow","textureWidth","textureHeight","xlayout","sizeToDimension","sizeFromDimension","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","createSoftMaxProgramInfo","Split","getProgramCount","results","rundata","SplitUtil","splitShape","numOutputs","Squeeze","Sum","sumLine","Tile","tileOps","Transpose","inputShapes","perm","getAdjustedPerm","sortBasedOnPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","Positional","reverseFunc","encoder","getEncoder","allocateTexture","UnaryOp","glslBuiltinUnary","getSourceCoords","inputTexture","isScalar","innerDims","sourceCoords","Unsqueeze","unsqueezeShape","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","program","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","doDraw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","preprocess","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","texturePosition","bindTexture","uniform1fv","uniform1f","uniform1iv","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","WebGLInferenceHandler","initializers","getValues","opsets","resolveOperator","internalFormat","R32F","RED","textureType","RGBA32F","RGBA","textureSize","dataSize","ALPHA","UNSIGNED_BYTE","_textureSize","isEmptyArray","parseAxisParam","ax","isInt","sizeFromShape","sizeToSquarishShape","sqrt","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","config","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","updateTexture","toTextureData","toTensorData","deleteTexture","_dataType","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","createElement","createCanvas","WebGLContext","webgl2","isContextLost","DEPTH_TEST","STENCIL_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","SCISSOR_TEST","CULL_FACE","cullFace","BACK","frameBufferBound","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","scissor","readPixels","ACTIVE_TEXTURE","TEXTURE0","TEXTURE_BINDING_2D","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createBuffer","geometry","createDefaultGeometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endQuery","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","isTimerResultAvailable","getTimerResult","KernelOp","getNodes","_ops","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","createInferenceHandler","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","execNodeFn","checkInputs","outputList","downstreamNodes","currentDownstreamNodeIndex","to","currentDownstreamNode","getOutputIndices","outputIndex","thisValue","Graph","graphProto","GraphImpl","Value","_from","_to","ProtoUtil","tensorValueTypeFromProto","Node","_nodeProto","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","_allInputNames","_allOutputIndices","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","tensorDataTypeFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","fill","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","finalizeGraph","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","deleteNode","isActivation","SEVERITY_VALUE","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","endTimer","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","logOneEvent","isPromise","eventRes","flush","endSync","beginTimer","checkTimer","toFixed","currentTime","previousPointer","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","getFloat","momentum","spatial","getInt","var_","inputType","inputDimensionality","getString","getInts","supportedModes","ratio","isOptionalC","getFloats","PoolBase","ceilMode","storageOrder","scalesValidataion","isResize","parseRoiData","parseScalesData","parseScalesDataFromOutputSize","yDims","computeOutputShape","opset","_node","needRoiInput","nearestMode","useNearest2xOptimization","roiInputIdx","scalesInputIdx","sizesInputIdx","outputSizes","scalesTensor","sizesTensor","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","versionSelector","opConstructor","DimensionValueType","TensorDataType","NodeType","__init","numElems","startShape","addDim","endShape","DimensionValue","optionalEncoding","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","UNKNOWN","dimType","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","TypeInfo","keyType","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","node_index","src_arg_index","dst_arg_index","NodeEdge","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","Primitive","nameOffset","docStringOffset","domainOffset","sinceVersion","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","NONE","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsOffset","rawDataOffset","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","sOffset","tOffset","gOffset","floatsOffset","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","initializersOffset","nodeArgsOffset","nodesOffset","maxNodeIndex","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","SessionState","graphIdOffset","sessionStateOffset","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","inputNames","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","graphInputTypes","graphInputDims","_model","getInputNames","getOutputNames","stop","isView","modelProtoBlob","onGraphInitialized","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","indices","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","ortTensor","stringDataLength","rawDataArray","rawDataLength","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","targetIndex","sourceIndex","leftShape","transLeft","rightShape","transRight","biasShape","kDim","isValidBroadcast","typeProto","dimsLength","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","dilation","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","BigInt64Array","BigUint64Array","errorCode","getLogLevel","modelDataOffset","sessionOptionsHandle","setSessionOptions","sessionHandle","inputCount","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","fetches","inputArray","inputIndices","kvp","runOptionsAllocs","inputValues","inputAllocs","dataOffset","dataByteLength","dimIndex","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","typedArray","sessionOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","executionProviders","dataLength","initialized","initializing","aborted","timeout","useThreads","MessageChannel","port1","validate","isMultiThreadSupported","useSimd","isSimdSupported","isTimeout","tasks","Blob","scriptSourceCode","fileName","URL","createObjectURL","race","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"mappings":"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","file":"ort-web.es6.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"onnxruntime-common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"onnxruntime-common\")) : factory(root[\"ort\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__2174__) {\nreturn ","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function t(){return N.buffer!=M&&$(N.buffer),j}function r(){return N.buffer!=M&&$(N.buffer),L}function n(){return N.buffer!=M&&$(N.buffer),P}function a(){return N.buffer!=M&&$(N.buffer),G}function o(){return N.buffer!=M&&$(N.buffer),B}function i(){return N.buffer!=M&&$(N.buffer),H}var u,s,c=void 0!==(e=e||{})?e:{};c.ready=new Promise((function(e,t){u=e,s=t}));var f,l={};for(f in c)c.hasOwnProperty(f)&&(l[f]=c[f]);var d=[],m=\"./this.program\",p=function(e,t){throw t},h=!1,g=!1,_=!1,v=!1;h=\"object\"==typeof window,g=\"function\"==typeof importScripts,_=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=!h&&!_&&!g;var E,y,O,b,w,T=c.ENVIRONMENT_IS_PTHREAD||!1,A=\"\";function S(e){return c.locateFile?c.locateFile(e,A):A+e}if(_){var x;A=g?require(\"path\").dirname(A)+\"/\":__dirname+\"/\",E=function(e,t){return b||(b=require(\"fs\")),w||(w=require(\"path\")),e=w.normalize(e),b.readFileSync(e,t?null:\"utf8\")},O=function(e){var t=E(e,!0);return t.buffer||(t=new Uint8Array(t)),U(t.buffer),t},process.argv.length>1&&(m=process.argv[1].replace(/\\\\/g,\"/\")),d=process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof Wn))throw e})),process.on(\"unhandledRejection\",ve),p=function(e){process.exit(e)},c.inspect=function(){return\"[Emscripten Module object]\"};try{x=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=x.Worker}else v?(\"undefined\"!=typeof read&&(E=function(e){return read(e)}),O=function(e){var t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(U(\"object\"==typeof(t=read(e,\"binary\"))),t)},\"undefined\"!=typeof scriptArgs?d=scriptArgs:void 0!==arguments&&(d=arguments),\"function\"==typeof quit&&(p=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(h||g)&&(g?A=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\"blob:\")?A.substr(0,A.lastIndexOf(\"/\")+1):\"\",_?(E=function(e,t){return b||(b=require(\"fs\")),w||(w=require(\"path\")),e=w.normalize(e),b.readFileSync(e,t?null:\"utf8\")},O=function(e){var t=E(e,!0);return t.buffer||(t=new Uint8Array(t)),U(t.buffer),t}):(E=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},g&&(O=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),y=function(e,t,r){var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=function(){200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));_&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var k,C=c.print||console.log.bind(console),I=c.printErr||console.warn.bind(console);for(f in l)l.hasOwnProperty(f)&&(c[f]=l[f]);function D(e){D.shown||(D.shown={}),D.shown[e]||(D.shown[e]=1,I(e))}l=null,c.arguments&&(d=c.arguments),c.thisProgram&&(m=c.thisProgram),c.quit&&(p=c.quit),Atomics.load,Atomics.store,Atomics.compareExchange,c.wasmBinary&&(k=c.wasmBinary);var N,R,F=c.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&ve(\"no native wasm support detected\");var M,j,L,P,G,B,H,W=!1;function U(e,t){e||ve(\"Assertion failed: \"+t)}function Y(e,t,r){for(var n=t+r,a=\"\";!(t>=n);){var o=e[t++];if(!o)return a;if(128&o){var i=63&e[t++];if(192!=(224&o)){var u=63&e[t++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&e[t++])<65536)a+=String.fromCharCode(o);else{var s=o-65536;a+=String.fromCharCode(55296|s>>10,56320|1023&s)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function z(e,t){return e?Y(r(),e,t):\"\"}function V(e,t,r,n){if(!(n>0))return 0;for(var a=r,o=r+n-1,i=0;i<e.length;++i){var u=e.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++i)),u<=127){if(r>=o)break;t[r++]=u}else if(u<=2047){if(r+1>=o)break;t[r++]=192|u>>6,t[r++]=128|63&u}else if(u<=65535){if(r+2>=o)break;t[r++]=224|u>>12,t[r++]=128|u>>6&63,t[r++]=128|63&u}else{if(r+3>=o)break;t[r++]=240|u>>18,t[r++]=128|u>>12&63,t[r++]=128|u>>6&63,t[r++]=128|63&u}}return t[r]=0,r-a}function q(e,t,n){return V(e,r(),t,n)}function X(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);n>=55296&&n<=57343&&(n=65536+((1023&n)<<10)|1023&e.charCodeAt(++r)),n<=127?++t:t+=n<=2047?2:n<=65535?3:4}return t}function K(e){var r=X(e)+1,n=_n(r);return n&&V(e,t(),n,r),n}function Q(e,r){t().set(e,r)}function Z(e,r,n){for(var a=0;a<e.length;++a)t()[r++>>0]=e.charCodeAt(a);n||(t()[r>>0]=0)}function J(e,t){return e%t>0&&(e+=t-e%t),e}function $(e){M=e,c.HEAP8=j=new Int8Array(e),c.HEAP16=new Int16Array(e),c.HEAP32=P=new Int32Array(e),c.HEAPU8=L=new Uint8Array(e),c.HEAPU16=new Uint16Array(e),c.HEAPU32=G=new Uint32Array(e),c.HEAPF32=B=new Float32Array(e),c.HEAPF64=H=new Float64Array(e)}T&&(M=c.buffer);var ee,te=c.INITIAL_MEMORY||16777216;if(T)N=c.wasmMemory,M=c.buffer;else if(c.wasmMemory)N=c.wasmMemory;else if(!((N=new WebAssembly.Memory({initial:te/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw I(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),_&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");N&&(M=N.buffer),te=M.byteLength,$(M);var re=[],ne=[],ae=[],oe=[];function ie(){if(!T){if(c.preRun)for(\"function\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)fe(c.preRun.shift());ke(re)}}function ue(){T||ke(ne)}function se(){T||(ke(ae),hr(),Fe.runExitHandlers())}function ce(){if(!T){if(c.postRun)for(\"function\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;)de(c.postRun.shift());ke(oe)}}function fe(e){re.unshift(e)}function le(e){ne.unshift(e)}function de(e){oe.unshift(e)}var me=0,pe=null,he=null;function ge(e){U(!T,\"addRunDependency cannot be used in a pthread worker\"),me++,c.monitorRunDependencies&&c.monitorRunDependencies(me)}function _e(e){if(me--,c.monitorRunDependencies&&c.monitorRunDependencies(me),0==me&&(null!==pe&&(clearInterval(pe),pe=null),he)){var t=he;he=null,t()}}function ve(e){c.onAbort&&c.onAbort(e),T&&console.error(\"Pthread aborting at \"+(new Error).stack),I(e+=\"\"),W=!0,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var t=new WebAssembly.RuntimeError(e);throw s(t),t}c.preloadedImages={},c.preloadedAudios={};var Ee=\"data:application/octet-stream;base64,\";function ye(e){return e.startsWith(Ee)}function Oe(e){return e.startsWith(\"file://\")}var be=\"ort-wasm-threaded.wasm\";function we(e){try{if(e==be&&k)return new Uint8Array(k);if(O)return O(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){ve(e)}}function Te(){if(!k&&(h||g)){if(\"function\"==typeof fetch&&!Oe(be))return fetch(be,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+be+\"'\";return e.arrayBuffer()})).catch((function(){return we(be)}));if(y)return new Promise((function(e,t){y(be,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return we(be)}))}function Ae(){var e={a:gn};function t(e,t){var r=e.exports;c.asm=r,ee=c.asm.eb,le(c.asm.Ma),Fe.tlsInitFunctions.push(c.asm.jb),R=t,T||_e()}function r(e){t(e.instance,e.module)}function n(t){return Te().then((function(t){return WebAssembly.instantiate(t,e)})).then(t,(function(e){I(\"failed to asynchronously prepare wasm: \"+e),ve(e)}))}if(T||ge(),c.instantiateWasm)try{return c.instantiateWasm(e,t)}catch(e){return I(\"Module.instantiateWasm callback failed with error: \"+e),!1}return(k||\"function\"!=typeof WebAssembly.instantiateStreaming||ye(be)||Oe(be)||\"function\"!=typeof fetch?n(r):fetch(be,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(r,(function(e){return I(\"wasm streaming compile failed: \"+e),I(\"falling back to ArrayBuffer instantiation\"),n(r)}))}))).catch(s),{}}ye(be)||(be=S(be));var Se={653988:function(){throw\"Canceled!\"},654006:function(e,t){setTimeout((function(){wn(e,t)}),0)}};function xe(){Fe.initRuntime()}function ke(e){for(;e.length>0;){var t=e.shift();if(\"function\"!=typeof t){var r=t.func;\"number\"==typeof r?void 0===t.arg?ee.get(r)():ee.get(r)(t.arg):r(void 0===t.arg?null:t.arg)}else t(c)}}var Ce={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};function Ie(e,r){if(e<=0||e>t().length||!0&e||r<0)return-28;if(0==r)return 0;r>=2147483647&&(r=1/0);var a=Atomics.load(n(),Hn>>2),o=0;if(a==e&&Atomics.compareExchange(n(),Hn>>2,a,0)==a&&(o=1,--r<=0))return 1;var i=Atomics.notify(n(),e>>2,r);if(i>=0)return i+o;throw\"Atomics.notify returned an unexpected value \"+i}function De(e){if(T)throw\"Internal Error! killThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in killThread!\";n()[e+12>>2]=0;var t=Fe.pthreads[e];t.worker.terminate(),Fe.freeThreadData(t),Fe.runningWorkers.splice(Fe.runningWorkers.indexOf(t.worker),1),t.worker.pthread=void 0}function Ne(e){if(T)throw\"Internal Error! cancelThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in cancelThread!\";Fe.pthreads[e].worker.postMessage({cmd:\"cancel\"})}function Re(e){if(T)throw\"Internal Error! cleanupThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in cleanupThread!\";var t=Fe.pthreads[e];if(t){n()[e+12>>2]=0;var r=t.worker;Fe.returnWorkerToPool(r)}}c._emscripten_futex_wake=Ie;var Fe={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){},initRuntime:function(){for(var e=_n(228),t=0;t<57;++t)a()[e/4+t]=0;n()[e+12>>2]=e;var r=e+152;n()[r>>2]=r;var o=_n(512);for(t=0;t<128;++t)a()[o/4+t]=0;Atomics.store(a(),e+100>>2,o),Atomics.store(a(),e+40>>2,e),kn(e,!g,1),On(e)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;Fe.threadExitHandlers.length>0;)Fe.threadExitHandlers.pop()();T&&yn()&&In()},runExitHandlersAndDeinitThread:function(e,t){Atomics.store(a(),e+56>>2,1),Atomics.store(a(),e+60>>2,0),Fe.runExitHandlers(),Atomics.store(a(),e+4>>2,t),Atomics.store(a(),e+0>>2,1),Ie(e+0,2147483647),kn(0,0,0)},setExitStatus:function(e){},threadExit:function(e){var t=yn();t&&(Fe.runExitHandlersAndDeinitThread(t,e),T&&postMessage({cmd:\"exit\"}))},threadCancel:function(){Fe.runExitHandlersAndDeinitThread(yn(),-1),postMessage({cmd:\"cancelDone\"})},terminateAllThreads:function(){for(var e in Fe.pthreads)(n=Fe.pthreads[e])&&n.worker&&Fe.returnWorkerToPool(n.worker);Fe.pthreads={};for(var t=0;t<Fe.unusedWorkers.length;++t)(r=Fe.unusedWorkers[t]).terminate();for(Fe.unusedWorkers=[],t=0;t<Fe.runningWorkers.length;++t){var r,n=(r=Fe.runningWorkers[t]).pthread;Fe.freeThreadData(n),r.terminate()}Fe.runningWorkers=[]},freeThreadData:function(e){if(e){if(e.threadInfoStruct){var t=n()[e.threadInfoStruct+100>>2];n()[e.threadInfoStruct+100>>2]=0,En(t),En(e.threadInfoStruct)}e.threadInfoStruct=0,e.allocatedOwnStack&&e.stackBase&&En(e.stackBase),e.stackBase=0,e.worker&&(e.worker.pthread=null)}},returnWorkerToPool:function(e){Fe.runWithoutMainThreadQueuedCalls((function(){delete Fe.pthreads[e.pthread.threadInfoStruct],Fe.unusedWorkers.push(e),Fe.runningWorkers.splice(Fe.runningWorkers.indexOf(e),1),Fe.freeThreadData(e.pthread),e.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(e){n()[Bn>>2]=0;try{e()}finally{n()[Bn>>2]=1}},receiveObjectTransfer:function(e){},threadInit:function(){for(var e in Fe.tlsInitFunctions)Fe.tlsInitFunctions[e]()},loadWasmModuleToWorker:function(e,t){e.onmessage=function(r){var n=r.data,o=n.cmd;if(e.pthread&&(Fe.currentProxiedOperationCallerThread=e.pthread.threadInfoStruct),n.targetThread&&n.targetThread!=yn()){var i=Fe.pthreads[n.targetThread];return i?i.worker.postMessage(r.data,n.transferList):console.error('Internal error! Worker sent a message \"'+o+'\" to target pthread '+n.targetThread+\", but that thread no longer exists!\"),void(Fe.currentProxiedOperationCallerThread=void 0)}if(\"processQueuedMainThreadWork\"===o)An();else if(\"spawnThread\"===o)Kr(r.data);else if(\"cleanupThread\"===o)Re(n.thread);else if(\"killThread\"===o)De(n.thread);else if(\"cancelThread\"===o)Ne(n.thread);else if(\"loaded\"===o)e.loaded=!0,t&&t(e),e.runPthread&&(e.runPthread(),delete e.runPthread);else if(\"print\"===o)C(\"Thread \"+n.threadId+\": \"+n.text);else if(\"printErr\"===o)I(\"Thread \"+n.threadId+\": \"+n.text);else if(\"alert\"===o)alert(\"Thread \"+n.threadId+\": \"+n.text);else if(\"exit\"===o)e.pthread&&Atomics.load(a(),e.pthread.threadInfoStruct+64>>2)&&Fe.returnWorkerToPool(e);else if(\"exitProcess\"===o)try{Yn(n.returnCode)}catch(r){if(r instanceof Wn)return;throw r}else\"cancelDone\"===o?Fe.returnWorkerToPool(e):\"objectTransfer\"===o?Fe.receiveObjectTransfer(r.data):\"setimmediate\"===r.data.target?e.postMessage(r.data):I(\"worker sent an unknown command \"+o);Fe.currentProxiedOperationCallerThread=void 0},e.onerror=function(e){I(\"pthread sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message)},_&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})),e.on(\"exit\",(function(e){}))),e.postMessage({cmd:\"load\",urlOrBlob:c.mainScriptUrlOrBlob||_scriptDir,wasmMemory:N,wasmModule:R})},allocateUnusedWorker:function(){var e=S(\"ort-wasm-threaded.worker.js\");Fe.unusedWorkers.push(new Worker(e))},getNewWorker:function(){return 0==Fe.unusedWorkers.length&&(Fe.allocateUnusedWorker(),Fe.loadWasmModuleToWorker(Fe.unusedWorkers[0])),Fe.unusedWorkers.pop()},busySpinWait:function(e){for(var t=performance.now()+e;performance.now()<t;);}};function Me(e,t){Pn(e,t),jn(e)}function je(e,t){return ee.get(e)(t)}c.establishStackSpace=Me,c.invokeEntryPoint=je;var Le,Pe=0;function Ge(){return F||Pe>0}function Be(e,t,r,n){ve(\"Assertion failed: \"+z(e)+\", at: \"+[t?z(t):\"unknown filename\",r,n?z(n):\"unknown function\"])}c.keepRuntimeAlive=Ge,Le=_?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:T?function(){return performance.now()-c.__performance_now_clock_drift}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var He=!0;function We(e){return n()[vn()>>2]=e,e}function Ue(e,t){var r;if(0===e)r=Date.now();else{if(1!==e&&4!==e||!He)return We(28),-1;r=Le()}return n()[t>>2]=r/1e3|0,n()[t+4>>2]=r%1e3*1e3*1e3|0,0}function Ye(e,t){return Ue(e,t)}var ze={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function Ve(e){return _n(e+ze.SIZE)+ze.SIZE}function qe(e,t){if(T)return Rt(1,1,e,t);ae.unshift({func:e,arg:t})}function Xe(e,t){return qe(e,t)}function Ke(e,t){Fe.threadExitHandlers.push((function(){ee.get(e)(t)}))}function Qe(e,t){return Ke(e,t)}function Ze(e){this.excPtr=e,this.ptr=e-ze.SIZE,this.set_type=function(e){n()[this.ptr+ze.TYPE_OFFSET>>2]=e},this.get_type=function(){return n()[this.ptr+ze.TYPE_OFFSET>>2]},this.set_destructor=function(e){n()[this.ptr+ze.DESTRUCTOR_OFFSET>>2]=e},this.get_destructor=function(){return n()[this.ptr+ze.DESTRUCTOR_OFFSET>>2]},this.set_refcount=function(e){n()[this.ptr+ze.REFCOUNT_OFFSET>>2]=e},this.set_caught=function(e){e=e?1:0,t()[this.ptr+ze.CAUGHT_OFFSET>>0]=e},this.get_caught=function(){return 0!=t()[this.ptr+ze.CAUGHT_OFFSET>>0]},this.set_rethrown=function(e){e=e?1:0,t()[this.ptr+ze.RETHROWN_OFFSET>>0]=e},this.get_rethrown=function(){return 0!=t()[this.ptr+ze.RETHROWN_OFFSET>>0]},this.init=function(e,t){this.set_type(e),this.set_destructor(t),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(n(),this.ptr+ze.REFCOUNT_OFFSET>>2,1)},this.release_ref=function(){return 1===Atomics.sub(n(),this.ptr+ze.REFCOUNT_OFFSET>>2,1)}}function Je(e,t,r){throw new Ze(e).init(t,r),e}var $e={mappings:{},buffers:[null,[],[]],printChar:function(e,t){var r=$e.buffers[e];0===t||10===t?((1===e?C:I)(Y(r,0)),r.length=0):r.push(t)},varargs:void 0,get:function(){return $e.varargs+=4,n()[$e.varargs-4>>2]},getStr:function(e){return z(e)},get64:function(e,t){return e}};function et(e,t){return T?Rt(2,1,e,t):(e=$e.getStr(e),$e.doAccess(e,t))}function tt(e,t,r){return T?Rt(3,1,e,t,r):($e.varargs=r,0)}function rt(e,t){if(T)return Rt(4,1,e,t)}function nt(e,t,r){if(T)return Rt(5,1,e,t,r)}function at(){return 42}function ot(e,t,r){return T?Rt(6,1,e,t,r):($e.varargs=r,0)}function it(e,t){if(T)return Rt(7,1,e,t)}function ut(e,t){return T?Rt(8,1,e,t):(e=$e.getStr(e),$e.doMkdir(e,t))}function st(e,t,r,n,a,o){var i;o<<=12;var u=!1;return 0!=(16&n)&&e%65536!=0?-28:0==(32&n)?-52:(i=Gn(65536,t))?(Cn(i,0,t),u=!0,$e.mappings[i]={malloc:i,len:t,allocated:u,fd:a,prot:r,flags:n,offset:o},i):-48}function ct(e,t,r,n,a,o){return T?Rt(9,1,e,t,r,n,a,o):st(e,t,r,n,a,o)}function ft(e,t){if(-1==(0|e)||0===t)return-28;var r=$e.mappings[e];return r?(t===r.len&&($e.mappings[e]=null,r.allocated&&En(r.malloc)),0):0}function lt(e,t){return T?Rt(10,1,e,t):ft(e,t)}function dt(e,t,r){if(T)return Rt(11,1,e,t,r);$e.varargs=r}function mt(e,t,r){return T?Rt(12,1,e,t,r):(e=$e.getStr(e),$e.doReadlink(e,t,r))}function pt(e){if(T)return Rt(13,1,e)}function ht(e,t){if(T)return Rt(14,1,e,t)}function gt(e){if(T)return Rt(15,1,e)}function _t(e,t){if(e==t)postMessage({cmd:\"processQueuedMainThreadWork\"});else if(T)postMessage({targetThread:e,cmd:\"processThreadQueue\"});else{var r=Fe.pthreads[e],n=r&&r.worker;if(!n)return;n.postMessage({cmd:\"processThreadQueue\"})}return 1}function vt(){ve()}function Et(e,t){return e-t}function yt(e){ve(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function Ot(){ve(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function bt(e,t){ve(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function wt(e,t){ve(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}var Tt=[];function At(e,t){var a;for(Tt.length=0,t>>=2;a=r()[e++];){var o=a<105;o&&1&t&&t++,Tt.push(o?i()[t++>>1]:n()[t]),++t}return Tt}function St(e,t,r){var n=At(t,r);return Se[e].apply(null,n)}function xt(){_||g||D(\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\")}function kt(e,t){}function Ct(e,r,a){if(e<=0||e>t().length||!0&e)return-28;if(h){if(Atomics.load(n(),e>>2)!=r)return-6;var o=performance.now(),i=o+a;for(Atomics.exchange(n(),Hn>>2,e);;){if((o=performance.now())>i)return Atomics.exchange(n(),Hn>>2,0),-73;if(0==Atomics.exchange(n(),Hn>>2,0))break;if(An(),Atomics.load(n(),e>>2)!=r)return-6;Atomics.exchange(n(),Hn>>2,e)}return 0}var u=Atomics.wait(n(),e>>2,r,a);if(\"timed-out\"===u)return-73;if(\"not-equal\"===u)return-6;if(\"ok\"===u)return 0;throw\"Atomics.wait returned an unexpected value \"+u}function It(){return 2147483648}function Dt(e,t,n){r().copyWithin(e,t,t+n)}function Nt(){return _?require(\"os\").cpus().length:navigator.hardwareConcurrency}function Rt(e,t){for(var r=arguments.length-2,n=Mn(),a=r,o=Ln(8*a),u=o>>3,s=0;s<r;s++){var c=arguments[2+s];i()[u+s]=c}var f=Sn(e,a,o,t);return jn(n),f}var Ft=[];function Mt(e,t,r){Ft.length=t;for(var n=r>>3,a=0;a<t;a++)Ft[a]=i()[n+a];return(e<0?Se[-e-1]:mn[e]).apply(null,Ft)}function jt(e){try{return N.grow(e-M.byteLength+65535>>>16),$(N.buffer),1}catch(e){}}function Lt(e){var t=r().length;if((e>>>=0)<=t)return!1;var n=2147483648;if(e>n)return!1;for(var a=1;a<=4;a*=2){var o=t*(1+.2/a);if(o=Math.min(o,e+100663296),jt(Math.min(n,J(Math.max(e,o),65536))))return!0}return!1}var Pt={inEventHandler:0,removeAllEventListeners:function(){for(var e=Pt.eventHandlers.length-1;e>=0;--e)Pt._removeHandler(e);Pt.eventHandlers=[],Pt.deferredCalls=[]},registerRemoveEventListeners:function(){Pt.removeEventListenersRegistered||(ae.push(Pt.removeAllEventListeners),Pt.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(e,t,r){function n(e,t){if(e.length!=t.length)return!1;for(var r in e)if(e[r]!=t[r])return!1;return!0}for(var a in Pt.deferredCalls){var o=Pt.deferredCalls[a];if(o.targetFunction==e&&n(o.argsList,r))return}Pt.deferredCalls.push({targetFunction:e,precedence:t,argsList:r}),Pt.deferredCalls.sort((function(e,t){return e.precedence<t.precedence}))},removeDeferredCalls:function(e){for(var t=0;t<Pt.deferredCalls.length;++t)Pt.deferredCalls[t].targetFunction==e&&(Pt.deferredCalls.splice(t,1),--t)},canPerformEventHandlerRequests:function(){return Pt.inEventHandler&&Pt.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(Pt.canPerformEventHandlerRequests())for(var e=0;e<Pt.deferredCalls.length;++e){var t=Pt.deferredCalls[e];Pt.deferredCalls.splice(e,1),--e,t.targetFunction.apply(null,t.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(e,t){for(var r=0;r<Pt.eventHandlers.length;++r)Pt.eventHandlers[r].target!=e||t&&t!=Pt.eventHandlers[r].eventTypeString||Pt._removeHandler(r--)},_removeHandler:function(e){var t=Pt.eventHandlers[e];t.target.removeEventListener(t.eventTypeString,t.eventListenerFunc,t.useCapture),Pt.eventHandlers.splice(e,1)},registerOrRemoveHandler:function(e){var t=function(t){++Pt.inEventHandler,Pt.currentEventHandler=e,Pt.runDeferredCalls(),e.handlerFunc(t),Pt.runDeferredCalls(),--Pt.inEventHandler};if(e.callbackfunc)e.eventListenerFunc=t,e.target.addEventListener(e.eventTypeString,t,e.useCapture),Pt.eventHandlers.push(e),Pt.registerRemoveEventListeners();else for(var r=0;r<Pt.eventHandlers.length;++r)Pt.eventHandlers[r].target==e.target&&Pt.eventHandlers[r].eventTypeString==e.eventTypeString&&Pt._removeHandler(r--)},queueEventHandlerOnThread_iiii:function(e,t,r,a,o){var i=Mn(),u=Ln(12);n()[u>>2]=r,n()[u+4>>2]=a,n()[u+8>>2]=o,xn(0,e,637534208,t,a,u),jn(i)},getTargetThreadForEventCallback:function(e){switch(e){case 1:return 0;case 2:return Fe.currentProxiedOperationCallerThread;default:return e}},getNodeNameForTarget:function(e){return e?e==window?\"#window\":e==screen?\"#screen\":e&&e.nodeName?e.nodeName:\"\":\"\"},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};function Gt(e){var t=X(e)+1,r=_n(t);return q(e,r,t),r}function Bt(e,t,r,a){var o=Mn(),i=Ln(12),u=0;t&&(u=Gt(t)),n()[i>>2]=u,n()[i+4>>2]=r,n()[i+8>>2]=a,xn(0,e,657457152,0,u,i),jn(o)}function Ht(e,t,r,n){Bt(e,t=t?z(t):\"\",r,n)}function Wt(e){return e>2?z(e):e}var Ut=[0,\"undefined\"!=typeof document?document:0,\"undefined\"!=typeof window?window:0];function Yt(e){return e=Wt(e),Ut[e]||(\"undefined\"!=typeof document?document.querySelector(e):void 0)}function zt(e){return Yt(e)}function Vt(e,t,r){var a=zt(e);if(!a)return-4;if(a.canvasSharedPtr&&(n()[a.canvasSharedPtr>>2]=t,n()[a.canvasSharedPtr+4>>2]=r),!a.offscreenCanvas&&a.controlTransferredOffscreen)return a.canvasSharedPtr?(Ht(n()[a.canvasSharedPtr+8>>2],e,t,r),1):-4;a.offscreenCanvas&&(a=a.offscreenCanvas);var o=!1;if(a.GLctxObject&&a.GLctxObject.GLctx){var i=a.GLctxObject.GLctx.getParameter(2978);o=0===i[0]&&0===i[1]&&i[2]===a.width&&i[3]===a.height}return a.width=t,a.height=r,o&&a.GLctxObject.GLctx.viewport(0,0,t,r),0}function qt(e,t,r){return T?Rt(16,1,e,t,r):Vt(e,t,r)}function Xt(e,t,r){return zt(e)?Vt(e,t,r):qt(e,t,r)}function Kt(e){}function Qt(e){var t=e.getExtension(\"ANGLE_instanced_arrays\");if(t)return e.vertexAttribDivisor=function(e,r){t.vertexAttribDivisorANGLE(e,r)},e.drawArraysInstanced=function(e,r,n,a){t.drawArraysInstancedANGLE(e,r,n,a)},e.drawElementsInstanced=function(e,r,n,a,o){t.drawElementsInstancedANGLE(e,r,n,a,o)},1}function Zt(e){var t=e.getExtension(\"OES_vertex_array_object\");if(t)return e.createVertexArray=function(){return t.createVertexArrayOES()},e.deleteVertexArray=function(e){t.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){t.bindVertexArrayOES(e)},e.isVertexArray=function(e){return t.isVertexArrayOES(e)},1}function Jt(e){var t=e.getExtension(\"WEBGL_draw_buffers\");if(t)return e.drawBuffers=function(e,r){t.drawBuffersWEBGL(e,r)},1}function $t(e){return!!(e.multiDrawWebgl=e.getExtension(\"WEBGL_multi_draw\"))}var er={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(e){er.lastError||(er.lastError=e)},getNewId:function(e){for(var t=er.counter++,r=e.length;r<t;r++)e[r]=null;return t},getSource:function(e,t,r,a){for(var o=\"\",i=0;i<t;++i){var u=a?n()[a+4*i>>2]:-1;o+=z(n()[r+4*i>>2],u<0?void 0:u)}return o},createContext:function(e,t){e.getContextSafariWebGL2Fixed||(e.getContextSafariWebGL2Fixed=e.getContext,e.getContext=function(t,r){var n=e.getContextSafariWebGL2Fixed(t,r);return\"webgl\"==t==n instanceof WebGLRenderingContext?n:null});var r=e.getContext(\"webgl\",t);return r?er.registerContext(r,t):0},registerContext:function(e,t){var r=_n(8);n()[r+4>>2]=yn();var a={handle:r,attributes:t,version:t.majorVersion,GLctx:e};return e.canvas&&(e.canvas.GLctxObject=a),er.contexts[r]=a,(void 0===t.enableExtensionsByDefault||t.enableExtensionsByDefault)&&er.initExtensions(a),r},makeContextCurrent:function(e){return er.currentContext=er.contexts[e],c.ctx=rn=er.currentContext&&er.currentContext.GLctx,!(e&&!rn)},getContext:function(e){return er.contexts[e]},deleteContext:function(e){er.currentContext===er.contexts[e]&&(er.currentContext=null),\"object\"==typeof Pt&&Pt.removeAllHandlersOnTarget(er.contexts[e].GLctx.canvas),er.contexts[e]&&er.contexts[e].GLctx.canvas&&(er.contexts[e].GLctx.canvas.GLctxObject=void 0),En(er.contexts[e].handle),er.contexts[e]=null},initExtensions:function(e){if(e||(e=er.currentContext),!e.initExtensionsDone){e.initExtensionsDone=!0;var t=e.GLctx;Qt(t),Zt(t),Jt(t),t.disjointTimerQueryExt=t.getExtension(\"EXT_disjoint_timer_query\"),$t(t),(t.getSupportedExtensions()||[]).forEach((function(e){e.includes(\"lose_context\")||e.includes(\"debug\")||t.getExtension(e)}))}}},tr=[\"default\",\"low-power\",\"high-performance\"];function rr(e,t){var r=t>>2,a=n()[r+6],o={alpha:!!n()[r+0],depth:!!n()[r+1],stencil:!!n()[r+2],antialias:!!n()[r+3],premultipliedAlpha:!!n()[r+4],preserveDrawingBuffer:!!n()[r+5],powerPreference:tr[a],failIfMajorPerformanceCaveat:!!n()[r+7],majorVersion:n()[r+8],minorVersion:n()[r+9],enableExtensionsByDefault:n()[r+10],explicitSwapControl:n()[r+11],proxyContextToMainThread:n()[r+12],renderViaOffscreenBackBuffer:n()[r+13]},i=zt(e);return i?o.explicitSwapControl?0:er.createContext(i,o):0}function nr(e,t){return rr(e,t)}var ar={initManagers:function(){this.mgrContext||(this.mgrContext=this.mgrContext||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrGraph=this.mgrGraph||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrGraphBuilder=this.mgrGraphBuilder||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrNamedInputs=this.mgrNamedInputs||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrNamedOperands=this.mgrNamedOperands||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrNamedOutputs=this.mgrNamedOutputs||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrNamedResults=this.mgrNamedResults||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrOperand=this.mgrOperand||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrResult=this.mgrResult||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}})},AutoPad:[\"explicit\",\"same-upper\",\"same-lower\"],BuildGraphStatus:[\"success\",\"error\",\"context-lost\",\"unknown\"],ComputeGraphStatus:[\"success\",\"error\",\"context-lost\",\"unknown\"],ErrorFilter:[\"none\",\"validation\",\"out-of-memory\"],ErrorType:[\"no-error\",\"validation\",\"out-of-memory\",\"unknown\",\"device-lost\"],FilterOperandLayout:[\"oihw\",\"hwio\",\"ohwi\",\"ihwo\"],FusedActivation:[\"none\",\"relu\"],InputOperandLayout:[\"nchw\",\"nhwc\"],OperandType:[\"float32\",\"float16\",\"int32\",\"uint32\",\"int8\",\"uint8\"],PowerPreference:[\"default\",\"high_performance\",\"low_power\"],makeI32Array:function(e,t){if(0!==e&&0!==t){for(var r=[],a=0;a<e;++a,t+=4)r.push(n()[t>>2]);return r}},makeArrayBufferView:function(e,t,n=\"float32\"){return U(\"float32\"===n),new Float32Array(r().buffer,e,t/Float32Array.BYTES_PER_ELEMENT)},makeClampOptions:function(e){return{minValue:this.mgrOperand.get(n()[e>>2]),maxValue:this.mgrOperand.get(n()[e+4>>2])}},makeBatchNormOptions:function(e){return{scale:this.mgrOperand.get(n()[e>>2]),bias:this.mgrOperand.get(n()[e+4>>2]),axis:n()[e+8>>2],epsilon:o()[e+12>>2],activation:this.FusedActivation[n()[e+16>>2]]}},makeGemmOptions:function(e){return{c:this.mgrOperand.get(n()[e>>2]),alpha:o()[e+4>>2],beta:o()[e+8>>2],aTranspose:0!==t()[e+12>>0],bTranspose:0!==t()[e+13>>0]}},makeOperandDescriptor:function(e){return{type:this.OperandType[a()[e>>2]],dimensions:this.makeI32Array(a()[e+8>>2],n()[e+4>>2])}},makeConv2dOptions:function(e){return{padding:\"explicit\"===this.AutoPad[n()[e+24>>2]]?this.makeI32Array(a()[e>>2],n()[e+4>>2]):void 0,strides:this.makeI32Array(a()[e+8>>2],n()[e+12>>2]),dilations:this.makeI32Array(a()[e+16>>2],n()[e+20>>2]),autoPad:this.AutoPad[n()[e+24>>2]],groups:n()[e+28>>2],inputLayout:this.InputOperandLayout[n()[e+32>>2]],filterLayout:this.FilterOperandLayout[n()[e+36>>2]],bias:this.mgrOperand.get(n()[e+40>>2]),activation:this.FusedActivation[n()[e+44>>2]]}},makePool2dOptions:function(e){return{windowDimensions:this.makeI32Array(a()[e>>2],n()[e+4>>2]),padding:\"explicit\"===this.AutoPad[n()[e+32>>2]]?this.makeI32Array(a()[e+8>>2],n()[e+12>>2]):void 0,strides:this.makeI32Array(a()[e+16>>2],n()[e+20>>2]),dilations:this.makeI32Array(a()[e+24>>2],n()[e+28>>2]),autoPad:this.AutoPad[n()[e+32>>2]],inputLayout:this.InputOperandLayout[n()[e+36>>2]]}},makeInput:function(e){return{data:this.makeArrayBufferView(n()[e>>2],a()[e+4>>2]),dimensions:0===n()[e+8>>2]?void 0:this.makeI32Array(a()[e+12>>2],n()[e+8>>2])}},makeOutput:function(e){return{data:0===n()[e>>2]?void 0:this.makeArrayBufferView(n()[e>>2],a()[e+4>>2]),dimensions:0===n()[e+8>>2]?void 0:this.makeI32Array(a()[e+12>>2],n()[e+8>>2])}}};function or(){var e=navigator.ml.createContext();return ar.mgrContext.create(e)}var ir={};function ur(){return m||\"./this.program\"}function sr(){if(!sr.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ur()};for(var t in ir)e[t]=ir[t];var r=[];for(var t in e)r.push(t+\"=\"+e[t]);sr.strings=r}return sr.strings}function cr(e,t){if(T)return Rt(17,1,e,t);var r=0;return sr().forEach((function(a,o){var i=t+r;n()[e+4*o>>2]=i,Z(a,i),r+=a.length+1})),0}function fr(e,t){if(T)return Rt(18,1,e,t);var r=sr();n()[e>>2]=r.length;var a=0;return r.forEach((function(e){a+=e.length+1})),n()[t>>2]=a,0}function lr(e){return T?Rt(19,1,e):0}function dr(e,r){if(T)return Rt(20,1,e,r);var n=1==e||2==e?2:ve();return t()[r>>0]=n,0}function mr(e,t,r,a){if(T)return Rt(21,1,e,t,r,a);var o=$e.getStreamFromFD(e),i=$e.doReadv(o,t,r);return n()[a>>2]=i,0}function pr(e,t,r,n,a){if(T)return Rt(22,1,e,t,r,n,a)}function hr(){\"undefined\"!=typeof _fflush&&_fflush(0);var e=$e.buffers;e[1].length&&$e.printChar(1,10),e[2].length&&$e.printChar(2,10)}function gr(e,t,a,o){if(T)return Rt(23,1,e,t,a,o);for(var i=0,u=0;u<a;u++){for(var s=n()[t+8*u>>2],c=n()[t+(8*u+4)>>2],f=0;f<c;f++)$e.printChar(e,r()[s+f]);i+=c}return n()[o>>2]=i,0}function _r(e){var t=Date.now();return n()[e>>2]=t/1e3|0,n()[e+4>>2]=t%1e3*1e3|0,0}function vr(e,t){var r=new Date(1e3*n()[e>>2]);n()[t>>2]=r.getUTCSeconds(),n()[t+4>>2]=r.getUTCMinutes(),n()[t+8>>2]=r.getUTCHours(),n()[t+12>>2]=r.getUTCDate(),n()[t+16>>2]=r.getUTCMonth(),n()[t+20>>2]=r.getUTCFullYear()-1900,n()[t+24>>2]=r.getUTCDay(),n()[t+36>>2]=0,n()[t+32>>2]=0;var a=Date.UTC(r.getUTCFullYear(),0,1,0,0,0,0),o=(r.getTime()-a)/864e5|0;return n()[t+28>>2]=o,vr.GMTString||(vr.GMTString=K(\"GMT\")),n()[t+40>>2]=vr.GMTString,t}function Er(){if(T)return Rt(24,1);if(!Er.called){Er.called=!0;var e=(new Date).getFullYear(),t=new Date(e,0,1),r=new Date(e,6,1),a=t.getTimezoneOffset(),o=r.getTimezoneOffset(),i=Math.max(a,o);n()[Fn()>>2]=60*i,n()[Rn()>>2]=Number(a!=o);var u=l(t),s=l(r),c=K(u),f=K(s);o<a?(n()[Nn()>>2]=c,n()[Nn()+4>>2]=f):(n()[Nn()>>2]=f,n()[Nn()+4>>2]=c)}function l(e){var t=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);return t?t[1]:\"GMT\"}}function yr(e,t){Er();var r=new Date(1e3*n()[e>>2]);n()[t>>2]=r.getSeconds(),n()[t+4>>2]=r.getMinutes(),n()[t+8>>2]=r.getHours(),n()[t+12>>2]=r.getDate(),n()[t+16>>2]=r.getMonth(),n()[t+20>>2]=r.getFullYear()-1900,n()[t+24>>2]=r.getDay();var a=new Date(r.getFullYear(),0,1),o=(r.getTime()-a.getTime())/864e5|0;n()[t+28>>2]=o,n()[t+36>>2]=-60*r.getTimezoneOffset();var i=new Date(r.getFullYear(),6,1).getTimezoneOffset(),u=a.getTimezoneOffset(),s=0|(i!=u&&r.getTimezoneOffset()==Math.min(u,i));n()[t+32>>2]=s;var c=n()[Nn()+(s?4:0)>>2];return n()[t+40>>2]=c,t}function Or(e){Er();var t=new Date(n()[e+20>>2]+1900,n()[e+16>>2],n()[e+12>>2],n()[e+8>>2],n()[e+4>>2],n()[e>>2],0),r=n()[e+32>>2],a=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=o.getTimezoneOffset(),s=Math.min(u,i);if(r<0)n()[e+32>>2]=Number(i!=u&&s==a);else if(r>0!=(s==a)){var c=Math.max(u,i),f=r>0?s:c;t.setTime(t.getTime()+6e4*(f-a))}n()[e+24>>2]=t.getDay();var l=(t.getTime()-o.getTime())/864e5|0;return n()[e+28>>2]=l,n()[e>>2]=t.getSeconds(),n()[e+4>>2]=t.getMinutes(),n()[e+8>>2]=t.getHours(),n()[e+12>>2]=t.getDate(),n()[e+16>>2]=t.getMonth(),t.getTime()/1e3|0}function br(e){ar.mgrContext.reference(e)}function wr(e){ar.mgrContext.release(e)}function Tr(e,t,r){var n=ar.mgrGraphBuilder.get(e),a=ar.mgrOperand.get(t),o=ar.mgrOperand.get(r),i=n.add(a,o);return ar.mgrOperand.create(i)}function Ar(e,t,r){var n=ar.mgrGraphBuilder.get(e),a=ar.mgrOperand.get(t),o=ar.makePool2dOptions(r),i=n.averagePool2d(a,o);return ar.mgrOperand.create(i)}function Sr(e,t,r,n,a){var o=ar.mgrGraphBuilder.get(e),i=ar.mgrOperand.get(t),u=ar.mgrOperand.get(r),s=ar.mgrOperand.get(n),c=ar.makeBatchNormOptions(a),f=o.batchNormalization(i,u,s,c);return ar.mgrOperand.create(f)}function xr(e,t){var r=ar.mgrGraphBuilder.get(e),n=ar.mgrNamedOperands.get(t);try{var a=r.buildSync(n);return ar.mgrGraph.create(a)}catch(e){return console.log(\"builder.buildSync failed: \"+e),0}}function kr(e,t,r,n){for(var a=ar.mgrGraphBuilder.get(e),o=ar.makeI32Array(t,r),i=[],u=0;u<o.length;++u)i.push(ar.mgrOperand.get(o[u]));var s=a.concat(i,n);return ar.mgrOperand.create(s)}function Cr(e,t,r,n){var a=ar.mgrGraphBuilder.get(e),o=ar.makeOperandDescriptor(t),i=ar.makeArrayBufferView(r,n),u=a.constant(o,i);return ar.mgrOperand.create(u)}function Ir(e,t,r,n){var a=ar.mgrGraphBuilder.get(e),o=ar.mgrOperand.get(t),i=ar.mgrOperand.get(r),u=ar.makeConv2dOptions(n),s=a.conv2d(o,i,u);return ar.mgrOperand.create(s)}function Dr(e,t,r,n){var a=ar.mgrGraphBuilder.get(e),o=ar.mgrOperand.get(t),i=ar.mgrOperand.get(r),u=ar.makeGemmOptions(n),s=a.gemm(o,i,u);return ar.mgrOperand.create(s)}function Nr(e,t,r){var n=ar.mgrGraphBuilder.get(e),a=z(t),o=ar.makeOperandDescriptor(r),i=n.input(a,o);return ar.mgrOperand.create(i)}function Rr(e,t,r){var n=ar.mgrGraphBuilder.get(e),a=ar.mgrOperand.get(t),o=ar.mgrOperand.get(r),i=n.matmul(a,o);return ar.mgrOperand.create(i)}function Fr(e,t,r){var n=ar.mgrGraphBuilder.get(e),a=ar.mgrOperand.get(t),o=ar.makePool2dOptions(r),i=n.maxPool2d(a,o);return ar.mgrOperand.create(i)}function Mr(e){ar.mgrGraphBuilder.release(e)}function jr(e,t){var r=ar.mgrGraphBuilder.get(e),n=ar.mgrOperand.get(t),a=r.relu(n);return ar.mgrOperand.create(a)}function Lr(e,t,r,n){var a=ar.mgrGraphBuilder.get(e),o=ar.mgrOperand.get(t),i=ar.makeI32Array(n,r),u=a.reshape(o,i);return ar.mgrOperand.create(u)}function Pr(e,t,r){var n=ar.mgrGraph.get(e),a=ar.mgrNamedInputs.get(t),o=ar.mgrNamedOutputs.get(r);return n.computeSync(a,o)}function Gr(e){ar.mgrGraph.reference(e)}function Br(e){ar.mgrGraph.release(e)}function Hr(e){ar.mgrNamedInputs.release(e)}function Wr(e,t,r){var n=ar.mgrNamedInputs.get(e),a=z(t),o=ar.makeInput(r);n[a]=o}function Ur(e){ar.mgrNamedOperands.release(e)}function Yr(e,t,r){var n=ar.mgrNamedOperands.get(e),a=z(t),o=ar.mgrOperand.get(r);n[a]=o}function zr(e){ar.mgrNamedOutputs.release(e)}function Vr(e,t,r){var n=ar.mgrNamedOutputs.get(e),a=z(t),o=ar.makeOutput(r);n[a]=o}function qr(e){ar.mgrOperand.reference(e)}function Xr(e){ar.mgrOperand.release(e)}function Kr(e){if(T)throw\"Internal Error! spawnThread() can only ever be called from main application thread!\";var t=Fe.getNewWorker();if(!t)return 6;if(void 0!==t.pthread)throw\"Internal error!\";if(!e.pthread_ptr)throw\"Internal error, no pthread ptr!\";Fe.runningWorkers.push(t);for(var r=_n(512),o=0;o<128;++o)n()[r+4*o>>2]=0;var i=e.stackBase+e.stackSize,u=Fe.pthreads[e.pthread_ptr]={worker:t,stackBase:e.stackBase,stackSize:e.stackSize,allocatedOwnStack:e.allocatedOwnStack,threadInfoStruct:e.pthread_ptr},s=u.threadInfoStruct>>2;Atomics.store(a(),s+16,e.detached),Atomics.store(a(),s+25,r),Atomics.store(a(),s+10,u.threadInfoStruct),Atomics.store(a(),s+20,e.stackSize),Atomics.store(a(),s+19,i),Atomics.store(a(),s+26,e.stackSize),Atomics.store(a(),s+28,i),Atomics.store(a(),s+29,e.detached);var c=Dn()+40;Atomics.store(a(),s+43,c),t.pthread=u;var f={cmd:\"run\",start_routine:e.startRoutine,arg:e.arg,threadInfoStruct:e.pthread_ptr,stackBase:e.stackBase,stackSize:e.stackSize};return t.runPthread=function(){f.time=performance.now(),t.postMessage(f,e.transferList)},t.loaded&&(t.runPthread(),delete t.runPthread),0}function Qr(e,t,r,o){if(\"undefined\"==typeof SharedArrayBuffer)return I(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;if(!e)return I(\"pthread_create called with a null thread pointer!\"),28;var i=[];if(T&&0===i.length)return Tn(687865856,e,t,r,o);var u=0,s=0,c=0;t&&-1!=t?(u=n()[t>>2],u+=81920,s=n()[t+8>>2],c=0!==n()[t+12>>2]):u=2097152;var f=0==s;f?s=Gn(16,u):U((s-=u)>0);for(var l=_n(228),d=0;d<57;++d)a()[(l>>2)+d]=0;n()[e>>2]=l,n()[l+12>>2]=l;var m=l+152;n()[m>>2]=m;var p={stackBase:s,stackSize:u,allocatedOwnStack:f,detached:c,startRoutine:r,pthread_ptr:l,arg:o,transferList:i};return T?(p.cmd=\"spawnThread\",postMessage(p,i),0):Kr(p)}function Zr(){if(T){var e=yn();if(e&&!Atomics.load(a(),e+56>>2)&&2==Atomics.load(a(),e+0>>2))throw\"Canceled!\"}}function Jr(e,t,r){if(!e)return I(\"pthread_join attempted on a null thread pointer!\"),Ce.ESRCH;if(T&&yn()==e)return I(\"PThread \"+e+\" is attempting to join to itself!\"),Ce.EDEADLK;if(!T&&bn()==e)return I(\"Main thread \"+e+\" is attempting to join to itself!\"),Ce.EDEADLK;if(n()[e+12>>2]!==e)return I(\"pthread_join attempted on thread \"+e+\", which does not point to a valid thread, or does not exist anymore!\"),Ce.ESRCH;if(Atomics.load(a(),e+64>>2))return I(\"Attempted to join thread \"+e+\", which was already detached!\"),Ce.EINVAL;for(r&&xt();;){var o=Atomics.load(a(),e+0>>2);if(1==o){var i=Atomics.load(a(),e+4>>2);return t&&(n()[t>>2]=i),Atomics.store(a(),e+64>>2,1),T?postMessage({cmd:\"cleanupThread\",thread:e}):Re(e),0}if(!r)return Ce.EBUSY;Zr(),T||An(),Ct(e+0,o,T?100:1)}}function $r(e,t){return Jr(e,t,!0)}function en(e){return e%4==0&&(e%100!=0||e%400==0)}function tn(e,t){for(var r=0,n=0;n<=t;r+=e[n++]);return r}var rn,nn=[31,29,31,30,31,30,31,31,30,31,30,31],an=[31,28,31,30,31,30,31,31,30,31,30,31];function on(e,t){for(var r=new Date(e.getTime());t>0;){var n=en(r.getFullYear()),a=r.getMonth(),o=(n?nn:an)[a];if(!(t>o-r.getDate()))return r.setDate(r.getDate()+t),r;t-=o-r.getDate()+1,r.setDate(1),a<11?r.setMonth(a+1):(r.setMonth(0),r.setFullYear(r.getFullYear()+1))}return r}function un(e,t,r,a){var o=n()[a+40>>2],i={tm_sec:n()[a>>2],tm_min:n()[a+4>>2],tm_hour:n()[a+8>>2],tm_mday:n()[a+12>>2],tm_mon:n()[a+16>>2],tm_year:n()[a+20>>2],tm_wday:n()[a+24>>2],tm_yday:n()[a+28>>2],tm_isdst:n()[a+32>>2],tm_gmtoff:n()[a+36>>2],tm_zone:o?z(o):\"\"},u=z(r),s={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var c in s)u=u.replace(new RegExp(c,\"g\"),s[c]);var f=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],l=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function d(e,t,r){for(var n=\"number\"==typeof e?e.toString():e||\"\";n.length<t;)n=r[0]+n;return n}function m(e,t){return d(e,t,\"0\")}function p(e,t){function r(e){return e<0?-1:e>0?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function h(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function g(e){var t=on(new Date(e.tm_year+1900,0,1),e.tm_yday),r=new Date(t.getFullYear(),0,4),n=new Date(t.getFullYear()+1,0,4),a=h(r),o=h(n);return p(a,t)<=0?p(o,t)<=0?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var _={\"%a\":function(e){return f[e.tm_wday].substring(0,3)},\"%A\":function(e){return f[e.tm_wday]},\"%b\":function(e){return l[e.tm_mon].substring(0,3)},\"%B\":function(e){return l[e.tm_mon]},\"%C\":function(e){return m((e.tm_year+1900)/100|0,2)},\"%d\":function(e){return m(e.tm_mday,2)},\"%e\":function(e){return d(e.tm_mday,2,\" \")},\"%g\":function(e){return g(e).toString().substring(2)},\"%G\":function(e){return g(e)},\"%H\":function(e){return m(e.tm_hour,2)},\"%I\":function(e){var t=e.tm_hour;return 0==t?t=12:t>12&&(t-=12),m(t,2)},\"%j\":function(e){return m(e.tm_mday+tn(en(e.tm_year+1900)?nn:an,e.tm_mon-1),3)},\"%m\":function(e){return m(e.tm_mon+1,2)},\"%M\":function(e){return m(e.tm_min,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return e.tm_hour>=0&&e.tm_hour<12?\"AM\":\"PM\"},\"%S\":function(e){return m(e.tm_sec,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.tm_wday||7},\"%U\":function(e){var t=new Date(e.tm_year+1900,0,1),r=0===t.getDay()?t:on(t,7-t.getDay()),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(p(r,n)<0){var a=tn(en(n.getFullYear())?nn:an,n.getMonth()-1)-31,o=31-r.getDate()+a+n.getDate();return m(Math.ceil(o/7),2)}return 0===p(r,t)?\"01\":\"00\"},\"%V\":function(e){var t,r=new Date(e.tm_year+1900,0,4),n=new Date(e.tm_year+1901,0,4),a=h(r),o=h(n),i=on(new Date(e.tm_year+1900,0,1),e.tm_yday);return p(i,a)<0?\"53\":p(o,i)<=0?\"01\":(t=a.getFullYear()<e.tm_year+1900?e.tm_yday+32-a.getDate():e.tm_yday+1-a.getDate(),m(Math.ceil(t/7),2))},\"%w\":function(e){return e.tm_wday},\"%W\":function(e){var t=new Date(e.tm_year,0,1),r=1===t.getDay()?t:on(t,0===t.getDay()?1:7-t.getDay()+1),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(p(r,n)<0){var a=tn(en(n.getFullYear())?nn:an,n.getMonth()-1)-31,o=31-r.getDate()+a+n.getDate();return m(Math.ceil(o/7),2)}return 0===p(r,t)?\"01\":\"00\"},\"%y\":function(e){return(e.tm_year+1900).toString().substring(2)},\"%Y\":function(e){return e.tm_year+1900},\"%z\":function(e){var t=e.tm_gmtoff,r=t>=0;return t=(t=Math.abs(t)/60)/60*100+t%60,(r?\"+\":\"-\")+String(\"0000\"+t).slice(-4)},\"%Z\":function(e){return e.tm_zone},\"%%\":function(){return\"%\"}};for(var c in _)u.includes(c)&&(u=u.replace(new RegExp(c,\"g\"),_[c](i)));var v=pn(u,!1);return v.length>t?0:(Q(v,e),v.length-1)}function sn(e,t,r,n){return un(e,t,r,n)}function cn(e){var t=ar.mgrContext.get(e),r=new MLGraphBuilder(t);return ar.mgrGraphBuilder.create(r)}function fn(){return ar.mgrNamedInputs.create({})}function ln(){return ar.mgrNamedOperands.create({})}function dn(){return ar.mgrNamedOutputs.create({})}T||Fe.initMainThreadBlock(),ar.initManagers();var mn=[null,qe,et,tt,rt,nt,ot,it,ut,ct,lt,dt,mt,pt,ht,gt,qt,cr,fr,lr,dr,mr,pr,gr,Er];function pn(e,t,r){var n=r>0?r:X(e)+1,a=new Array(n),o=V(e,a,0,a.length);return t&&(a.length=o),a}var hn,gn={h:Be,ba:Ye,b:Ve,d:Xe,e:Qe,c:Je,Q:et,r:tt,X:rt,R:nt,t:at,I:ot,S:it,W:ut,V:ct,U:lt,q:dt,P:mt,N:pt,u:ht,O:gt,aa:_t,g:vt,y:Ue,Ka:Et,M:yt,m:Ot,T:bt,D:wt,w:St,H:xt,n:kt,j:Ct,k:Ie,Y:It,i:Le,F:Dt,o:Nt,Z:Mt,G:Lt,_:Xt,v:Kt,$:nr,Ia:or,K:cr,L:fr,l:lr,J:dr,s:mr,C:pr,p:gr,na:_r,La:vr,E:xe,A:yr,a:N||c.wasmMemory,z:Or,Ha:br,Ga:wr,Ca:Tr,Ba:Ar,Aa:Sr,za:xr,ya:kr,xa:Cr,wa:Ir,va:Dr,ua:Nr,ta:Rr,sa:Fr,pa:Mr,ra:jr,qa:Lr,Fa:Pr,Ea:Gr,Da:Br,ma:Hr,oa:Wr,ka:Ur,la:Yr,ia:zr,ja:Vr,ha:qr,ga:Xr,x:Qr,B:$r,Ja:un,f:sn,fa:cn,ea:fn,da:ln,ca:dn},_n=(Ae(),c.___wasm_call_ctors=function(){return(c.___wasm_call_ctors=c.asm.Ma).apply(null,arguments)},c._OrtInit=function(){return(c._OrtInit=c.asm.Na).apply(null,arguments)},c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.Oa).apply(null,arguments)},c._OrtSessionOptionsAppendExecutionProviderWebNN=function(){return(c._OrtSessionOptionsAppendExecutionProviderWebNN=c.asm.Pa).apply(null,arguments)},c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.Qa).apply(null,arguments)},c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.Ra).apply(null,arguments)},c._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.Sa).apply(null,arguments)},c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.Ta).apply(null,arguments)},c._OrtGetInputCount=function(){return(c._OrtGetInputCount=c.asm.Ua).apply(null,arguments)},c._OrtGetOutputCount=function(){return(c._OrtGetOutputCount=c.asm.Va).apply(null,arguments)},c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.Wa).apply(null,arguments)},c._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.Xa).apply(null,arguments)},c._OrtFree=function(){return(c._OrtFree=c.asm.Ya).apply(null,arguments)},c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.Za).apply(null,arguments)},c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm._a).apply(null,arguments)},c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.$a).apply(null,arguments)},c._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.ab).apply(null,arguments)},c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.bb).apply(null,arguments)},c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.cb).apply(null,arguments)},c._OrtRun=function(){return(c._OrtRun=c.asm.db).apply(null,arguments)},c._malloc=function(){return(_n=c._malloc=c.asm.fb).apply(null,arguments)}),vn=c.___errno_location=function(){return(vn=c.___errno_location=c.asm.gb).apply(null,arguments)},En=c._free=function(){return(En=c._free=c.asm.hb).apply(null,arguments)},yn=c._pthread_self=function(){return(yn=c._pthread_self=c.asm.ib).apply(null,arguments)},On=(c._emscripten_tls_init=function(){return(c._emscripten_tls_init=c.asm.jb).apply(null,arguments)},c._emscripten_current_thread_process_queued_calls=function(){return(c._emscripten_current_thread_process_queued_calls=c.asm.kb).apply(null,arguments)},c._emscripten_register_main_browser_thread_id=function(){return(On=c._emscripten_register_main_browser_thread_id=c.asm.lb).apply(null,arguments)}),bn=c._emscripten_main_browser_thread_id=function(){return(bn=c._emscripten_main_browser_thread_id=c.asm.mb).apply(null,arguments)},wn=c.__emscripten_do_dispatch_to_thread=function(){return(wn=c.__emscripten_do_dispatch_to_thread=c.asm.nb).apply(null,arguments)},Tn=c._emscripten_sync_run_in_main_thread_4=function(){return(Tn=c._emscripten_sync_run_in_main_thread_4=c.asm.ob).apply(null,arguments)},An=c._emscripten_main_thread_process_queued_calls=function(){return(An=c._emscripten_main_thread_process_queued_calls=c.asm.pb).apply(null,arguments)},Sn=c._emscripten_run_in_main_runtime_thread_js=function(){return(Sn=c._emscripten_run_in_main_runtime_thread_js=c.asm.qb).apply(null,arguments)},xn=c.__emscripten_call_on_thread=function(){return(xn=c.__emscripten_call_on_thread=c.asm.rb).apply(null,arguments)},kn=c.__emscripten_thread_init=function(){return(kn=c.__emscripten_thread_init=c.asm.sb).apply(null,arguments)},Cn=c._memset=function(){return(Cn=c._memset=c.asm.tb).apply(null,arguments)},In=c.___pthread_tsd_run_dtors=function(){return(In=c.___pthread_tsd_run_dtors=c.asm.ub).apply(null,arguments)},Dn=c._emscripten_get_global_libc=function(){return(Dn=c._emscripten_get_global_libc=c.asm.vb).apply(null,arguments)},Nn=c.__get_tzname=function(){return(Nn=c.__get_tzname=c.asm.wb).apply(null,arguments)},Rn=c.__get_daylight=function(){return(Rn=c.__get_daylight=c.asm.xb).apply(null,arguments)},Fn=c.__get_timezone=function(){return(Fn=c.__get_timezone=c.asm.yb).apply(null,arguments)},Mn=c.stackSave=function(){return(Mn=c.stackSave=c.asm.zb).apply(null,arguments)},jn=c.stackRestore=function(){return(jn=c.stackRestore=c.asm.Ab).apply(null,arguments)},Ln=c.stackAlloc=function(){return(Ln=c.stackAlloc=c.asm.Bb).apply(null,arguments)},Pn=c._emscripten_stack_set_limits=function(){return(Pn=c._emscripten_stack_set_limits=c.asm.Cb).apply(null,arguments)},Gn=c._memalign=function(){return(Gn=c._memalign=c.asm.Db).apply(null,arguments)},Bn=c.__emscripten_allow_main_runtime_queued_calls=653536,Hn=c.__emscripten_main_thread_futex=658904;function Wn(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function Un(e){if(e=e||d,!(me>0)){if(T)return u(c),ue(),void postMessage({cmd:\"loaded\"});ie(),me>0||(c.setStatus?(c.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){c.setStatus(\"\")}),1),t()}),1)):t())}function t(){hn||(hn=!0,c.calledRun=!0,W||(ue(),u(c),c.onRuntimeInitialized&&c.onRuntimeInitialized(),ce()))}}function Yn(e,t){if(!t||!Ge()||0!==e){if(!t&&T)throw postMessage({cmd:\"exitProcess\",returnCode:e}),new Wn(e);Ge()||(Fe.terminateAllThreads(),se(),c.onExit&&c.onExit(e),W=!0),p(e,new Wn(e))}}if(c.UTF8ToString=z,c.stringToUTF8=q,c.lengthBytesUTF8=X,c.PThread=Fe,c.stackSave=Mn,c.stackRestore=jn,c.stackAlloc=Ln,c.PThread=Fe,c.wasmMemory=N,c.ExitStatus=Wn,he=function e(){hn||Un(),hn||(he=e)},c.run=Un,c.preInit)for(\"function\"==typeof c.preInit&&(c.preInit=[c.preInit]);c.preInit.length>0;)c.preInit.pop()();return T&&(F=!1,Fe.initWorker()),Un(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\nvar ortWasm = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm) {\n  ortWasm = ortWasm || {};\n\nvar Module=typeof ortWasm!==\"undefined\"?ortWasm:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);quit_=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){read_=function shell_read(f){return read(f)}}readBinary=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){arguments_=scriptArgs}else if(typeof arguments!=\"undefined\"){arguments_=arguments}if(typeof quit===\"function\"){quit_=function(status){quit(status)}}if(typeof print!==\"undefined\"){if(typeof console===\"undefined\")console={};console.log=print;console.warn=console.error=typeof printErr!==\"undefined\"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||false;if(typeof WebAssembly!==\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith(\"file://\")}var wasmBinaryFile=\"ort-wasm.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"xa\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"bb\"];addOnInit(Module[\"asm\"][\"ya\"]);removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){var result=WebAssembly.instantiate(binary,info);return result}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync().catch(readyPromiseReject);return{}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function ___cxa_allocate_exception(size){return _malloc(size+ExceptionInfoAttrs.SIZE)+ExceptionInfoAttrs.SIZE}function _atexit(func,arg){__ATEXIT__.unshift({func:func,arg:arg})}function ___cxa_atexit(a0,a1){return _atexit(a0,a1)}function ___cxa_thread_atexit(a0,a1){return _atexit(a0,a1)}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-ExceptionInfoAttrs.SIZE;this.set_type=function(type){HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]=type};this.get_type=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=prev-1;return prev===1}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},get64:function(low,high){return low}};function ___sys_access(path,amode){path=SYSCALLS.getStr(path);return SYSCALLS.doAccess(path,amode)}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_fstat64(fd,buf){}function ___sys_getdents64(fd,dirp,count){}function ___sys_getpid(){return 42}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_lstat64(path,buf){}function ___sys_mkdir(path,mode){path=SYSCALLS.getStr(path);return SYSCALLS.doMkdir(path,mode)}function syscallMmap2(addr,len,prot,flags,fd,off){off<<=12;var ptr;var allocated=false;if((flags&16)!==0&&addr%65536!==0){return-28}if((flags&32)!==0){ptr=_memalign(65536,len);if(!ptr)return-48;_memset(ptr,0,len);allocated=true}else{return-52}SYSCALLS.mappings[ptr]={malloc:ptr,len:len,allocated:allocated,fd:fd,prot:prot,flags:flags,offset:off};return ptr}function ___sys_mmap2(addr,len,prot,flags,fd,off){return syscallMmap2(addr,len,prot,flags,fd,off)}function syscallMunmap(addr,len){if((addr|0)===-1||len===0){return-28}var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc)}}return 0}function ___sys_munmap(addr,len){return syscallMunmap(addr,len)}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs}function ___sys_readlink(path,buf,bufsize){path=SYSCALLS.getStr(path);return SYSCALLS.doReadlink(path,buf,bufsize)}function ___sys_rmdir(path){}function ___sys_stat64(path,buf){}function ___sys_unlink(path){}function _abort(){abort()}var _emscripten_get_now;if(ENVIRONMENT_IS_NODE){_emscripten_get_now=function(){var t=process[\"hrtime\"]();return t[0]*1e3+t[1]/1e6}}else if(typeof dateNow!==\"undefined\"){_emscripten_get_now=dateNow}else _emscripten_get_now=function(){return performance.now()};var _emscripten_get_now_is_monotonic=true;function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now()}else if((clk_id===1||clk_id===4)&&_emscripten_get_now_is_monotonic){now=_emscripten_get_now()}else{setErrNo(28);return-1}HEAP32[tp>>2]=now/1e3|0;HEAP32[tp+4>>2]=now%1e3*1e3*1e3|0;return 0}function _difftime(time1,time0){return time1-time0}function _dlclose(handle){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlerror(){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlopen(filename,flag){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlsym(handle,symbol){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _emscripten_get_heap_max(){return 2147483648}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}function _emscripten_thread_sleep(msecs){var start=_emscripten_get_now();while(_emscripten_get_now()-start<msecs){}}var WebNN={initManagers:function(){if(this[\"mgrContext\"])return;function makeManager(){return{objects:{},nextId:1,create:function(object,wrapper){wrapper=wrapper||{};var id=this.nextId++;wrapper.refcount=1;wrapper.object=object;this.objects[id]=wrapper;return id},get:function(id){if(id===0)return undefined;var o=this.objects[id];return o.object},reference:function(id){var o=this.objects[id];o.refcount++},release:function(id){var o=this.objects[id];o.refcount--;if(o.refcount<=0){delete this.objects[id]}}}}this[\"mgrContext\"]=this[\"mgrContext\"]||makeManager();this.mgrGraph=this.mgrGraph||makeManager();this.mgrGraphBuilder=this.mgrGraphBuilder||makeManager();this.mgrNamedInputs=this.mgrNamedInputs||makeManager();this.mgrNamedOperands=this.mgrNamedOperands||makeManager();this.mgrNamedOutputs=this.mgrNamedOutputs||makeManager();this.mgrNamedResults=this.mgrNamedResults||makeManager();this.mgrOperand=this.mgrOperand||makeManager();this.mgrResult=this.mgrResult||makeManager()},AutoPad:[\"explicit\",\"same-upper\",\"same-lower\"],BuildGraphStatus:[\"success\",\"error\",\"context-lost\",\"unknown\"],ComputeGraphStatus:[\"success\",\"error\",\"context-lost\",\"unknown\"],ErrorFilter:[\"none\",\"validation\",\"out-of-memory\"],ErrorType:[\"no-error\",\"validation\",\"out-of-memory\",\"unknown\",\"device-lost\"],FilterOperandLayout:[\"oihw\",\"hwio\",\"ohwi\",\"ihwo\"],FusedActivation:[\"none\",\"relu\"],InputOperandLayout:[\"nchw\",\"nhwc\"],OperandType:[\"float32\",\"float16\",\"int32\",\"uint32\",\"int8\",\"uint8\"],PowerPreference:[\"default\",\"high_performance\",\"low_power\"],makeI32Array:function(count,arrayPtr){if(count===0||arrayPtr===0){return undefined}var array=[];for(var i=0;i<count;++i,arrayPtr+=4){array.push(HEAP32[arrayPtr>>2])}return array},makeArrayBufferView:function(offset,byteSize,type=\"float32\"){assert(type===\"float32\");return new Float32Array(HEAPU8.buffer,offset,byteSize/Float32Array.BYTES_PER_ELEMENT)},makeClampOptions:function(ptr){return{\"minValue\":this.mgrOperand.get(HEAP32[ptr>>2]),\"maxValue\":this.mgrOperand.get(HEAP32[ptr+4>>2])}},makeBatchNormOptions:function(ptr){return{\"scale\":this.mgrOperand.get(HEAP32[ptr>>2]),\"bias\":this.mgrOperand.get(HEAP32[ptr+4>>2]),\"axis\":HEAP32[ptr+8>>2],\"epsilon\":HEAPF32[ptr+12>>2],\"activation\":this.FusedActivation[HEAP32[ptr+16>>2]]}},makeGemmOptions:function(ptr){return{\"c\":this.mgrOperand.get(HEAP32[ptr>>2]),\"alpha\":HEAPF32[ptr+4>>2],\"beta\":HEAPF32[ptr+8>>2],\"aTranspose\":HEAP8[ptr+12>>0]!==0,\"bTranspose\":HEAP8[ptr+13>>0]!==0}},makeOperandDescriptor:function(ptr){return{\"type\":this.OperandType[HEAPU32[ptr>>2]],\"dimensions\":this.makeI32Array(HEAPU32[ptr+8>>2],HEAP32[ptr+4>>2])}},makeConv2dOptions:function(ptr){return{\"padding\":this.AutoPad[HEAP32[ptr+24>>2]]===\"explicit\"?this.makeI32Array(HEAPU32[ptr>>2],HEAP32[ptr+4>>2]):undefined,\"strides\":this.makeI32Array(HEAPU32[ptr+8>>2],HEAP32[ptr+12>>2]),\"dilations\":this.makeI32Array(HEAPU32[ptr+16>>2],HEAP32[ptr+20>>2]),\"autoPad\":this.AutoPad[HEAP32[ptr+24>>2]],\"groups\":HEAP32[ptr+28>>2],\"inputLayout\":this.InputOperandLayout[HEAP32[ptr+32>>2]],\"filterLayout\":this.FilterOperandLayout[HEAP32[ptr+36>>2]],\"bias\":this.mgrOperand.get(HEAP32[ptr+40>>2]),\"activation\":this.FusedActivation[HEAP32[ptr+44>>2]]}},makePool2dOptions:function(ptr){return{\"windowDimensions\":this.makeI32Array(HEAPU32[ptr>>2],HEAP32[ptr+4>>2]),\"padding\":this.AutoPad[HEAP32[ptr+32>>2]]===\"explicit\"?this.makeI32Array(HEAPU32[ptr+8>>2],HEAP32[ptr+12>>2]):undefined,\"strides\":this.makeI32Array(HEAPU32[ptr+16>>2],HEAP32[ptr+20>>2]),\"dilations\":this.makeI32Array(HEAPU32[ptr+24>>2],HEAP32[ptr+28>>2]),\"autoPad\":this.AutoPad[HEAP32[ptr+32>>2]],\"inputLayout\":this.InputOperandLayout[HEAP32[ptr+36>>2]]}},makeInput:function(ptr){return{\"data\":this.makeArrayBufferView(HEAP32[ptr>>2],HEAPU32[ptr+4>>2]),\"dimensions\":HEAP32[ptr+8>>2]===0?undefined:this.makeI32Array(HEAPU32[ptr+12>>2],HEAP32[ptr+8>>2])}},makeOutput:function(ptr){return{\"data\":HEAP32[ptr>>2]===0?undefined:this.makeArrayBufferView(HEAP32[ptr>>2],HEAPU32[ptr+4>>2]),\"dimensions\":HEAP32[ptr+8>>2]===0?undefined:this.makeI32Array(HEAPU32[ptr+12>>2],HEAP32[ptr+8>>2])}}};function _emscripten_webnn_create_context(){var context=navigator.ml.createContext();return WebNN.mgrContext.create(context)}var ENV={};function getExecutableName(){return thisProgram||\"./this.program\"}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator===\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\";var env={\"USER\":\"web_user\",\"LOGNAME\":\"web_user\",\"PATH\":\"/\",\"PWD\":\"/\",\"HOME\":\"/home/web_user\",\"LANG\":lang,\"_\":getExecutableName()};for(var x in ENV){env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+\"=\"+env[x])}getEnvStrings.strings=strings}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _fd_close(fd){return 0}function _fd_fdstat_get(fd,pbuf){var type=fd==1||fd==2?2:abort();HEAP8[pbuf>>0]=type;return 0}function _fd_read(fd,iov,iovcnt,pnum){var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){}function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j])}num+=len}HEAP32[pnum>>2]=num;return 0}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function _gmtime_r(time,tmPtr){var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getUTCSeconds();HEAP32[tmPtr+4>>2]=date.getUTCMinutes();HEAP32[tmPtr+8>>2]=date.getUTCHours();HEAP32[tmPtr+12>>2]=date.getUTCDate();HEAP32[tmPtr+16>>2]=date.getUTCMonth();HEAP32[tmPtr+20>>2]=date.getUTCFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getUTCDay();HEAP32[tmPtr+36>>2]=0;HEAP32[tmPtr+32>>2]=0;var start=Date.UTC(date.getUTCFullYear(),0,1,0,0,0,0);var yday=(date.getTime()-start)/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;if(!_gmtime_r.GMTString)_gmtime_r.GMTString=allocateUTF8(\"GMT\");HEAP32[tmPtr+40>>2]=_gmtime_r.GMTString;return tmPtr}function _tzset(){if(_tzset.called)return;_tzset.called=true;var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAP32[__get_timezone()>>2]=stdTimezoneOffset*60;HEAP32[__get_daylight()>>2]=Number(winterOffset!=summerOffset);function extractZone(date){var match=date.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);return match?match[1]:\"GMT\"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocateUTF8(winterName);var summerNamePtr=allocateUTF8(summerName);if(summerOffset<winterOffset){HEAP32[__get_tzname()>>2]=winterNamePtr;HEAP32[__get_tzname()+4>>2]=summerNamePtr}else{HEAP32[__get_tzname()>>2]=summerNamePtr;HEAP32[__get_tzname()+4>>2]=winterNamePtr}}function _localtime_r(time,tmPtr){_tzset();var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst;var zonePtr=HEAP32[__get_tzname()+(dst?4:0)>>2];HEAP32[tmPtr+40>>2]=zonePtr;return tmPtr}function _mktime(tmPtr){_tzset();var date=new Date(HEAP32[tmPtr+20>>2]+1900,HEAP32[tmPtr+16>>2],HEAP32[tmPtr+12>>2],HEAP32[tmPtr+8>>2],HEAP32[tmPtr+4>>2],HEAP32[tmPtr>>2],0);var dst=HEAP32[tmPtr+32>>2];var guessedOffset=date.getTimezoneOffset();var start=new Date(date.getFullYear(),0,1);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dstOffset=Math.min(winterOffset,summerOffset);if(dst<0){HEAP32[tmPtr+32>>2]=Number(summerOffset!=winterOffset&&dstOffset==guessedOffset)}else if(dst>0!=(dstOffset==guessedOffset)){var nonDstOffset=Math.max(winterOffset,summerOffset);var trueOffset=dst>0?dstOffset:nonDstOffset;date.setTime(date.getTime()+(trueOffset-guessedOffset)*6e4)}HEAP32[tmPtr+24>>2]=date.getDay();var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();return date.getTime()/1e3|0}function _mlContextReference(id){WebNN.mgrContext.reference(id)}function _mlContextRelease(id){WebNN.mgrContext.release(id)}function _mlGraphBuilderAdd(builderId,aId,bId){var builder=WebNN.mgrGraphBuilder.get(builderId);var a=WebNN.mgrOperand.get(aId);var b=WebNN.mgrOperand.get(bId);var c=builder.add(a,b);return WebNN.mgrOperand.create(c)}function _mlGraphBuilderAveragePool2d(builderId,inputId,optionsPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var options=WebNN.makePool2dOptions(optionsPtr);var pool2d=builder.averagePool2d(input,options);return WebNN.mgrOperand.create(pool2d)}function _mlGraphBuilderBatchNorm(builderId,inputId,meanId,varianceId,optionsPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var mean=WebNN.mgrOperand.get(meanId);var variance=WebNN.mgrOperand.get(varianceId);var options=WebNN.makeBatchNormOptions(optionsPtr);var output=builder.batchNormalization(input,mean,variance,options);return WebNN.mgrOperand.create(output)}function _mlGraphBuilderBuildSync(builderId,namedOperandsId){var builder=WebNN.mgrGraphBuilder.get(builderId);var namedOperands=WebNN.mgrNamedOperands.get(namedOperandsId);try{var graph=builder.buildSync(namedOperands);return WebNN.mgrGraph.create(graph)}catch(error){console.log(\"builder.buildSync failed: \"+error);return 0}}function _mlGraphBuilderConcat(builderId,inputsCount,inputsPtr,axis){var builder=WebNN.mgrGraphBuilder.get(builderId);var inputIds=WebNN.makeI32Array(inputsCount,inputsPtr);var inputs=[];for(var i=0;i<inputIds.length;++i){inputs.push(WebNN.mgrOperand.get(inputIds[i]))}var output=builder.concat(inputs,axis);return WebNN.mgrOperand.create(output)}function _mlGraphBuilderConstant(builderId,descPtr,valuePtr,size){var builder=WebNN.mgrGraphBuilder.get(builderId);var desc=WebNN.makeOperandDescriptor(descPtr);var buffer=WebNN.makeArrayBufferView(valuePtr,size);var constant=builder.constant(desc,buffer);return WebNN.mgrOperand.create(constant)}function _mlGraphBuilderConv2d(builderId,inputId,filterId,optionsPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var filter=WebNN.mgrOperand.get(filterId);var options=WebNN.makeConv2dOptions(optionsPtr);var conv2d=builder.conv2d(input,filter,options);return WebNN.mgrOperand.create(conv2d)}function _mlGraphBuilderGemm(builderId,aId,bId,optionsPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var a=WebNN.mgrOperand.get(aId);var b=WebNN.mgrOperand.get(bId);var options=WebNN.makeGemmOptions(optionsPtr);var output=builder.gemm(a,b,options);return WebNN.mgrOperand.create(output)}function _mlGraphBuilderInput(builderId,namePtr,descPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var name=UTF8ToString(namePtr);var desc=WebNN.makeOperandDescriptor(descPtr);var input=builder.input(name,desc);return WebNN.mgrOperand.create(input)}function _mlGraphBuilderMatmul(builderId,aId,bId){var builder=WebNN.mgrGraphBuilder.get(builderId);var a=WebNN.mgrOperand.get(aId);var b=WebNN.mgrOperand.get(bId);var c=builder.matmul(a,b);return WebNN.mgrOperand.create(c)}function _mlGraphBuilderMaxPool2d(builderId,inputId,optionsPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var options=WebNN.makePool2dOptions(optionsPtr);var pool2d=builder.maxPool2d(input,options);return WebNN.mgrOperand.create(pool2d)}function _mlGraphBuilderRelease(id){WebNN.mgrGraphBuilder.release(id)}function _mlGraphBuilderRelu(builderId,inputId){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var output=builder.relu(input);return WebNN.mgrOperand.create(output)}function _mlGraphBuilderReshape(builderId,inputId,newShapePtr,newShapeCount){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var newShape=WebNN.makeI32Array(newShapeCount,newShapePtr);var output=builder.reshape(input,newShape);return WebNN.mgrOperand.create(output)}function _mlGraphComputeSync(graphId,inputsId,outputsId){var graph=WebNN.mgrGraph.get(graphId);var inputs=WebNN.mgrNamedInputs.get(inputsId);var outputs=WebNN.mgrNamedOutputs.get(outputsId);return graph.computeSync(inputs,outputs)}function _mlGraphReference(id){WebNN.mgrGraph.reference(id)}function _mlGraphRelease(id){WebNN.mgrGraph.release(id)}function _mlNamedInputsRelease(id){WebNN.mgrNamedInputs.release(id)}function _mlNamedInputsSet(namedInputsId,namePtr,inputPtr){var namedInputs=WebNN.mgrNamedInputs.get(namedInputsId);var name=UTF8ToString(namePtr);var input=WebNN.makeInput(inputPtr);namedInputs[name]=input}function _mlNamedOperandsRelease(id){WebNN.mgrNamedOperands.release(id)}function _mlNamedOperandsSet(namedOperandsId,namePtr,operandId){var namedOperands=WebNN.mgrNamedOperands.get(namedOperandsId);var name=UTF8ToString(namePtr);var operand=WebNN.mgrOperand.get(operandId);namedOperands[name]=operand}function _mlNamedOutputsRelease(id){WebNN.mgrNamedOutputs.release(id)}function _mlNamedOutputsSet(namedOutputsId,namePtr,outputPtr){var namedOutputs=WebNN.mgrNamedOutputs.get(namedOutputsId);var name=UTF8ToString(namePtr);var output=WebNN.makeOutput(outputPtr);namedOutputs[name]=output}function _mlOperandReference(id){WebNN.mgrOperand.reference(id)}function _mlOperandRelease(id){WebNN.mgrOperand.release(id)}function _pthread_create(){return 6}function _pthread_join(){return 28}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):\"\"};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_1[rule])}var WEEKDAYS=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];var MONTHS=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function leadingSomething(value,digits,character){var str=typeof value===\"number\"?value.toString():value||\"\";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,\"0\")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={\"%a\":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},\"%A\":function(date){return WEEKDAYS[date.tm_wday]},\"%b\":function(date){return MONTHS[date.tm_mon].substring(0,3)},\"%B\":function(date){return MONTHS[date.tm_mon]},\"%C\":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},\"%d\":function(date){return leadingNulls(date.tm_mday,2)},\"%e\":function(date){return leadingSomething(date.tm_mday,2,\" \")},\"%g\":function(date){return getWeekBasedYear(date).toString().substring(2)},\"%G\":function(date){return getWeekBasedYear(date)},\"%H\":function(date){return leadingNulls(date.tm_hour,2)},\"%I\":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},\"%j\":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},\"%m\":function(date){return leadingNulls(date.tm_mon+1,2)},\"%M\":function(date){return leadingNulls(date.tm_min,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return\"AM\"}else{return\"PM\"}},\"%S\":function(date){return leadingNulls(date.tm_sec,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(date){return date.tm_wday||7},\"%U\":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?\"01\":\"00\"},\"%V\":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return\"53\"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return\"01\"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},\"%w\":function(date){return date.tm_wday},\"%W\":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?\"01\":\"00\"},\"%y\":function(date){return(date.tm_year+1900).toString().substring(2)},\"%Y\":function(date){return date.tm_year+1900},\"%z\":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?\"+\":\"-\")+String(\"0000\"+off).slice(-4)},\"%Z\":function(date){return date.tm_zone},\"%%\":function(){return\"%\"}};for(var rule in EXPANSION_RULES_2){if(pattern.includes(rule)){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function _webnnCreateGraphBuilder(contextId){var context=WebNN.mgrContext.get(contextId);var builder=new MLGraphBuilder(context);return WebNN.mgrGraphBuilder.create(builder)}function _webnnCreateNamedInputs(){var inputs={};return WebNN.mgrNamedInputs.create(inputs)}function _webnnCreateNamedOperands(){var operands={};return WebNN.mgrNamedOperands.create(operands)}function _webnnCreateNamedOutputs(){var outputs={};return WebNN.mgrNamedOutputs.create(outputs)}WebNN.initManagers();function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var asmLibraryArg={\"a\":___cxa_allocate_exception,\"c\":___cxa_atexit,\"f\":___cxa_thread_atexit,\"b\":___cxa_throw,\"L\":___sys_access,\"m\":___sys_fcntl64,\"R\":___sys_fstat64,\"M\":___sys_getdents64,\"q\":___sys_getpid,\"D\":___sys_ioctl,\"N\":___sys_lstat64,\"Q\":___sys_mkdir,\"P\":___sys_mmap2,\"O\":___sys_munmap,\"l\":___sys_open,\"K\":___sys_readlink,\"I\":___sys_rmdir,\"s\":___sys_stat64,\"J\":___sys_unlink,\"j\":_abort,\"u\":_clock_gettime,\"z\":_difftime,\"va\":_dlclose,\"i\":_dlerror,\"wa\":_dlopen,\"ua\":_dlsym,\"S\":_emscripten_get_heap_max,\"C\":_emscripten_memcpy_big,\"k\":_emscripten_resize_heap,\"H\":_emscripten_thread_sleep,\"sa\":_emscripten_webnn_create_context,\"F\":_environ_get,\"G\":_environ_sizes_get,\"h\":_fd_close,\"E\":_fd_fdstat_get,\"o\":_fd_read,\"B\":_fd_seek,\"p\":_fd_write,\"aa\":_gettimeofday,\"A\":_gmtime_r,\"n\":_localtime_r,\"y\":_mktime,\"x\":_mlContextReference,\"w\":_mlContextRelease,\"pa\":_mlGraphBuilderAdd,\"oa\":_mlGraphBuilderAveragePool2d,\"na\":_mlGraphBuilderBatchNorm,\"ma\":_mlGraphBuilderBuildSync,\"la\":_mlGraphBuilderConcat,\"ka\":_mlGraphBuilderConstant,\"ja\":_mlGraphBuilderConv2d,\"ia\":_mlGraphBuilderGemm,\"ha\":_mlGraphBuilderInput,\"ga\":_mlGraphBuilderMatmul,\"fa\":_mlGraphBuilderMaxPool2d,\"t\":_mlGraphBuilderRelease,\"ea\":_mlGraphBuilderRelu,\"da\":_mlGraphBuilderReshape,\"ra\":_mlGraphComputeSync,\"qa\":_mlGraphReference,\"v\":_mlGraphRelease,\"ba\":_mlNamedInputsRelease,\"ca\":_mlNamedInputsSet,\"_\":_mlNamedOperandsRelease,\"$\":_mlNamedOperandsSet,\"Y\":_mlNamedOutputsRelease,\"Z\":_mlNamedOutputsSet,\"e\":_mlOperandReference,\"d\":_mlOperandRelease,\"T\":_pthread_create,\"r\":_pthread_join,\"ta\":_strftime,\"g\":_strftime_l,\"X\":_webnnCreateGraphBuilder,\"W\":_webnnCreateNamedInputs,\"V\":_webnnCreateNamedOperands,\"U\":_webnnCreateNamedOutputs};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"ya\"]).apply(null,arguments)};var _OrtInit=Module[\"_OrtInit\"]=function(){return(_OrtInit=Module[\"_OrtInit\"]=Module[\"asm\"][\"za\"]).apply(null,arguments)};var _OrtCreateSessionOptions=Module[\"_OrtCreateSessionOptions\"]=function(){return(_OrtCreateSessionOptions=Module[\"_OrtCreateSessionOptions\"]=Module[\"asm\"][\"Aa\"]).apply(null,arguments)};var _OrtSessionOptionsAppendExecutionProviderWebNN=Module[\"_OrtSessionOptionsAppendExecutionProviderWebNN\"]=function(){return(_OrtSessionOptionsAppendExecutionProviderWebNN=Module[\"_OrtSessionOptionsAppendExecutionProviderWebNN\"]=Module[\"asm\"][\"Ba\"]).apply(null,arguments)};var _OrtAddSessionConfigEntry=Module[\"_OrtAddSessionConfigEntry\"]=function(){return(_OrtAddSessionConfigEntry=Module[\"_OrtAddSessionConfigEntry\"]=Module[\"asm\"][\"Ca\"]).apply(null,arguments)};var _OrtReleaseSessionOptions=Module[\"_OrtReleaseSessionOptions\"]=function(){return(_OrtReleaseSessionOptions=Module[\"_OrtReleaseSessionOptions\"]=Module[\"asm\"][\"Da\"]).apply(null,arguments)};var _OrtCreateSession=Module[\"_OrtCreateSession\"]=function(){return(_OrtCreateSession=Module[\"_OrtCreateSession\"]=Module[\"asm\"][\"Ea\"]).apply(null,arguments)};var _OrtReleaseSession=Module[\"_OrtReleaseSession\"]=function(){return(_OrtReleaseSession=Module[\"_OrtReleaseSession\"]=Module[\"asm\"][\"Fa\"]).apply(null,arguments)};var _OrtGetInputCount=Module[\"_OrtGetInputCount\"]=function(){return(_OrtGetInputCount=Module[\"_OrtGetInputCount\"]=Module[\"asm\"][\"Ga\"]).apply(null,arguments)};var _OrtGetOutputCount=Module[\"_OrtGetOutputCount\"]=function(){return(_OrtGetOutputCount=Module[\"_OrtGetOutputCount\"]=Module[\"asm\"][\"Ha\"]).apply(null,arguments)};var _OrtGetInputName=Module[\"_OrtGetInputName\"]=function(){return(_OrtGetInputName=Module[\"_OrtGetInputName\"]=Module[\"asm\"][\"Ia\"]).apply(null,arguments)};var _OrtGetOutputName=Module[\"_OrtGetOutputName\"]=function(){return(_OrtGetOutputName=Module[\"_OrtGetOutputName\"]=Module[\"asm\"][\"Ja\"]).apply(null,arguments)};var _OrtFree=Module[\"_OrtFree\"]=function(){return(_OrtFree=Module[\"_OrtFree\"]=Module[\"asm\"][\"Ka\"]).apply(null,arguments)};var _OrtCreateTensor=Module[\"_OrtCreateTensor\"]=function(){return(_OrtCreateTensor=Module[\"_OrtCreateTensor\"]=Module[\"asm\"][\"La\"]).apply(null,arguments)};var _OrtGetTensorData=Module[\"_OrtGetTensorData\"]=function(){return(_OrtGetTensorData=Module[\"_OrtGetTensorData\"]=Module[\"asm\"][\"Ma\"]).apply(null,arguments)};var _OrtReleaseTensor=Module[\"_OrtReleaseTensor\"]=function(){return(_OrtReleaseTensor=Module[\"_OrtReleaseTensor\"]=Module[\"asm\"][\"Na\"]).apply(null,arguments)};var _OrtCreateRunOptions=Module[\"_OrtCreateRunOptions\"]=function(){return(_OrtCreateRunOptions=Module[\"_OrtCreateRunOptions\"]=Module[\"asm\"][\"Oa\"]).apply(null,arguments)};var _OrtAddRunConfigEntry=Module[\"_OrtAddRunConfigEntry\"]=function(){return(_OrtAddRunConfigEntry=Module[\"_OrtAddRunConfigEntry\"]=Module[\"asm\"][\"Pa\"]).apply(null,arguments)};var _OrtReleaseRunOptions=Module[\"_OrtReleaseRunOptions\"]=function(){return(_OrtReleaseRunOptions=Module[\"_OrtReleaseRunOptions\"]=Module[\"asm\"][\"Qa\"]).apply(null,arguments)};var _OrtRun=Module[\"_OrtRun\"]=function(){return(_OrtRun=Module[\"_OrtRun\"]=Module[\"asm\"][\"Ra\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"Sa\"]).apply(null,arguments)};var ___errno_location=Module[\"___errno_location\"]=function(){return(___errno_location=Module[\"___errno_location\"]=Module[\"asm\"][\"Ta\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"Ua\"]).apply(null,arguments)};var _memset=Module[\"_memset\"]=function(){return(_memset=Module[\"_memset\"]=Module[\"asm\"][\"Va\"]).apply(null,arguments)};var __get_tzname=Module[\"__get_tzname\"]=function(){return(__get_tzname=Module[\"__get_tzname\"]=Module[\"asm\"][\"Wa\"]).apply(null,arguments)};var __get_daylight=Module[\"__get_daylight\"]=function(){return(__get_daylight=Module[\"__get_daylight\"]=Module[\"asm\"][\"Xa\"]).apply(null,arguments)};var __get_timezone=Module[\"__get_timezone\"]=function(){return(__get_timezone=Module[\"__get_timezone\"]=Module[\"asm\"][\"Ya\"]).apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){return(stackSave=Module[\"stackSave\"]=Module[\"asm\"][\"Za\"]).apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){return(stackRestore=Module[\"stackRestore\"]=Module[\"asm\"][\"_a\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"$a\"]).apply(null,arguments)};var _memalign=Module[\"_memalign\"]=function(){return(_memalign=Module[\"_memalign\"]=Module[\"asm\"][\"ab\"]).apply(null,arguments)};Module[\"UTF8ToString\"]=UTF8ToString;Module[\"stringToUTF8\"]=stringToUTF8;Module[\"lengthBytesUTF8\"]=lengthBytesUTF8;Module[\"stackSave\"]=stackSave;Module[\"stackRestore\"]=stackRestore;Module[\"stackAlloc\"]=stackAlloc;var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\n\n\n  return ortWasm.ready\n}\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\nimport {promisify} from 'util';\n\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\nimport {initializeWebAssembly} from './wasm/wasm-factory';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssembly();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    let buffer: Uint8Array;\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        buffer = await promisify(readFile)(pathOrBuffer);\n      } else {\n        // browser\n        const response = await fetch(pathOrBuffer);\n        const arrayBuffer = await response.arrayBuffer();\n        buffer = new Uint8Array(arrayBuffer);\n      }\n    } else {\n      buffer = pathOrBuffer;\n    }\n\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    handler.loadModel(buffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\nimport {onnxjsBackend} from './backend-onnxjs';\nimport {wasmBackend} from './backend-wasm';\n\nregisterBackend('webgl', onnxjsBackend, 1);\nregisterBackend('wasm', wasmBackend, 2);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\n\nimport {Tensor} from './tensor';\nimport {LongUtil} from './util';\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString();\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(\n            utf8String => Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString());\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName} from './utils';\nimport {generateShaderFuncNameFromInputSamplerNameAtOutCoords,} from './utils';\nimport {getCoordsDataType, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.programInfo.outputLayout;\n    this.context.programInfo.samplers.forEach((samplerName, i) => {\n      const inputLayout = this.context.programInfo.inputLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xx, outputValue.yy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.programInfo.outputLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const layout = programInfo.inputLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(public glContext: WebGLContext, public programInfo: ProgramInfo) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(glContext: WebGLContext, programInfo: ProgramInfo) {\n    this.context = new GlslContext(glContext, programInfo);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, programInfo.outputLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.samplers, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const outputRank = programInfo.outputLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const outputRank = programInfo.outputLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      const strides = programInfo.inputLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      const strides = programInfo.inputLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {WebGLPack} from './ops/pack';\n\nimport {WebGLUint8Encode} from './ops/uint8-encode';\nimport {WebGLUnpack} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {WidthHeightPrefs} from './texture-layout-strategy';\nimport {Artifact, RunData, TextureData, TextureLayout, WebGLOperator} from './types';\nimport {getPackedShape} from './utils';\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  private unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  run(op: WebGLOperator, inputs: Tensor[]): Tensor[] {\n    let artifact = this.session.programManager.getArtifact(op);\n    if (!artifact) {\n      const programInfo = op.createProgramInfo(this, inputs);\n      if (!programInfo.name) {\n        programInfo.name = op.constructor?.name;\n      }\n      artifact = this.session.programManager.build(programInfo);\n      this.session.programManager.setArtifact(op, artifact);\n    }\n    const runData = op.createRunData(this, artifact.programInfo, inputs);\n    this.runProgram(artifact, runData);\n    return [runData.outputTextureData.tensor];\n  }\n\n  checkAndUpdateTextureForm(artifact: Artifact, runData: RunData) {\n    // pack/unpack inputs\n    for (let i = 0; i < runData.inputTextureDatas.length; ++i) {\n      const input = runData.inputTextureDatas[i];\n      if (input.isPacked && !artifact.programInfo.expectPackedInputs) {\n        runData.inputTextureDatas[i] = this.unpack(input);\n      } else if (!input.isPacked && artifact.programInfo.expectPackedInputs) {\n        runData.inputTextureDatas[i] = this.pack(input);\n      }\n    }\n  }\n  runProgram(artifact: Artifact, runData: RunData) {\n    this.checkAndUpdateTextureForm(artifact, runData);\n\n    // output should match\n    if (!!runData.outputTextureData.isPacked !== !!artifact.programInfo.expectPackedOutputs) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, runData);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  getOrCreateTextureData(tensor: Tensor, layout?: TextureLayout, isPacked = false) {\n    let td = this.getTextureData(tensor.dataId, isPacked);\n    if (!td) {\n      Logger.verbose('InferenceHandler', `Creating new TextureData for dims: [${tensor.dims}]`);\n      if (!layout) {\n        layout = this.createTextureLayoutFromShape(tensor.dims.slice());\n      }\n      // if we don't find the texture data with specific pack mode in the cache, try with the different\n      // pack mode to see if the tensor is cached using that pack mode. If succeed, we can return this\n      // tensor data and later apply a pack/unpack op on this texture, no need to create a new one here.\n      td = this.getTextureData(tensor.dataId, !isPacked);\n      if (!td) {\n        if (isPacked) {\n          const unpackedTextureLayout = this.getOrCreateTextureLayout(tensor, 1, false, [], true);\n          const unpackedTextureData = this.createTextureData(\n              unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n          td = this.pack(unpackedTextureData);\n        } else {\n          td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n    } else {\n      Logger.verbose('InferenceHandler', `Retrieving TextureData from cache: [${tensor.dims}]`);\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object from the given data type and texture layout.\n   * Usage = Encoder.Usage.Default.\n   * @param dataType the tensor data type\n   */\n  createTextureDataFromLayout(layout: TextureLayout, dataType: Tensor.DataType): TextureData {\n    return this.createTextureData(layout, dataType);\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  /**\n   * Create a TextureData object, using the given texture.\n   * This function does not create new texture. Usually used in scenarios using texture sharing. (eg. Reshape)\n   * @param dataType the tensor data type\n   * @param texture the WebGLTexture object to share\n   * @param tensorId the tensor ID of the shared tensor data\n   */\n  createSharedTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensorId?: Tensor.Id): TextureData {\n    return this.createTextureDataFromTexture(layout, dataType, texture, undefined, tensorId);\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData), undefined,\n                  undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ?\n        this.session.getTextureData(tensorId, isPacked) :\n        isPacked ? this.packedTextureDataCache.get(tensorId) : this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n  /**\n   * Create a TextureLayout object from a tensor. If a related texture data is found, returns the cached texture layout.\n   */\n  getOrCreateTextureLayout(\n      tensor: Tensor, channels: 1|4 = 1, isPacked = false, unpackedShape?: readonly number[],\n      reverseWH = false): TextureLayout {\n    const td = this.getTextureData(tensor.dataId, isPacked);\n    if (td) {\n      return td;\n    }\n    return this.createTextureLayoutFromShape(\n        channels === 1 || isPacked ? tensor.dims : getPackedShape(tensor.dims), channels, unpackedShape,\n        isPacked || reverseWH ? {isPacked, reverseWH} : undefined);\n  }\n\n  /**\n   * Create a TextureLayout object from shape.\n   */\n  createTextureLayoutFromShape(\n      shape: readonly number[], channels: 1|4 = 1, unpackedShape?: readonly number[],\n      prefs?: WidthHeightPrefs): TextureLayout {\n    const isPacked = !!(prefs && prefs.isPacked);\n    const [texWidth, texHeight] =\n        this.session.layoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n    let [width, height] = [texWidth, texHeight];\n    if (prefs && prefs.reverseWH) {\n      width = texHeight;\n      height = texWidth;\n    }\n    const rank = shape.length;\n    let inferredDims = shape.slice(0);\n    if (rank === 0) {\n      inferredDims = [1];\n    }\n    if (channels === 1) {\n      // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n      unpackedShape = shape;\n    } else if (isPacked) {\n      if (channels !== 4) {\n        throw new Error('a packed texture must be 4-channel');\n      }\n      unpackedShape = shape;\n      if (rank > 0) {\n        inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n      }\n      if (rank > 1) {\n        inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n      }\n    } else if (!unpackedShape) {\n      throw new Error('Unpacked shape is needed when using channels > 1');\n    }\n    return {\n      width,\n      height,\n      channels,\n      isPacked,\n      shape: inferredDims,\n      strides: ShapeUtil.computeStrides(inferredDims),\n      unpackedShape,\n      reversedWH: (prefs && prefs.reverseWH)\n    };\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      const op = new WebGLUint8Encode();\n      const uint8TD = op.runInternal(this, textureData);\n      return this.session.textureManager.readUint8TextureAsFloat(uint8TD);\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const cachedId = this.unpack2packMap.get(input.tensor.dataId);\n    if (cachedId) {\n      return this.packedTextureDataCache.get(cachedId)!;\n    }\n    const key = `${input.shape}`;\n    let op = this.session.packOpCache.get(key);\n    if (!op) {\n      op = new WebGLPack();\n      this.session.packOpCache.set(key, op);\n    }\n    let artifact = this.session.programManager.getArtifact(op);\n    if (!artifact) {\n      const programInfo = op.createProgramInfo(this, [input.tensor]);\n      artifact = this.session.programManager.build(programInfo);\n      this.session.programManager.setArtifact(op, artifact);\n    }\n    const runData = op.createRunData(this, artifact.programInfo, [input.tensor]);\n    this.runProgram(artifact, runData);\n    this.unpack2packMap.set(input.tensor.dataId, runData.outputTextureData.tensor.dataId);\n    return runData.outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const cachedId = this.pack2unpackMap.get(input.tensor.dataId);\n    if (cachedId) {\n      return this.unpackedTextureDataCache.get(cachedId)!;\n    }\n    // For unpacked kernel, cache it by using input's unpackedShape as cache key.\n    // Note that we need to use input.unpackedShape instead of input.shape here,\n    // as the shape infers the packed texture shape. Different unpackedShape can have the\n    // same packed texture shape. For example, for unpacked shape, both [2, 3] and\n    // [2, 4] has the same packed shape [1, 2], but those two shapes should have different\n    // unpack shaders.\n    const key = `${input.unpackedShape}`;\n    let op = this.session.unpackOpCache.get(key);\n    if (!op) {\n      op = new WebGLUnpack();\n      this.session.unpackOpCache.set(key, op);\n    }\n    let artifact = this.session.programManager.getArtifact(op);\n    if (!artifact) {\n      const programInfo = op.createProgramInfo(this, [input.tensor]);\n      artifact = this.session.programManager.build(programInfo);\n      this.session.programManager.setArtifact(op, artifact);\n    }\n    const runData = op.createRunData(this, artifact.programInfo, [input.tensor]);\n    this.runProgram(artifact, runData);\n    this.pack2unpackMap.set(input.tensor.dataId, runData.outputTextureData.tensor.dataId);\n    return runData.outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\nimport {OpSet} from '../../opset';\n\nimport {WebGLBatchNormalization} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {WebGLClip} from './ops/clip';\nimport {WebGLConcat} from './ops/concat';\nimport {WebGLConv} from './ops/conv';\nimport {WebGLDepthToSpace} from './ops/depth-to-space';\nimport {WebGLDropout} from './ops/dropout';\nimport {WebGLElu} from './ops/elu';\nimport {WebGLFlatten} from './ops/flatten';\nimport {WebGLGather} from './ops/gather';\nimport {WebGLGemm} from './ops/gemm';\nimport {WebGLImageScaler} from './ops/image-scaler';\nimport {WebGLInstanceNormalization} from './ops/instance-normalization';\nimport {WebGLLeakyRelu} from './ops/leaky-relu';\nimport {WebGLMatMul} from './ops/matmul';\nimport {WebGLPad} from './ops/pad';\nimport {WebGLAveragePool, WebGLGlobalAveragePool, WebGLGlobalMaxPool, WebGLMaxPool} from './ops/pool';\nimport * as reduceOps from './ops/reduce';\nimport {WebGLReshape} from './ops/reshape';\nimport {WebGLResizePacked} from './ops/resize-packed';\nimport {WebGLShape} from './ops/shape';\nimport {WebGLSlice, WebGLSliceV10} from './ops/slice';\nimport {WebGLSoftmax} from './ops/softmax';\nimport {WebGLSplit} from './ops/split';\nimport {WebGLSqueeze} from './ops/squeeze';\nimport {WebGLSum} from './ops/sum';\nimport {WebGLTile} from './ops/tile';\nimport {WebGLTranspose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {WebGLUnsqueeze} from './ops/unsqueeze';\nimport {WebGLUpsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslAbs())],\n  ['Acos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAcos())],\n  ['Add', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslAdd())],\n  ['And', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslAnd())],\n  ['Asin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAsin())],\n  ['Atan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAtan())],\n  ['AveragePool', '', '7-10', () => new WebGLAveragePool()],  // TODO: support new attributes for AveragePool-10\n  ['BatchNormalization', '', '7+', () => new WebGLBatchNormalization()],\n  ['Ceil', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCeil())],\n  ['Clip', '', '6-10', () => new WebGLClip()],\n  ['Concat', '', '4+', () => new WebGLConcat()],\n  ['Conv', '', '1+', () => new WebGLConv()],\n  ['Cos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCos())],\n  ['Div', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslDiv())],\n  ['Dropout', '', '7+', () => new WebGLDropout()],\n  ['DepthToSpace', '', '1+', () => new WebGLDepthToSpace()],\n  ['Equal', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslEqual(), undefined, 'bool')],\n  ['Elu', '', '6+', () => new WebGLElu()],\n  ['Exp', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslExp())],\n  ['Flatten', '', '1+', () => new WebGLFlatten()],\n  ['Floor', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslFloor())],\n  ['Gather', '', '1+', () => new WebGLGather()],\n  ['Gemm', '', '7-10', () => new WebGLGemm(false)],\n  ['Gemm', '', '11+', () => new WebGLGemm(true)],\n  ['GlobalAveragePool', '', '1+', () => new WebGLGlobalAveragePool()],\n  ['GlobalMaxPool', '', '1+', () => new WebGLGlobalMaxPool()],\n  ['Greater', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslGreater(), undefined, 'bool')],\n  ['Identity', '', '1+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslIdentity())],\n  ['ImageScaler', '', '1+', () => new WebGLImageScaler()],\n  ['InstanceNormalization', '', '6+', () => new WebGLInstanceNormalization()],\n  ['LeakyRelu', '', '6+', () => new WebGLLeakyRelu()],\n  ['Less', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslLess(), undefined, 'bool')],\n  ['Log', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslLog())],\n  ['MatMul', '', '1+', () => new WebGLMatMul()],\n  ['MaxPool', '', '1-9', () => new WebGLMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['Mul', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslMul())],\n  ['Neg', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslNeg())],\n  ['Not', '', '1+', () => new unaryOps.WebGLUnaryOp(['bool'], unaryOps.glslNot())],\n  ['Or', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslOr())],\n  ['Pad', '', '2-10', () => new WebGLPad()],\n  ['Pow', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPow())],\n  ['PRelu', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPRelu())],\n  ['ReduceLogSum', '', '1+', () => new reduceOps.WebGLReduceLogSum()],\n  ['ReduceMax', '', '1+', () => new reduceOps.WebGLReduceMax()],\n  ['ReduceMean', '', '1+', () => new reduceOps.WebGLReduceMean()],\n  ['ReduceMin', '', '1+', () => new reduceOps.WebGLReduceMin()],\n  ['ReduceProd', '', '1+', () => new reduceOps.WebGLReduceProd()],\n  ['ReduceSum', '', '1+', () => new reduceOps.WebGLReduceSum()],\n  ['ReduceSumSquare', '', '1+', () => new reduceOps.WebGLReduceSumSquare()],\n  ['Relu', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslRelu())],\n  ['Reshape', '', '5+', () => new WebGLReshape()],\n  ['Resize', '', '10', () => new WebGLResizePacked(10)],\n  ['Resize', '', '11+', () => new WebGLResizePacked(11)],\n  ['Shape', '', '1+', () => new WebGLShape()],\n  ['Sigmoid', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSigmoid())],\n  ['Sin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSin())],\n  ['Slice', '', '10+', () => new WebGLSliceV10()],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', () => new WebGLSlice()],\n  ['Softmax', '', '1+', () => new WebGLSoftmax()],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data\n  // is split. When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2+', (node) => new WebGLSplit(node.outputs.length)],\n  ['Sqrt', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSqrt())],\n  ['Squeeze', '', '1+', () => new WebGLSqueeze()],\n  ['Sub', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslSub())],\n  ['Sum', '', '6+', () => new WebGLSum()],  // TODO: support multidirectional broadcast for Sum-8\n  ['Tan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTan())],\n  ['Tanh', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTanh())],\n  ['Tile', '', '6+', () => new WebGLTile()],\n  ['Transpose', '', '1+', () => new WebGLTranspose()],\n  ['Upsample', '', '7-8', () => new WebGLUpsample(7)],\n  ['Upsample', '', '9', () => new WebGLUpsample(9)],\n  ['Unsqueeze', '', '1+', () => new WebGLUnsqueeze()],\n  ['Xor', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslXor())],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {BatchNormalization} from '../../../ops/batch-normalization';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData} from '../types';\n\nexport class WebGLBatchNormalization extends BatchNormalization {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\n    const outputShape = inputs[0].dims.slice();\n    const rank = outputShape.length;\n    const scale = inputLayouts[1];\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      float process(int[${rank}] indices) {\n        vec2 position = offsetToCoords(indices[1], ${scale.width}, ${scale.height});\n        float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n        float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n        float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n        float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n        return scale * ( (_A(indices) - mean) / sqrt(variance + float(${this.epsilon})) ) + b;\n      }`;\n    return {\n      inputLayouts,\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n      shaderSource\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    inputs.slice(1).forEach(t => inputTDs.push(handler.getOrCreateTextureData(t)));\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type);\n    return {inputTextureDatas: inputTDs, outputTextureData: outputTD, uniformData: {}};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {BinaryOp} from '../../../ops/binary-op';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLBinaryOp extends BinaryOp implements WebGLOperator {\n  private usePackedTexture?: boolean;\n\n  constructor(\n      typeConstraint: readonly Tensor.DataType[], protected glslFunc: GlslValueFunction, opType?: string,\n      resultType?: Tensor.DataType) {\n    super(typeConstraint, opType, resultType);\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n    // TODO fix bcast in packed mode.\n    if (this.usePackedTexture === undefined) {\n      this.usePackedTexture = !isBroadcast && handler.session.pack;\n    }\n\n    const inputLayouts = this.usePackedTexture ?\n        inputs.map(t => handler.getOrCreateTextureLayout(t, 4, true, t.dims, true)) :\n        inputs.map(t => handler.getOrCreateTextureLayout(t));\n    const ouputLayout = this.usePackedTexture ?\n        handler.createTextureLayoutFromShape(inputs[0].dims, 4, inputs[0].dims, {isPacked: true, reverseWH: true}) :\n        handler.createTextureLayoutFromShape(inputs[0].dims);\n\n    if (isBroadcast) {\n      const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n      if (!outputShape) {\n        throw new Error('Can\\'t perform binary op on the given tensors');\n      }\n      const outputRank = outputShape.length;\n      const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n      const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n      const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n      const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n      // TODO: for packed tensors, we need to implement logic to caculate textCoords for broadcast tensor\n      const shaderSource = `\n      ${this.glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${this.glslFunc.name}(_A(aindices), _B(bindices));\n    }`;\n      const outputLayout = this.usePackedTexture ?\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}) :\n          handler.createTextureLayoutFromShape(outputShape);\n\n      return {\n        inputLayouts,\n        outputLayout,\n        samplers: ['A', 'B'],\n        shaderSource,\n        expectPackedInputs: this.usePackedTexture,\n        expectPackedOutputs: this.usePackedTexture\n      };\n    }\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n    ${this.glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${this.glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n    if (this.usePackedTexture) {\n      return {\n        hasMain: true,\n        inputLayouts,\n        outputLayout: ouputLayout,\n        samplers: ['A', 'B'],\n        shaderSource,\n        expectPackedInputs: true,\n        expectPackedOutputs: true\n      };\n    } else {\n      return {\n        hasMain: true,\n        inputLayouts,\n        outputLayout: handler.createTextureLayoutFromShape(inputs[0].dims),\n        samplers: ['A', 'B'],\n        shaderSource,\n      };\n    }\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = this.usePackedTexture ?\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true))) :\n        inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(\n          programInfo.outputLayout, this.resultType ? this.resultType : inputs[0].type),\n      uniformData: {}\n    };\n  }\n}\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Clip} from '../../../ops/clip';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLClip extends Clip implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      const float min = float(${this.min});\n      const float max = float(${this.max});\n      void main() {\n        float v = ${glsl.texture2D}(A, TexCoords).r;\n        ${glsl.output} = vec4(clamp(v, min, max));\n      }\n      `;\n    return {\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Concat} from '../../../ops/concat';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nexport class WebGLPackedConcat extends Concat implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\n      throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n    }\n    if (this.axis < 0) {\n      this.axis = inputShape.length + this.axis;\n    }\n    // ensure all of the non-concatenated axes match each other\n    // calculate the shape of the output tensor while we do that\n    const outputShape = inputShape.slice(0);\n    for (let i = 1; i < inputs.length; i++) {\n      const dataNShape = inputs[i].dims.slice();\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n        // add to the placeholder for computing output shape\n        if (axisIndex === this.axis) {\n          outputShape[this.axis] += dataNShape[axisIndex];\n        }\n        // ensure all non-cancatenated axes match each other\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n          throw new Error('non concat dimensions must match');\n        }\n      }\n    }\n\n    const rank = outputShape.length;\n    const coords = getChannels('coords', rank);\n    const dtype = getCoordsDataType(rank);\n    const unpackChannel = unpackFromChannel();\n\n    const shapes = inputs.map(i => i.dims);\n    const allGlChannels = ['x', 'y', 'z', 'w', 'u', 'v'];\n    const channels = allGlChannels.slice(0, rank);\n    const offsets: number[] = new Array(shapes.length - 1);\n    const samplers = inputs.map((v, i) => `X${i}`);\n\n    offsets[0] = shapes[0][this.axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][this.axis];\n    }\n\n    const channel = channels[this.axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n      return getChannel(\n          getX0(${allChannels}), vec2(${lastChannels.join()}));\n      }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      getValueSnippet += `\n          if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n            return getChannel(\n              getX${i}(${this.getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${this.getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n          }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n          return getChannel(\n            getX${lastIndex}(${this.getShiftedChannelsSnippet(channels, channel, shift)}),\n            vec2(${this.getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n\n    const shaderSource = `\n        ${unpackChannel}\n        float getValue(${channels.map(x => 'int ' + x)}) {\n          ${getValueSnippet}\n        }\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          int lastDim = coords.${allGlChannels[rank - 1]};\n          coords.${allGlChannels[rank - 1]} = coords.${allGlChannels[rank - 2]};\n          coords.${allGlChannels[rank - 2]} = lastDim;\n\n          vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n          ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n          if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n            result.g = getValue(${coords});\n          }\n\n          ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n          if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n            result.a = getValue(${coords});\n          }\n\n          ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n          if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n              ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n            result.b = getValue(${coords});\n          }\n          ${glsl.output} = result;\n        }\n      `;\n\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t, 4, true, t.dims, true)),\n      outputLayout:\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}),\n      samplers,\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: true,\n      expectPackedOutputs: true\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i], true));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n\n  /**\n   * Generates the snippet to shift a given channel in a list of channels by shift\n   *\n   * i.e: returns a string of the form 'x, y-[shift], z' where any one channel can\n   * have the shift applied.\n   */\n  protected getShiftedChannelsSnippet(channels: string[], channel: string, shift: number) {\n    const channelIdx = channels.indexOf(channel);\n    const res = channels.map((c, idx) => {\n      if (idx === channelIdx) {\n        return `${c} - ${shift}`;\n      } else {\n        return c;\n      }\n    });\n    return res.join();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {Concat} from '../../../ops/concat';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nimport {WebGLPackedConcat} from './concat-packed';\n\n// We provide a wrapper class so that the kernel can switch between packed and unpacked depending on the inputs on the\n// fly.\nexport class WebGLConcat extends Concat implements WebGLOperator {\n  unpackedImpl: WebGLUnpackedConcat;\n  packedImpl: WebGLPackedConcat;\n  constructor() {\n    super();\n    this.unpackedImpl = new WebGLUnpackedConcat();\n    this.packedImpl = new WebGLPackedConcat();\n  }\n\n  // No need to call super since this class only serves as a wrapper.\n  initialize(attributes: Attribute): void {\n    this.unpackedImpl.initialize(attributes);\n    this.packedImpl.initialize(attributes);\n  }\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n      return inferenceHandler.run(this.packedImpl, inputs);\n    } else {\n      return inferenceHandler.run(this.unpackedImpl, inputs);\n    }\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (handler.session.pack && inputs[0].dims.length > 1) {\n      return this.packedImpl.createProgramInfo(handler, inputs);\n    } else {\n      return this.unpackedImpl.createProgramInfo(handler, inputs);\n    }\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    if (handler.session.pack && inputs[0].dims.length > 1) {\n      return this.packedImpl.createRunData(handler, programInfo, inputs);\n    } else {\n      return this.unpackedImpl.createRunData(handler, programInfo, inputs);\n    }\n  }\n}\nexport class WebGLUnpackedConcat extends Concat implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\n      throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n    }\n    if (this.axis < 0) {\n      this.axis = inputShape.length + this.axis;\n    }\n    // ensure all of the non-concatenated axes match each other\n    // calculate the shape of the output tensor while we do that\n    const outputShape = inputShape.slice(0);\n    for (let i = 1; i < inputs.length; i++) {\n      const dataNShape = inputs[i].dims.slice();\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n        // add to the placeholder for computing output shape\n        if (axisIndex === this.axis) {\n          outputShape[this.axis] += dataNShape[axisIndex];\n        }\n        // ensure all non-cancatenated axes match each other\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n          throw new Error('non concat dimensions must match');\n        }\n      }\n    }\n\n    const rank = outputShape.length;\n\n    let getTextureIndexWhereDataResidesMethod = '';\n    // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n    if (inputs.length < 5) {\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesLinearSearch(inputs.length);\n    } else {\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesBinarySearch(inputs.length);\n    }\n\n    const fetchDataFromCorrectTextureMethod = this.fetchDataFromCorrectTextureMethod(inputs.length, rank);\n    const getValueFromArrayIndexMethod = this.getValueFromArrayIndexMethod(inputs.length);\n    const samplers = inputs.map((v, i) => `X${i}`);\n    const shaderSource = `\n      ${fetchDataFromCorrectTextureMethod}\n      ${getValueFromArrayIndexMethod}\n      ${getTextureIndexWhereDataResidesMethod}\n      float process(int indices[${rank}]) {\n        int textureIndex = getTextureWhereDataResides (indices[${this.axis}]);\n\n        if(textureIndex != 0) {\n          indices[${this.axis}] = indices[${\n        this.axis}] - int(getValueFromArrayIndex(sizeInConcatAxis, textureIndex-int(1)));\n        }\n\n        return fetchDataFromCorrectTexture(textureIndex, indices);\n      }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers,\n      variables: [{name: 'sizeInConcatAxis', type: 'int', arrayLength: inputs.length}],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    const sizeInConcatAxis = new Array<number>(programInfo.inputLayouts.length);\n    let previousSum = 0;\n    for (let i = 0; i < programInfo.inputLayouts.length; ++i) {\n      previousSum += programInfo.inputLayouts[i].shape[this.axis];\n      sizeInConcatAxis[i] = previousSum;\n    }\n    const uniformData = {sizeInConcatAxis};\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData\n    };\n  }\n  private getTextureIndexWhereDataResidesLinearSearch(numberOfTensors: number): string {\n    return `int getTextureWhereDataResides(int index) {\n      for(int i=0; i<${numberOfTensors}; i++) {\n          if(index < int(sizeInConcatAxis[i])){\n              return i;\n          }\n        }\n      }`;\n  }\n\n  // TODO: Implement BinarySearch in GLSL\n  private getTextureIndexWhereDataResidesBinarySearch(numberOfTensors: number): string {\n    return this.getTextureIndexWhereDataResidesLinearSearch(numberOfTensors);\n  }\n\n  private fetchDataFromCorrectTextureMethod(numberOfTensors: number, tensorRank: number) {\n    const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n    for (let i = 0; i < numberOfTensors; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            '\\t' +\n            `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n      } else if (i === numberOfTensors - 1) {\n        codeLines.push(\n            '\\t' +\n            `else { return _X${i}(indices); }`);\n      } else {\n        codeLines.push(\n            '\\t' +\n            `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n      }\n    }\n    codeLines.push(\n        '\\t' +\n        '}');\n    return codeLines.join('\\n');\n  }\n\n  private getValueFromArrayIndexMethod(arrayRank: number): string {\n    const codeLines: string[] = [`int getValueFromArrayIndex(int arr[${arrayRank}], int index) {`];\n    for (let i = 0; i < arrayRank; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            '\\t' +\n            `if (index == ${i}) { return arr[${i}]; }`);\n      } else if (i === arrayRank - 1) {\n        codeLines.push(\n            '\\t' +\n            `else { return arr[${i}]; }`);\n      } else {\n        codeLines.push(\n            '\\t' +\n            `else if (index == ${i}) { return arr[${i}]; }`);\n      }\n    }\n    codeLines.push(\n        '\\t' +\n        '}');\n\n    return codeLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {Logger} from '../../../instrument';\nimport {Conv} from '../../../ops/conv';\nimport {Tensor} from '../../../tensor';\nimport {assert, PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo} from '../types';\nimport {WebGLConv} from './conv';\nimport {WebGLIm2ColPacked} from './im2col-pack';\nimport {WebGLMatMulPacked} from './matmul-pack';\nimport {WebGLReshapePacked} from './reshape-packed';\n\nexport class WebGLConvPacked extends Conv {\n  protected artifacts: Artifact[];\n  protected programInfo: ProgramInfo[];\n  protected outputShape: number[];\n\n  private kernelReshape = new WebGLReshapePacked();\n  private im2col: WebGLIm2ColPacked;\n  private matmul = new WebGLMatMulPacked();\n  private outputReshape = new WebGLReshapePacked();\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const programManager = inferenceHandler.session.programManager;\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      for (let i = 2; i < kshape.length; ++i) {\n        this.kernelShape.push(kshape[i]);\n      }\n    }\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\n    Logger.verbose(\n        'Conv',\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\n\n    if (!this.outputShape) {\n      this.outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\n    }\n    if (this.im2col === undefined) {\n      this.im2col = new WebGLIm2ColPacked(this.outputShape, kshape, this.dilations, this.pads, this.strides);\n    }\n    if (this.activation) {\n      const attributes = new Attribute(undefined);\n      attributes.set('__internal_activation', 'string', (this.activation));\n      this.matmul.initialize(attributes);\n    }\n    // shape for kernel reshape\n    const shape =\n        new Tensor([2], 'int32', undefined, undefined, new Int32Array([kshape[0], kshape[1] * kshape[2] * kshape[3]]));\n    if (!this.artifacts) {\n      this.artifacts = [];\n      this.programInfo = [];\n      this.programInfo[0] = this.im2col.createProgramInfo(inferenceHandler, [inputs[0], inputs[1]]);\n      this.artifacts[0] = programManager.build(this.programInfo[0]);\n\n      this.programInfo[1] = this.kernelReshape.createProgramInfo(inferenceHandler, [inputs[1], shape]);\n      this.artifacts[1] = programManager.build(this.programInfo[1]);\n    }\n\n    // run im2col\n    const runDataIm2col = this.im2col.createRunData(inferenceHandler, this.programInfo[0], [inputs[0], inputs[1]]);\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[0], runDataIm2col);\n    programManager.run(this.artifacts[0], runDataIm2col);\n    const im2colOutput = runDataIm2col.outputTextureData.tensor;\n\n    // reshape kernel\n    const runDataKernelReshape =\n        this.kernelReshape.createRunData(inferenceHandler, this.programInfo[1], [inputs[1], shape]);\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[1], runDataKernelReshape);\n    programManager.run(this.artifacts[1], runDataKernelReshape);\n    const kernelReshaped = runDataKernelReshape.outputTextureData.tensor;\n\n    // run matmul\n    const hasBias = (inputs.length === 3);\n    assert(this.artifacts.length > 1, () => 'expect at least 2 artifacts created');\n    if (this.artifacts.length === 2) {\n      this.programInfo[2] = this.matmul.createProgramInfo(\n          inferenceHandler, hasBias ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput]);\n      this.artifacts[2] = programManager.build(this.programInfo[2]);\n    }\n    const runDataMatmul = this.matmul.createRunData(\n        inferenceHandler, this.programInfo[2],\n        hasBias ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput]);\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[2], runDataMatmul);\n    programManager.run(this.artifacts[2], runDataMatmul);\n    const matmulOutput = runDataMatmul.outputTextureData.tensor;\n\n    // reshape output\n    const outputShapeTensor = new Tensor(\n        [this.outputShape.length], 'int32', undefined, undefined,\n        new Int32Array([this.outputShape[0], this.outputShape[1], this.outputShape[2], this.outputShape[3]]));\n\n    assert(this.artifacts.length > 2, () => 'expect at least 3 artifacts created');\n    if (this.artifacts.length === 3) {\n      this.programInfo[3] = this.outputReshape.createProgramInfo(inferenceHandler, [matmulOutput, outputShapeTensor]);\n      this.artifacts[3] = programManager.build(this.programInfo[3]);\n    }\n    const runDataOutputReshape =\n        this.outputReshape.createRunData(inferenceHandler, this.programInfo[3], [matmulOutput, outputShapeTensor]);\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[3], runDataOutputReshape);\n    programManager.run(this.artifacts[3], runDataOutputReshape);\n    return [runDataOutputReshape.outputTextureData.tensor];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {Logger} from '../../../instrument';\nimport {Conv} from '../../../ops/conv';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\nimport {WebGLContext} from '../webgl-context';\n\nimport {WebGLConvPacked} from './conv-pack';\nimport {getActicationSnippet} from './fuse-utils';\n\nexport class WebGLConv extends Conv {\n  unpackedGroupedConvImpl: WebGLUnpackedGroupedConv;\n  unpackedConvImpl: WebGLUnpackedConv;\n  packedConvImpl: WebGLConvPacked;\n\n  constructor() {\n    super();\n    this.unpackedGroupedConvImpl = new WebGLUnpackedGroupedConv();\n    this.unpackedConvImpl = new WebGLUnpackedConv();\n    this.packedConvImpl = new WebGLConvPacked();\n  }\n\n  initialize(attributes: Attribute): void {\n    super.initialize(attributes);\n    this.unpackedGroupedConvImpl.initialize(attributes);\n    this.unpackedConvImpl.initialize(attributes);\n    this.packedConvImpl.initialize(attributes);\n  }\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const packMode = inferenceHandler.session.pack;\n    if (this.group > 1) {\n      return this.unpackedGroupedConvImpl.run(inferenceHandler, inputs);\n    } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1) {\n      return this.packedConvImpl.run(inferenceHandler, inputs);\n    } else {\n      return this.unpackedConvImpl.run(inferenceHandler, inputs);\n    }\n  }\n\n  static calcOutputShape(\n      inputShape: number[], kernelShape: number[], dilations: number[], adjustPads: number[],\n      strides: number[]): number[] {\n    const batchSize = inputShape[0];\n    const inputSpatialShape = inputShape.slice(2);\n    const spatialRank = inputSpatialShape.length;\n    const outChannels = kernelShape[0];\n    const kernelSpatialShape = kernelShape.slice(2);\n    const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n    const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n    const outputSpatialShape =\n        inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n    const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n    return outputShape;\n  }\n}\n\nexport class WebGLUnpackedGroupedConv extends Conv implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const hasBias = inputs.length > 2;\n    const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n    const xShape = inputs[0].dims.slice();\n    const wShape = inputs[1].dims.slice();\n    const outputChannelsPerGroup = wShape[0] / this.group;\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      for (let i = 2; i < wShape.length; ++i) {\n        this.kernelShape.push(wShape[i]);\n      }\n    }\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\n    Logger.verbose(\n        'Conv',\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\n    const outputShape = WebGLConv.calcOutputShape(xShape, wShape, this.dilations, this.pads, this.strides);\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\n\n    const shaderSource = `\n    const ivec2 strides = ivec2(${this.strides[0]}, ${this.strides[1]});\n    const ivec2 pads = ivec2(${this.pads[0]}, ${this.pads[1]});\n    ${activationFunction}\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int batch = coords.x;\n      int output_channel = coords.y;\n      ivec2 xRCCorner = coords.zw * strides - pads;\n      int group_id = output_channel / ${outputChannelsPerGroup};\n\n      float value = 0.0;\n      for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n        int input_channel = group_id * ${wShape[1]} + wInChannel;\n        for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n          int xHeight = xRCCorner.x + wHeight * ${this.dilations[0]};\n\n          if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n            continue;\n          }\n\n          for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n            int xWidth = xRCCorner.y + wWidth * ${this.dilations[1]};\n            if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n              continue;\n            }\n\n            float xVal = getX(batch, input_channel, xWidth, xHeight);\n            float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n            value += xVal*wVal;\n          }\n        }\n      }\n      ${processBias}\n      ${applyActivation}\n      ${glsl.output} = vec4(value, .0, .0, .0);\n    }\n`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n      shaderSource,\n      hasMain: true,\n    };\n  }\n\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLUnpackedConv extends Conv {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const programManager = inferenceHandler.session.programManager;\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const programInfos = this.createProgramInfoArray(inferenceHandler, inputs);\n      for (let i = 0; i < programInfos.length; ++i) {\n        const artifact = inferenceHandler.session.programManager.build(programInfos[i]);\n        this.artifacts.push(artifact);\n      }\n    }\n    const runDataArray = this.createRunDataArray(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[0], runDataArray[0]);\n    programManager.run(this.artifacts[0], runDataArray[0]);\n    programManager.run(this.artifacts[1], runDataArray[1]);\n    return [runDataArray[1].outputTextureData.tensor];\n  }\n  createProgramInfoArray(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      const wDims = inputs[1].dims;\n      for (let i = 2; i < wDims.length; ++i) {\n        this.kernelShape.push(wDims[i]);\n      }\n    }\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\n    Logger.verbose(\n        'Conv',\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\n    const outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\n    const im2colProgramInfo = this.createIm2ColProgramInfo(inferenceHandler, inputs, outputShape);\n    const dotProductProgramInfo =\n        this.createDotProductProgramInfo(inferenceHandler, im2colProgramInfo.outputLayout, inputs, outputShape);\n    return [im2colProgramInfo, dotProductProgramInfo];\n  }\n  createRunDataArray(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]):\n      RunData[] {\n    const k = inputs[1];\n    const b = inputs.length >= 3 ? inputs[2] : undefined;\n    let kTD = inferenceHandler.getTextureData(k.dataId);\n    if (!kTD) {\n      Logger.verbose('Conv', 'Did not find the adjustedKernel texture in the cache. Creating rew.');\n      const newKernelData =\n          WebGLUnpackedConv.prepKernelForDotProduct(k.dims.slice(), this.group, 4, k.floatData as Float32Array);\n      // hack: should use graph transformer to rewrite initializer K\n      kTD = inferenceHandler.createTextureDataFromLayoutBindTensor(\n          programInfos[1].inputLayouts[1], k.type, newKernelData, k);\n    }\n    const runtDataIm2Col = {\n      inputTextureDatas: [inferenceHandler.getOrCreateTextureData(inputs[0])],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, inputs[0].type),\n      uniformData: {}\n    };\n    const inputTDs = [runtDataIm2Col.outputTextureData, kTD];\n    if (b) {\n      inputTDs.push(inferenceHandler.getOrCreateTextureData(b));\n    }\n    const outputTD = inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, inputs[0].type);\n    const runDataDotProduct = {\n      inputTextureDatas: inputTDs,\n      outputTextureData: outputTD,\n      uniformData: {},\n      draw: (glContext: WebGLContext, artifact: Artifact) => {\n        const gl = glContext.gl;\n        const sharedDim = artifact.programInfo.params!.sharedDim as number;\n        const sharedDimReadSize = artifact.programInfo.params!.sharedDimReadSize as number;\n        const sharedDimOffsetLocation = artifact.uniformLocations.find(l => l.name === 'sharedDimOffset')!.location;\n        let blend = false;\n        for (let k = 0; k < sharedDim; k += sharedDimReadSize) {\n          Logger.verbose('MatMul2D', `k = ${k}, sharedDim: ${sharedDim}, readSize = ${sharedDimReadSize}`);\n          if (k === sharedDimReadSize) {\n            blend = true;\n            gl.enable(gl.BLEND);\n            glContext.checkError();\n            gl.blendEquation(gl.FUNC_ADD);\n            glContext.checkError();\n            gl.blendFunc(gl.ONE, gl.ONE);\n            glContext.checkError();\n          }\n\n          gl.uniform1i(sharedDimOffsetLocation, k);\n          glContext.checkError();\n          glContext.draw();\n        }\n\n        if (blend) {\n          gl.disable(gl.BLEND);\n          glContext.checkError();\n        }\n      }\n    };\n    return [runtDataIm2Col, runDataDotProduct];\n  }\n  createIm2ColProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], outputShape: number[]):\n      ProgramInfo {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n\n    const rank = outputShape.length;\n    const im2colDims = WebGLUnpackedConv.calcIm2ColDims(xshape, kshape, outputShape, 4);\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(\n        im2colDims, 4, [im2colDims[0], im2colDims[1], im2colDims[2], im2colDims[3] * 4], {breakAxis: 3});\n\n    const shaderSource = `\n      const int XC = ${xshape[1]};\n      const int XH = ${xshape[2]};\n      const int XW = ${xshape[3]};\n      const int KH = ${this.kernelShape[0]};\n      const int KW = ${this.kernelShape[1]};\n      const int dilationH = ${this.dilations[0]};\n      const int dilationW = ${this.dilations[1]};\n      const int strideH = ${this.strides[0]};\n      const int strideW = ${this.strides[1]};\n      const int padH = ${this.pads[0]};\n      const int padW = ${this.pads[1]};\n      const int KHKW = KH*KW;\n      const int XCKHKW = XC * KHKW;\n      const int outputChannels = 4;\n      vec4 process(int indices[${rank}]) {\n        int b  = indices[0]; // batch size\n        int oh = indices[1] * strideH - padH; //output height\n        int ow = indices[2] * strideW - padW; //output width\n        int p = indices[3] * outputChannels; //patch\n        vec4 value = vec4(0.0);\n        for(int i=0; i < outputChannels; ++i) {\n          if(p < XCKHKW) {\n            int patchC = p / KHKW;\n            int patchH = (p - patchC*KHKW) / KW;\n            int patchW = (p - patchC*KHKW) - patchH * KW;\n            int xh2 = oh + patchH * dilationH;\n            int xw2 = ow + patchW * dilationW;\n            int x[${xshape.length}];\n            x[0] = b;\n            x[1] = patchC;\n            x[2] = xh2;\n            x[3] = xw2;\n            if(xh2 >= 0 &&\n                xh2 < XH &&\n                xw2 >= 0 &&\n                xw2 < XW) {\n              value[i] = _X(x);\n            }\n          }\n          ++p;\n        }\n        return value;\n      }\n      `;\n    return {\n      name: 'Im2Col',\n      inputLayouts: [inferenceHandler.createTextureLayoutFromShape(xshape)],\n      outputLayout,\n      samplers: ['X'],\n      shaderSource,\n    };\n  }\n  createDotProductProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, im2colLayout: TextureLayout, inputs: Tensor[],\n      outputShape: number[]): ProgramInfo {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n    const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n    const kLayout = inferenceHandler.createTextureLayoutFromShape(\n        adjustedKernelShape, 4, [adjustedKernelShape[0], adjustedKernelShape[1] * 4], {breakAxis: 1});\n\n    let bLayout: TextureLayout|undefined;\n    const rank = outputShape.length;\n\n    const inputLayouts = [im2colLayout, kLayout];\n    if (inputs.length === 3) {\n      bLayout = inferenceHandler.createTextureLayoutFromShape(inputs[2].dims.slice());\n      inputLayouts.push(bLayout);\n    }\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(outputShape);\n    const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n    const sharedDim = im2colLayout.shape[3];\n    const blendEnabled = inferenceHandler.session.backend.glContext.isBlendSupported && !this.activation;\n    const sharedDimReadSize = blendEnabled && inferenceHandler.session.backend.matmulMaxBatchSize ?\n        this.calcSharedDimReadSize(inferenceHandler.session.backend.matmulMaxBatchSize, sharedDim) :\n        sharedDim;\n    const samplers = ['Im2Col', 'K'];\n    if (inputs.length === 3) {\n      samplers.push('B');\n    }\n\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\n\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n    ${activationFunction}\n    float process(int indices[${rank}]) {\n      int b[1];\n      b[0] = indices[1];\n      int im2col[${im2colLayout.shape.length}];\n      im2col[0] = indices[0];\n      im2col[1] = indices[2];\n      im2col[2] = indices[3];\n      int im2colOffset = im2col[0] * ${im2colLayout.strides[0]} + im2col[1] * ${\n        im2colLayout.strides[1]} + im2col[2] * ${im2colLayout.strides[2]} + sharedDimOffset;\n      int kernelOffset = indices[1] * ${kLayout.strides[0]} + sharedDimOffset;\n      float value = sharedDimOffset == 0 ? ${initValue} : 0.0;\n      for (int i = 0; i < ${sharedDimReadSize}; ++i) {\n        vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colLayout.width}, ${im2colLayout.height});\n        vec2 kernelCoords = offsetToCoords(kernelOffset, ${kLayout.width}, ${kLayout.height});\n        value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n        ++im2colOffset;\n        ++kernelOffset;\n      }\n      ${applyActivation}\n      return value;\n    }`;\n    return {\n      name: 'dotProduct',\n      inputLayouts: inputs.length === 3 ? [im2colLayout, kLayout, bLayout!] : [im2colLayout, kLayout],\n      outputLayout,\n      shaderSource,\n      samplers,\n      variables: [{name: 'sharedDimOffset', type: 'int'}],\n      params: {sharedDim, sharedDimReadSize}\n    };\n  }\n  static prepKernelForDotProduct(shape: number[], group: number, channels: number, kernel: Float32Array): Float32Array {\n    if (group === 1 && (channels === 1 || (shape[2] * shape[3]) % channels === 0)) {\n      return kernel;\n    }\n    const numFeatureMaps = shape[0];\n    const oldRowSize = shape[1] * shape[2] * shape[3];\n    const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n    const newSize = numFeatureMaps * newRowSize;\n    const buffer = new Float32Array(newSize);\n    for (let f = 0; f < numFeatureMaps; ++f) {\n      const oldOffset = f * oldRowSize;\n      const newOffset = f * newRowSize + f % group * oldRowSize;\n      buffer.set(kernel.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n    }\n    return buffer;\n  }\n  static calcIm2ColDims(inputShape: number[], kernelShape: number[], outputShape: number[], channels = 1): number[] {\n    return [\n      outputShape[0], outputShape[2], outputShape[3],\n      Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)\n    ];\n  }\n\n  protected calcSharedDimReadSize(preferredBatchSize: number, sharedDim: number): number {\n    if (preferredBatchSize <= 0 || sharedDim < preferredBatchSize || sharedDim % preferredBatchSize !== 0) {\n      return sharedDim;\n    }\n    return preferredBatchSize;\n  }\n  protected calcBlockSize(outputLayout: TextureLayout): [number, number]|undefined {\n    const preferredRowCount = 64;\n    const preferredColCount = 64;\n    if (outputLayout.height < preferredRowCount) {\n      return undefined;\n    }\n    return [preferredColCount, preferredRowCount];\n  }\n  protected artifacts: Artifact[];\n  protected readSize = 8;\n  protected blockSize = 64;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {DepthToSpace} from '../../../ops/depth-to-space';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData} from '../types';\n\nimport {reshape} from './reshape';\nimport {WebGLTranspose} from './transpose';\n\nexport class WebGLDepthToSpace extends DepthToSpace {\n  protected transposeProgramInfo: ProgramInfo;\n\n  protected transposeArtifact: Artifact;\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const programManager = inferenceHandler.session.programManager;\n    const transposePerm = this.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n    const firstReshapeShape = this.mode === 'DCR' ?\n        [\n          inputs[0].dims[0], this.blocksize, this.blocksize, inputs[0].dims[1] / this.blocksizeSqr, inputs[0].dims[2],\n          inputs[0].dims[3]\n        ] :\n        [\n          inputs[0].dims[0], inputs[0].dims[1] / this.blocksizeSqr, this.blocksize, this.blocksize, inputs[0].dims[2],\n          inputs[0].dims[3]\n        ];\n\n    const transpose = new WebGLTranspose();\n    const attributes = new Attribute(undefined);\n    attributes.set('perm', 'ints', transposePerm);\n    transpose.initialize(attributes);\n\n    // First reshape\n\n    const firstReshapedTensor = reshape(inferenceHandler, inputs[0], firstReshapeShape);\n\n    // transpose\n    if (!this.transposeProgramInfo) {\n      this.transposeProgramInfo = transpose.createProgramInfo(inferenceHandler, [firstReshapedTensor]);\n      this.transposeArtifact = programManager.build(this.transposeProgramInfo);\n    }\n    const runDataTranspose =\n        transpose.createRunData(inferenceHandler, this.transposeProgramInfo, [firstReshapedTensor]);\n    inferenceHandler.checkAndUpdateTextureForm(this.transposeArtifact, runDataTranspose);\n    programManager.run(this.transposeArtifact, runDataTranspose);\n    const transposeOutput = runDataTranspose.outputTextureData.tensor;\n\n    // Second reshape\n    const result = reshape(inferenceHandler, transposeOutput, [\n      inputs[0].dims[0], inputs[0].dims[1] / this.blocksizeSqr, inputs[0].dims[2] * this.blocksize,\n      inputs[0].dims[3] * this.blocksize\n    ]);\n    return [result];\n  }\n\n  protected getOutShape(input: Tensor): number[] {\n    const batchSize = input.dims[0];\n    const inputDepth = input.dims[1];\n    const inputHeight = input.dims[2];\n    const inputWidth = input.dims[3];\n    if (inputDepth % (this.blocksizeSqr) !== 0) {\n      throw new Error('Input depth must be divisible by squared blocksize.');\n    }\n    const outputDepth = inputDepth / this.blocksizeSqr;\n    const outputHeight = inputHeight * this.blocksize;\n    const outputWidth = inputWidth * this.blocksize;\n    return [batchSize, outputDepth, outputHeight, outputWidth];\n  }\n\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Dropout} from '../../../ops/dropout';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLDropout extends Dropout implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (this.testMode) {\n      return [inputs[0]];\n    }\n    throw new Error('Non test mode Dropout is not implemented yet');\n  }\n  createProgramInfo(_handler: WebGLInferenceHandler, _inputs: Tensor[]): ProgramInfo {\n    throw new Error('Non test mode Dropout is not implemented yet');\n  }\n  createRunData(_handler: WebGLInferenceHandler, _programInfo: ProgramInfo, _inputs: Tensor[]): RunData {\n    throw new Error('Non test mode Dropout is not implemented yet');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Elu} from '../../../ops/elu';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLElu extends Elu implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      void main() {\n        float v = ${glsl.texture2D}(A, TexCoords).r;\n        ${glsl.output} = vec4(v >= 0.0 ? v: (exp(v) - 1.0) * ${this.alpha.toExponential()}); /* float number format */\n      }\n      `;\n    return {\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Flatten} from '../../../ops/flatten';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {reshape} from './reshape';\n\nexport class WebGLFlatten extends Flatten {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.flattenShape(inputs[0].dims, this.axis);\n\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {glslRelu, glslSigmoid} from './unary-op';\n\nexport function getActicationSnippet(activation: string) {\n  let activationFunction = '';\n  let activationName = '';\n  switch (activation) {\n    case 'Relu':\n      activationName = glslRelu().name;\n      activationFunction = glslRelu().body;\n      break;\n    case 'Sigmoid':\n      activationName = glslSigmoid().name;\n      activationFunction = glslSigmoid().body;\n      break;\n    default:\n      // TODO: adding other activations that can be fused.\n      activationName = '';\n      activationFunction = '';\n  }\n  const applyActivation = activation ? `\n  value = ${activationName}(value);` :\n                                       '';\n  return {activationFunction, applyActivation};\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Gather} from '../../../ops/gather';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLGather extends Gather implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    const indexDataShape = inputs[1].dims.slice();\n    const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\n    const indexCopyOps: string[] = [];\n    for (let i = 0; i < outputShape.length; i++) {\n      // outputShape is divided into three parts: A, B, C\n      // |0        axis|  axis + indexDataShape.length |          end|\n      // |     A       |             B                 |      C      |\n      //\n      // inputIdx: [A, inputs[1][B], C]\n      if (i < axis) {  // A\n        outputShape[i] = inputShape[i];\n        indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n      } else {\n        if (i < axis + indexDataShape.length) {  // B\n          outputShape[i] = indexDataShape[i - axis];\n          indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n        } else {                                                       // C\n          outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n          indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n        }\n      }\n    }\n\n    const orank = outputShape.length || 1;\n    const irank = inputShape.length;\n    const iDrank = indexDataShape.length || 1;\n    const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'B'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Gemm} from '../../../ops/gemm';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLGemm extends Gemm implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const aShape = inputs[0].dims.slice();\n    const bShape = inputs[1].dims.slice();\n    const [M, N] = GemmUtil.getShapeOfGemmResult(\n        aShape, this.transA, bShape, this.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n    const oShape = [M, N];\n    if (!oShape) {\n      throw new Error('Can\\'t use gemm on the given tensors');\n    }\n    let sharedDim = aShape[aShape.length - 1];\n    let line = '';\n    if (this.transA) {\n      sharedDim = aShape[0];\n    }\n    if (this.transA && this.transB) {\n      line = 'value += _A_T(a) * _B_T(b);';\n    } else if (this.transA && !this.transB) {\n      line = 'value += _A_T(a) * _B(b);';\n    } else if (!this.transA && this.transB) {\n      line = 'value += _A(a) * _B_T(b);';\n    } else if (!this.transA && !this.transB) {\n      line = 'value += _A(a) * _B(b);';\n    }\n    const rank = oShape.length;\n    const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n    const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n    const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n    const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n    const inputLayouts = inputs.map(t => inferenceHandler.getOrCreateTextureLayout(t));\n    return {\n      inputLayouts,\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(oShape),\n      samplers: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n      variables: [{name: 'alpha', type: 'float'}, {name: 'beta', type: 'float'}],\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => inferenceHandler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {'alpha': this.alpha, 'beta': this.beta}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {unpackFromChannel} from './packing-utils';\n\nexport class WebGLIm2ColPacked implements WebGLOperator {\n  protected convOutputShape: number[];\n  protected kernelShape: number[];\n  protected dilations: number[];\n  protected pads: number[];\n  protected strides: number[];\n\n  constructor(\n      convOutputShape: number[], kernelShape: number[], dilations: number[], pads: number[], strides: number[]) {\n    this.convOutputShape = convOutputShape;\n    this.kernelShape = kernelShape;\n    this.dilations = dilations;\n    this.pads = pads;\n    this.strides = strides;\n  }\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (inputs.length !== 2) {\n      throw new Error('Im2Col kernel should have two input tensors');\n    }\n\n    const xshape = inputs[0].dims.slice();\n    const wshape = inputs[1].dims.slice();\n    const rowDim = 2;\n    const colDim = 3;\n    const rank = this.convOutputShape.length;\n    const im2colShape = [wshape[1] * wshape[2] * wshape[3], this.convOutputShape[2] * this.convOutputShape[3]];\n    const kernelSize = wshape[2] * wshape[3];\n    const unpackChannel = unpackFromChannel();\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    let unrolled = '';\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.x + ${col};\n          pos = rc.y + ${row};\n\n          if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n            offsetY = int(blockIndex / (${this.convOutputShape[rank - 1]})) * ${this.strides[0]} - ${this.pads[0]};\n            d0 = offsetY + ${this.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n            if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n              offsetX = imod(blockIndex, ${this.convOutputShape[rank - 1]}) * ${this.strides[1]} - ${this.pads[1]};\n              d1 = offsetX + ${this.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n              if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                ch = int(float(pos)/ ${kernelSize}.);\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(0, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n              }\n            }\n          }\n\n        `;\n      }\n    }\n\n    const shaderSource = `\n    ${unpackChannel}\n\n    void main() {\n      ivec2 rc = getOutputCoords();\n        vec4 result = vec4(0.0);\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n        ${unrolled}\n        ${glsl.output} = result;\n    }\n          `;\n    return {\n      name: 'WebGLIm2ColPacked',\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(inputs[0], 4, true, xshape, true)],\n      outputLayout:\n          inferenceHandler.createTextureLayoutFromShape(im2colShape, 4, im2colShape, {isPacked: true, reverseWH: true}),\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: true,\n      expectPackedOutputs: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs =\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true)));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ImageScaler} from '../../../ops/image-scaler';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLImageScaler extends ImageScaler implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const rank = outputShape.length;\n    const getBiasMethod = this.createGetBiasMethod(this.bias.length);\n    const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n    return {\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['X'],\n      variables: [{name: 'bias', type: 'float', arrayLength: this.bias.length}, {name: 'scale', type: 'float'}],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {'bias': this.bias, 'scale': this.scale}\n    };\n  }\n  private createGetBiasMethod(numChannels: number): string {\n    const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n    for (let i = 0; i < numChannels; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            '\\t' +\n            `if (channel == ${i}) { return bias[${i}]; }`);\n      } else if (i === numChannels - 1) {\n        codeLines.push(\n            '\\t' +\n            `else { return bias[${i}]; }`);\n      } else {\n        codeLines.push(\n            '\\t' +\n            `else if (channel == ${i}) { return bias[${i}]; }`);\n      }\n    }\n    codeLines.push(\n        '\\t' +\n        '}');\n    return codeLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\n\nexport class WebGLInstanceNormalization extends InstanceNormalization {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\n      programInfos.forEach((programInfo) => {\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\n        this.artifacts.push(artifact);\n      });\n    }\n\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\n    return [runDatas[1].outputTextureData.tensor];\n  }\n\n  checkInputTypes(inputs: Tensor[]): boolean {\n    if (!super.checkInputTypes(inputs)) {\n      return false;\n    }\n\n    if (inputs[0].dims.length !== 4) {\n      // currently webgl implementation only support 4-D input.\n      return false;\n    }\n\n    return true;\n  }\n\n  createMeanAndVarianceProgramInfo(inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout): ProgramInfo {\n    const xDims = xLayout.shape;\n    const channel = xDims[1];\n    const channelSize = xDims[2] * xDims[3];\n    const outputShape = [xDims[0], channel];\n    const outputUnpackedShape = [xDims[0], channel * 4];\n\n    const shaderSource = `\n    vec4 process(int[2] indices) {\n      vec4 v = vec4(0.0);\n      int a[4];\n      a[0] = indices[0];\n      a[1] = indices[1];\n      float temp = 0.0;\n      for(int a2=0; a2<${xDims[2]}; a2++) {\n        a[2] = a2;\n        for(int a3=0; a3<${xDims[3]}; a3++) {\n          a[3] = a3;\n          float x = _X(a);\n          temp += x;\n        }\n      }\n      float mean = temp / float(${channelSize});\n      temp = 0.0;\n      for(int a2=0; a2<${xDims[2]}; a2++) {\n        a[2] = a2;\n        for(int a3=0; a3<${xDims[3]}; a3++) {\n          a[3] = a3;\n          float x = _X(a);\n          temp += (x - mean) * (x - mean);\n        }\n      }\n      v.r = mean;\n      v.g = temp / float(${channelSize});\n\n      return v;\n    }`;\n    return {\n      inputLayouts: [xLayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape, 4, outputUnpackedShape),\n      samplers: ['X'],\n      shaderSource,\n      name: 'MeanAndVariance',\n    };\n  }\n\n  createComputOutputProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout, scaleLayout: TextureLayout,\n      bLayout: TextureLayout, meanAndVarianceLayout: TextureLayout): ProgramInfo {\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n    vec4 get_MeanAndVariance(int[2] mv) {\n      int offset = indicesToOffset_MeanAndVariance(mv);\n      vec2 coords = offsetToCoords(offset, ${meanAndVarianceLayout.width}, ${meanAndVarianceLayout.height});\n      return ${glsl.texture2D}(MeanAndVariance, coords);\n    }\n\n    float process(int[4] indices) {\n\n          int mv[2];\n          mv[0] = indices[0];\n          mv[1] = indices[1];\n          vec4 mean_and_variance = get_MeanAndVariance(mv);\n          float mean = mean_and_variance.r;\n          float variance = mean_and_variance.g;\n\n          int sb[1];\n          sb[0] = indices[1];\n          float scale = _Scale(sb);\n          float b = _B(sb);\n\n          return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n        }`;\n    return {\n      inputLayouts: [xLayout, meanAndVarianceLayout, scaleLayout, bLayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(xLayout.shape),\n      samplers: ['X', 'MeanAndVariance', 'Scale', 'B'],\n      variables: [{name: 'epsilon', type: 'float'}],\n      shaderSource,\n      name: 'ComputOutput',\n    };\n  }\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\n    const xLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\n    const scaleLayout = inferenceHandler.getOrCreateTextureLayout(inputs[1]);\n    const bLayout = inferenceHandler.getOrCreateTextureLayout(inputs[2]);\n    const meanAndVarianceProgramInfo = this.createMeanAndVarianceProgramInfo(inferenceHandler, xLayout);\n    const computeOutputProgramInfo = this.createComputOutputProgramInfo(\n        inferenceHandler, xLayout, scaleLayout, bLayout, meanAndVarianceProgramInfo.outputLayout);\n\n    const programInfos: ProgramInfo[] = [meanAndVarianceProgramInfo, computeOutputProgramInfo];\n    return programInfos;\n  }\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\n    const dataType = inputs[0].type;\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\n    const scaleTD = inferenceHandler.getOrCreateTextureData(inputs[1], programInfos[1].inputLayouts[2]);\n    const bTD = inferenceHandler.getOrCreateTextureData(inputs[2], programInfos[1].inputLayouts[3]);\n    const runDatas: RunData[] = [];\n    runDatas.push({\n      inputTextureDatas: [inputTD],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\n      uniformData: {}\n    });\n    runDatas.push({\n      inputTextureDatas: [inputTD, runDatas[0].outputTextureData, scaleTD, bTD],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, dataType),\n      uniformData: {'epsilon': this.epsilon}\n    });\n    return runDatas;\n  }\n  protected artifacts: Artifact[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {LeakyRelu} from '../../../ops/leaky-relu';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLLeakyRelu extends LeakyRelu implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      void main() {\n        float v = ${glsl.texture2D}(A, TexCoords).r;\n        ${glsl.output} = vec4(v < 0.0 ? v * float(${this.alpha}) : v);\n      }\n      `;\n    return {\n      hasMain: true,\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MatMul} from '../../../ops/matmul';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getActicationSnippet} from './fuse-utils';\n\nexport class WebGLMatMulPacked extends MatMul implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const hasBias = inputs.length > 2;\n    const processBias = hasBias ? 'result += getBiasAtOutCoords();' : '';\n    const aShape = inputs[0].dims;\n    const bShape = inputs[1].dims;\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n\n    if (!outputShape) {\n      throw new Error('Can\\'t use matmul on the given tensors');\n    }\n    const sharedDim = aShape[aShape.length - 1];\n    const sharedDimIndex = Math.ceil(sharedDim / 2);\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const coordsDataType = getCoordsDataType(outputShape.length);\n    const outRank = outputShape.length;\n    const allGlChannels = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\n    const shaderSource = `\n      ${activationFunction}\n      void main() {\n        ${coordsDataType} rc = getOutputCoords();\n        int lastDim = rc.${allGlChannels[outRank - 1]};\n        rc.${allGlChannels[outRank - 1]} = rc.${allGlChannels[outRank - 2]};\n        rc.${allGlChannels[outRank - 2]} = lastDim;\n\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimIndex}; i++) {\n          vec4 a = getA(${getA(allGlChannels, aRank)});\n          vec4 b = getB(${getB(allGlChannels, bRank)});\n          result += (a.rrbb * b.rgrg);\n          result += (a.ggaa * b.baba);\n        }\n        ${processBias}\n        ${applyActivation}\n        ${glsl.output} = result;\n      }`;\n    return {\n      name: 'WebGLMatMulPacked',\n      inputLayouts: inputs.map((t, i) => handler.getOrCreateTextureLayout(t, 4, true, inputs[i].dims, true)),\n      outputLayout:\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}),\n      samplers: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: true,\n      expectPackedOutputs: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs =\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true)));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MatMul} from '../../../ops/matmul';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {WebGLMatMulPacked} from './matmul-pack';\n\nexport class WebGLMatMul extends MatMul implements WebGLOperator {\n  private usePackedTexture?: boolean;\n\n  packedImpl: WebGLMatMulPacked;\n  unpackedImpl: WebGLUnpackedMatMul;\n  constructor() {\n    super();\n    this.packedImpl = new WebGLMatMulPacked();\n    this.unpackedImpl = new WebGLUnpackedMatMul();\n  }\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (this.usePackedTexture === undefined) {\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      this.usePackedTexture = !isBroadcast && inferenceHandler.session.pack;\n    }\n\n    if (this.usePackedTexture) {\n      return inferenceHandler.run(this.packedImpl, inputs);\n    } else {\n      return inferenceHandler.run(this.unpackedImpl, inputs);\n    }\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (this.usePackedTexture === undefined) {\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      this.usePackedTexture = !isBroadcast && handler.session.pack;\n    }\n\n    if (this.usePackedTexture && inputs[0].dims.length > 1) {\n      return this.packedImpl.createProgramInfo(handler, inputs);\n    } else {\n      return this.unpackedImpl.createProgramInfo(handler, inputs);\n    }\n  }\n\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    if (this.usePackedTexture && inputs[0].dims.length > 1) {\n      return this.packedImpl.createRunData(handler, programInfo, inputs);\n    } else {\n      return this.unpackedImpl.createRunData(handler, programInfo, inputs);\n    }\n  }\n}\n\nexport class WebGLUnpackedMatMul extends MatMul implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const aShape = inputs[0].dims;\n    const bShape = inputs[1].dims;\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n    if (!outputShape) {\n      throw new Error('Can\\'t use matmul on the given tensors');\n    }\n    const rank = outputShape.length;\n    const arank = aShape.length;\n    const brank = bShape.length;\n    const sharedDim = aShape[aShape.length - 1];\n    const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${arank}];\n          int b[${brank}];\n          bcastMatmulIndices_A(indices, a);\n          bcastMatmulIndices_B(indices, b);\n\n          float value;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${arank - 1}] = k;\n              b[${brank - 2}] = k;\n              value += _A(a) * _B(b);\n          }\n          return value;\n      }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'B'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nexport class WebGLPack implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (inputs.length !== 1) {\n      throw new Error('Pack kernel should have input tensor count to 1.');\n    }\n\n    const inputShape = inputs[0].dims;\n\n    const outputLayout =\n        handler.createTextureLayoutFromShape(inputShape, 4, inputShape, {isPacked: true, reverseWH: true});\n    const outputShape = outputLayout.shape;\n    const inputRank = inputShape.length;\n    const outputRank = outputShape.length;\n\n    const coordsDataType = getCoordsDataType(outputRank);\n    const channels = getChannels('rc', outputRank);\n    const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n    let reversedInputWH;\n    if (inputRank === 0) {\n      reversedInputWH = [1, 1];\n    } else if (inputRank === 1) {\n      reversedInputWH = [inputShape[0], 1];\n    } else {\n      reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n    }\n    const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n    const output = getOutput(inputShape, channels);\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n\n    return {\n      name: 'WebGLPack',\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true)],\n      outputLayout,\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: false,\n      expectPackedOutputs: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Pad} from '../../../ops/pad';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\n\nexport class WebGLPad extends Pad implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), this.pads);\n    const rank = outputShape.length;\n    const alayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\n    const padFunction = getPadFunction(\n        getGlsl(inferenceHandler.session.backend.glContext.version), 'A', alayout, this.mode, this.pads, this.value);\n    const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n    return {\n      inputLayouts: [alayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\nexport function getPadFunction(\n    glsl: Glsl, name: string, inputLayout: TextureLayout, mode: string, pads: number[], value: number): string {\n  switch (mode) {\n    case 'constant':\n      return getPadConstant(\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads, value);\n    case 'reflect':\n      return getPadReflect(\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\n    case 'edge':\n      return getPadEdge(\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n}\nfunction getPadConstant(\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\n    pads: number[], value: number) {\n  const rank = shape.length;\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n          k = m[${i}] - ${pads[i]};\n          if (k < 0)  return constant;\n          if (k >= ${shape[i]}) return constant;\n          offset += k * ${strides[i]};\n          `;\n  }\n  return `\n        float pad${name}(int m[${rank}]) {\n          const float constant = float(${value});\n          int offset = 0;\n          int k = 0;\n          ${block}\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\n          return value;\n        }\n        `;\n}\nfunction getPadReflect(\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\n    pads: number[]) {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n  }\n  return `\n      float pad${name}(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\n        return value;\n      }\n      `;\n}\nfunction getPadEdge(\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\n    pads: number[]) {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n      k = m[${i}] - ${pads[i]};\n      if (k < 0)  k = 0;\n      if (k >= ${shape[i]}) k = ${shape[i] - 1};\n      offset += k * ${strides[i]};\n      `;\n  }\n  return `\n    float pad${name}(int m[${rank}]) {\n      int offset = 0;\n      int k = 0;\n      ${block}\n      vec2 coords = offsetToCoords(offset, ${width}, ${height});\n      float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\n      return value;\n    }\n    `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\n\nexport class WebGLGlobalAveragePool extends GlobalAveragePool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createAveragePoolProgramInfo(\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLAveragePool extends AveragePool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createAveragePoolProgramInfo(\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\nfunction createAveragePoolProgramInfo(\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\n    autoPad = '', strides: number[] = [], pads: number[] = [], countIncludePad: boolean): ProgramInfo {\n  const inputShape = inputs[0].dims.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\n  const outputShape =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\n  const kernelSize = ShapeUtil.size(kernelShape);\n  const op1 = 'value += _X(x);';\n  let op2 = '';\n  if (countIncludePad) {\n    op2 += `value /= float(${kernelSize});`;\n  } else {\n    op2 += `value /= float(${kernelSize} - pad);`;\n  }\n  const inputLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\n  const poolingCode = generatePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '0.0');\n  const shaderSource = `\n      ${poolingCode}\n    `;\n  return {\n    inputLayouts: [inputLayout],\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n    samplers: ['X'],\n    shaderSource,\n  };\n}\n\nexport class WebGLGlobalMaxPool extends GlobalMaxPool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createMaxPoolProgramInfo(\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLMaxPool extends MaxPool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createMaxPoolProgramInfo(\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\nfunction createMaxPoolProgramInfo(\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\n    autoPad = '', strides: number[] = [], pads: number[] = []): ProgramInfo {\n  const inputShape = inputs[0].dims.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\n  const outputShape =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\n  const op1 = `\n              value = max(_X(x), value);\n      `;\n  const op2 = '';\n  const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\n  const poolingCode = generatePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '-1e5');\n  const shaderSource = `\n    ${poolingCode}\n  `;\n  return {\n    inputLayouts: [inputLayout],\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n    samplers: ['X'],\n    shaderSource,\n  };\n}\n\nexport function generatePoolingCode(\n    x: TextureLayout, kernelShape: number[], pads: number[], strides: number[], op1: string, op2: string,\n    startVal: string): string {\n  const inputDims = x.shape;\n  const rank = x.shape.length;\n  if (kernelShape.length <= 2) {\n    const kw = kernelShape[kernelShape.length - 1];\n    const sw = strides[strides.length - 1];\n    const pwStart = pads[pads.length / 2 - 1];\n    const pwEnd = pads[pads.length - 1];\n    const dimW = inputDims[rank - 1];\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n                for (int i = 0; i < ${kw}; i++) {\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n                  if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n                    pad++;\n                    continue;\n                  }\n                  ${op1}\n                }`;\n    } else {\n      codeW = `\n                for (int i = 0; i < ${kw}; i++) {\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n                  ${op1}\n                }`;\n    }\n\n    if (kernelShape.length === 2) {\n      const kh = kernelShape[kernelShape.length - 2];\n      const sh = strides[strides.length - 2];\n      const phStart = pads[pads.length / 2 - 2];\n      const phEnd = pads[pads.length - 2];\n      const dimH = inputDims[rank - 2];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n              for (int j = 0; j < ${kh}; j++) {\n                x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n                if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                  pad+= ${kw};\n                  continue;\n                }\n            `;\n      } else {\n        codeH = `\n                for (int j = 0; j < ${kh}; j++) {\n                  x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            float process(int indices[${rank}]) {\n              int x[${rank}];\n              copyVec(indices, x);\n\n              float value = ${startVal};\n              int pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n              return value;\n            }\n          `;\n    return poolingCode;\n  } else {\n    const kernelSize = ShapeUtil.size(kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = pads.length;\n    const offsetToIndicesFunction = offsetToIndices(stridesRank);\n    const copyInputDims = copyArray(inputDims, 'inputDims');\n    const copyPads = copyArray(pads, 'pads');\n    const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n    const copyStrides = copyArray(strides, 'strides');\n    const hasPads = pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (x[j] >= inputDims[j] || x[j] < 0) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n                  }\n                  ${op1}`;\n    }\n    const poolingCode = `\n            ${offsetToIndicesFunction}\n            float process(int indices[${rank}]) {\n                int x[${rank}];\n                copyVec(indices, x);\n                int offset[${stridesRank}];\n                int pads[${padsRank}];\n                int inputDims[${rank}];\n                int kernelStrides[${stridesRank}];\n                int strides[${stridesRank}];\n                ${copyPads}\n                ${copyInputDims}\n                ${copyStrides}\n                ${copyKernelStrides}\n\n                float value = ${startVal};\n                int pad = 0;\n                bool isPad = false;\n                for (int i = 0; i < ${kernelSize}; i++) {\n                    offsetToIndices(i, kernelStrides, offset);\n                    isPad = false;\n                    for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n                      x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                        + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n                      ${padCode}\n                }\n                ${op2}\n\n                return value;\n            }`;\n    return poolingCode;\n  }\n}\n\nexport function copyArray(array: readonly number[], arrayName: string): string {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n}\n\nexport function offsetToIndices(rank: number): string {\n  return `\n    void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n      if (${rank} == 0) {\n        return;\n      }\n      for (int i = 0; i < ${rank} - 1; ++i) {\n        indices[i] = offset / strides[i];\n        offset -= indices[i] * strides[i];\n      }\n      indices[${rank} - 1] = offset;\n    }`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ReduceBase} from '../../../ops/reduce-op';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nabstract class WebGLGenericReduce extends ReduceBase implements WebGLOperator {\n  abstract getOps(inputs: Tensor[], axes: number[]): string[];\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape: number[] = [];\n    const iRank = inputs[0].dims.length || 1;\n\n    const idxCopy = [];  // copy output indexes to input indexes\n\n    const axes = ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length);\n    const ops = this.getOps(inputs, axes);  // [init ops, reduce ops, final ops]\n    let reduceOps = ops[1];\n\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      // if this axis is reduced\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        if (this.keepDims) {\n          outputShape.push(1);\n        }  // else { remove the axis from outputShape; }\n\n        // loop over the d-th axis\n        reduceOps = `\n        for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n          inputIdx[${k}] = j${k};\n          ${reduceOps}\n        }\n        `;\n      } else {\n        idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n        outputShape.push(inputs[0].dims[k]);\n      }\n    }\n\n    const oRank = outputShape.length || 1;\n\n    const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLReduceSum extends WebGLGenericReduce {\n  getOps(_inputs: Tensor[]): string[] {\n    return ['value = 0.0;', 'value += _A(inputIdx);', ''];\n  }\n}\n\nexport class WebGLReduceMean extends WebGLGenericReduce {\n  getOps(inputs: Tensor[], axes: number[]): string[] {\n    let size = 1.0;\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        size *= inputs[0].dims[k];\n      }\n    }\n\n    return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n  }\n}\n\nexport class WebGLReduceMax extends WebGLGenericReduce {\n  getOps(inputs: Tensor[], axes: number[]): string[] {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n  }\n}\n\nexport class WebGLReduceMin extends WebGLGenericReduce {\n  getOps(inputs: Tensor[], axes: number[]): string[] {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n  }\n}\n\nexport class WebGLReduceProd extends WebGLGenericReduce {\n  getOps(_inputs: Tensor[]): string[] {\n    return ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n  }\n}\n\nexport class WebGLReduceLogSum extends WebGLGenericReduce {\n  getOps(_inputs: Tensor[]): string[] {\n    return ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n  }\n}\n\nexport class WebGLReduceSumSquare extends WebGLGenericReduce {\n  getOps(_inputs: Tensor[]): string[] {\n    return ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Reshape} from '../../../ops/reshape';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, TextureData, WebGLOperator} from '../types';\nimport {TextureLayout} from '../types';\nimport {unpackFromChannel} from './packing-utils';\n\nexport class WebGLReshapePacked extends Reshape implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (inputs.length !== 2) {\n      throw new Error('resize kernel should have input tensor count to 2.');\n    }\n\n    // For packed reshape, we need to re-arrange texel data for output shape.\n    // Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n    // for the reshaped new tensor, we just need to re-arrange the last h and\n    // w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n    // first convert it to 3D by collapsing other dimension to batch dim, then\n    // process with the last two dimensions.\n    // Note: we only need the shape tensor to calculate output shape, so the\n    // content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n    // TODO: optimize the algorithm -- in some cases, if the last two dims are\n    // the same between input shape and output shape, the packed reshape can be\n    // treated as no-op.\n    // TODO: the implementation is a bit complicated due to the fact tensor shape is\n    // immutable once the tensor is created, plus the tensor shape has a 1-to-1\n    // mapping with texture layout. In the future, we may consider relaxing this\n    // assumption.\n\n    const originInputShape = inputs[0].dims;\n    this.inputShape3D = processDims3D(inputs[0].dims);\n    let inputLayout: TextureLayout;\n    inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true, originInputShape, true);\n    if (originInputShape.length !== 3) {\n      const originalInputLayout = inputLayout;\n      // if originShape is not a 3D shape, create texture layout from the processed shape.\n      inputLayout = handler.createTextureLayoutFromShape(\n          this.inputShape3D, 4, this.inputShape3D, {isPacked: true, reverseWH: true});\n      // if the processed input shape produces texture layout differnt from the original\n      // one, the run data has to use the processed (3D) input shape later.\n      this.needSqueezeInputData =\n          (inputLayout.height !== originalInputLayout.height) || (inputLayout.width !== originalInputLayout.width);\n    }\n\n    this.outputShape = ShapeUtil.calculateReshapedDims(originInputShape, inputs[1].integerData);\n    const squeezedOutputShape = processDims3D(this.outputShape);\n\n    this.outputLayout = handler.createTextureLayoutFromShape(\n        squeezedOutputShape, 4, squeezedOutputShape, {isPacked: true, reverseWH: true});\n\n    let mainLoop = '';\n    for (let i = 0; i < 4; i++) {\n      let outputCoords = '';\n      switch (i) {\n        case 0:\n          outputCoords = 'outputCoords = rc;';\n          break;\n        case 1:\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n          break;\n        case 2:\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n          break;\n        case 3:\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n          break;\n        default:\n          throw new Error();\n      }\n\n      mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n\n    const shaderSource = `\n      ${getReshapedInputCoords(this.inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n    return {\n      name: 'WebGLReshapePacked',\n      inputLayouts: [inputLayout],\n      outputLayout: this.outputLayout,\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: true,\n      expectPackedOutputs: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    let inputTDs: [TextureData];\n    const originalInputLayout = handler.getOrCreateTextureLayout(inputs[0], 1, false, [], false);\n    const originalInputTD = handler.getOrCreateTextureData(inputs[0], originalInputLayout, false);\n\n    if (this.needSqueezeInputData) {\n      const squeezedInputLayout: TextureLayout = {\n        channels: 1,\n        height: originalInputLayout.height,\n        width: originalInputLayout.width,\n        shape: this.inputShape3D,\n        strides: ShapeUtil.computeStrides(this.inputShape3D),\n        unpackedShape: this.inputShape3D,\n      };\n      const squeezedInputTD =\n          handler.createSharedTextureData(squeezedInputLayout, inputs[0].type, originalInputTD.texture);\n      inputTDs = [squeezedInputTD];\n\n    } else {\n      inputTDs = [originalInputTD];\n    }\n    let outputLayout = this.outputLayout;\n    // Use original output shape for runData output layout.\n    outputLayout.shape = this.outputShape;\n    outputLayout.unpackedShape = this.outputShape;\n    if (outputLayout === undefined) {\n      outputLayout = handler.createTextureLayoutFromShape(\n          this.outputShape, 4, this.outputShape, {isPacked: true, reverseWH: true});\n    }\n    // return run data for reshape. Here, we use the original calculate outputLayout to create the real output layout.\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n  protected outputShape: readonly number[];\n  private inputShape3D: [number, number, number];\n  private needSqueezeInputData = false;\n  private outputLayout: TextureLayout;\n}\n\nfunction processDims3D(shape: readonly number[]|readonly number[]|Tensor.IntegerType): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  const batchDims = shape.length >= 3 ? shape.slice(0, shape.length - 2) : [1];\n  let batch = 1;\n  for (let i = 0; i < batchDims.length; ++i) {\n    batch *= batchDims[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Reshape} from '../../../ops/reshape';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureLayout} from '../types';\nimport {getPackedShape} from '../utils';\nimport {WebGLReshapePacked} from './reshape-packed';\n\nexport class WebGLReshape extends Reshape {\n  packedImpl: WebGLReshapePacked;\n  constructor() {\n    super();\n    this.packedImpl = new WebGLReshapePacked();\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (inferenceHandler.session.pack) {\n      return inferenceHandler.run(this.packedImpl, inputs);\n    } else {\n      const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n      const reshapedTensor = reshape(inferenceHandler, inputs[0], reshapedDims);\n      return [reshapedTensor];\n    }\n  }\n}\n\nexport function reshape(\n    inferenceHandler: WebGLInferenceHandler, input: Tensor, reshapedDims: readonly number[]): Tensor {\n  const inputTD = inferenceHandler.getOrCreateTextureData(input);\n  let packedShape = reshapedDims;\n  if (inputTD.channels === 4) {\n    packedShape = getPackedShape(reshapedDims);\n  }\n  const newTextureLayout: TextureLayout = {\n    channels: inputTD.channels,\n    height: inputTD.height,\n    width: inputTD.width,\n    // handle reshaping into scalar Tensors\n    shape: packedShape.length !== 0 ? packedShape : [1],\n    strides: ShapeUtil.computeStrides(packedShape),\n    unpackedShape: reshapedDims,\n  };\n\n  const newTextureData = inferenceHandler.createSharedTextureData(newTextureLayout, input.type, inputTD.texture);\n  return newTextureData.tensor;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Upsample} from '../../../ops/upsample';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\n\nexport class WebGLResizePacked extends Upsample implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true);\n\n    const [roi, scales, outputShape] = this.prepareInputs(inputs);\n\n    const outputLayout =\n        handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true});\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    return createResizeProgramInfo(\n        glsl, this.mode, inputLayout, outputLayout, scales, roi, this.useExtrapolation, this.extrapolationValue,\n        this.cubicCoefficientA, this.excludeOutside, this.coordinateTransformMode);\n  }\n\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTD =\n        handler.getOrCreateTextureData(inputs[0], handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true));\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTD.tensor.type);\n    return {inputTextureDatas: [inputTD], outputTextureData: outputTD, uniformData: {}};\n  }\n\n  protected artifacts: Artifact[];\n}\n\nfunction createResizeProgramInfo(\n    glsl: Glsl, mode: string, inputLayout: TextureLayout, outputLayout: TextureLayout, scales: readonly number[],\n    roi: readonly number[], extrapolationEnabled: boolean, extrapolationValue: number, cubicCoefficientA: number,\n    excludeOutside: boolean, coordinateTransformMode: string): ProgramInfo {\n  const isSame = scales.every(s => s === 1) && coordinateTransformMode !== 'tf_crop_and_resize';\n  if (isSame) {\n    return {\n      inputLayouts: [inputLayout],\n      outputLayout,\n      samplers: ['X'],\n      hasMain: true,\n      shaderSource: `void main() {\n      vec4 v = ${glsl.texture2D}(X, TexCoords);\n      ${glsl.output} = v;\n    }`\n    };\n  }\n  const outputShape = outputLayout.unpackedShape;\n  const dim = outputShape.length;\n  if (dim < 2) {\n    throw new Error(`output dimension should be at least 2, but got ${dim}`);\n  }\n\n  const outputHeight = outputShape[dim - 2];\n  const outputWidth = outputShape[dim - 1];\n\n  const inputShape = inputLayout.unpackedShape;\n  if (dim !== inputShape.length) {\n    throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n  }\n  const inputHeight = inputShape[dim - 2];\n  const inputWidth = inputShape[dim - 1];\n\n  const scalesHeight = scales[dim - 2];\n  const scalesWidth = scales[dim - 1];\n\n  let getSourceFracIndex = '';\n\n  if (mode !== 'linear') {\n    // TODO: support other modes\n    throw new Error(`resize (packed) does not support mode: '${mode}'`);\n  }\n  switch (coordinateTransformMode) {\n    case 'asymmetric':\n      getSourceFracIndex = `\n        vec4 getSourceFracIndex(ivec4 coords){\n          return vec4(coords) / scaleWHWH;\n        }\n    `;\n      break;\n    case 'half_pixel':\n      getSourceFracIndex = `\n        vec4 getSourceFracIndex(ivec4 coords){\n          return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n        }\n    `;\n      break;\n    case 'align_corners':\n      getSourceFracIndex = `\n        vec4 getSourceFracIndex(ivec4 coords){\n          vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0, ${\n          outputHeight}.0 - 1.0);\n          vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0, ${\n          inputHeight}.0 - 1.0);\n          vec4 new_scale = original / resized;\n          return vec4(coords) * new_scale;\n        }\n      `;\n      break;\n    default:\n      // TODO:supporting other coordinateTransformModes\n      throw new Error(`resize (packed) does not support coordinateTransformMode: '${coordinateTransformMode}'`);\n  }\n\n  const coordsDataType = getCoordsDataType(dim);\n  const unpackChannel = unpackFromChannel();\n  const shader = `\n        const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n        const vec4 scaleWHWH = vec4(${scalesHeight}.0, ${scalesWidth}.0, ${scalesHeight}.0, ${scalesWidth}.0);\n        ${unpackChannel}\n        ${getSourceFracIndex}\n        float getAValue(int x10, int r, int c, int d) {\n          return getChannel(getA(x10, r, c, d), vec2(c, d));\n        }\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          int batch = rc[0];\n          int depth = rc[1];\n\n          // retrieve the 4 coordinates that is used in the 4 packed output values.\n          ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n          // calculate the source index in fraction\n          vec4 sourceFrac = getSourceFracIndex(coords);\n\n          // get the lower and upper bound of the 4 values that will be packed into one texel.\n          ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n          ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n          ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n          ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n          bool hasNextRow = rc.w < ${outputHeight - 1};\n          bool hasNextCol = rc.z < ${outputWidth - 1};\n\n          // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n          vec4 topLeft = vec4(\n            getAValue(batch, depth, x00.x, x00.y),\n            hasNextCol ? getAValue(batch, depth, x01.x, x01.y)\n                      : 0.0,\n            hasNextRow ? getAValue(batch, depth, x10.x, x10.y)\n                      : 0.0,\n            (hasNextRow && hasNextCol) ?\n              getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n          // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n          vec4 topRight = vec4(\n            getAValue(batch, depth, x00.x, x00.w),\n            hasNextCol ? getAValue(batch, depth, x01.x, x01.w)\n                      : 0.0,\n            hasNextRow ? getAValue(batch, depth, x10.x, x10.w)\n                      : 0.0,\n            (hasNextRow && hasNextCol) ?\n              getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n          // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n          vec4 bottomLeft = vec4(\n            getAValue(batch, depth, x00.z, x00.y),\n            hasNextCol ? getAValue(batch, depth, x01.z, x01.y)\n                      : 0.0,\n            hasNextRow ? getAValue(batch, depth, x10.z, x10.y)\n                      : 0.0,\n            (hasNextRow && hasNextCol) ?\n              getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n          // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n          vec4 bottomRight = vec4(\n            getAValue(batch, depth, x00.z, x00.w),\n            hasNextCol ? getAValue(batch, depth, x01.z, x01.w)\n                      : 0.0,\n            hasNextRow ? getAValue(batch, depth, x10.z, x10.w)\n                      : 0.0,\n            (hasNextRow && hasNextCol) ?\n              getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n          // calculate the interpolation fraction on u and v direction\n          vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n          vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n          vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n          vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n          vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n          ${glsl.output} = vec4(newValue);\n        }\n      `;\n  return {\n    inputLayouts: [inputLayout],\n    outputLayout,\n    samplers: ['A'],\n    shaderSource: shader,\n    hasMain: true,\n    expectPackedInputs: true,\n    expectPackedOutputs: true,\n  };\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Shape} from '../../../ops/shape';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\n\nexport class WebGLShape extends Shape {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Slice, SliceV10} from '../../../ops/slice';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLSlice extends Slice implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createProgramInfo(handler, inputs[0], this.starts, this.ends, this.axes);\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    return createRunData(handler, programInfo, inputs);\n  }\n}\n\nexport class WebGLSliceV10 extends SliceV10 implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId) ||\n        (inputs.length >= 4 && !handler.session.isInitializer(inputs[3].dataId)) ||\n        (inputs.length >= 5 && !handler.session.isInitializer(inputs[4].dataId))) {\n      throw new Error('dynamic slice attributes are not allowed');\n    }\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n      throw new Error('currently non-1 steps is not supported for Slice');\n    }\n    const starts = Array.from(inputs[1].integerData);\n    const ends = Array.from(inputs[2].integerData);\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n\n    return createProgramInfo(handler, inputs[0], starts, ends, axes);\n  }\n\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    return createRunData(handler, programInfo, inputs);\n  }\n}\n\nfunction createProgramInfo(\n    handler: WebGLInferenceHandler, x: Tensor, starts: readonly number[], ends: readonly number[],\n    axes: readonly number[]): ProgramInfo {\n  if (axes.length === 0) {\n    axes = x.dims.slice(0).map((val, ind) => ind);\n  }\n  axes = ShapeUtil.normalizeAxes(axes, x.dims.length);\n  starts = starts.map((start, ind) => {\n    if (start > x.dims[axes[ind]] - 1) {\n      return x.dims[axes[ind]];\n    }\n    return ShapeUtil.normalizeAxis(start, x.dims[axes[ind]]);\n  });\n  ends = ends.map((end, ind) => {\n    if (end > x.dims[axes[ind]] - 1) {\n      return x.dims[axes[ind]];\n    }\n    return ShapeUtil.normalizeAxis(end, x.dims[axes[ind]]);\n  });\n\n  const outputShape = x.dims.slice();\n\n  const sliceOps: string[] = [];\n  for (let i = 0; i < axes.length; i++) {\n    outputShape[axes[i]] = ends[i] - starts[i];\n    if (starts[i] > 0) {\n      sliceOps.push(`outputIdx[${axes[i]}] += ${starts[i]};`);\n    }  // else { sliceOps.push(`outputIdx[${axes[i]}] += 0;`); }\n  }\n\n  const rank = outputShape.length;\n  const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n  return {\n    inputLayouts: [handler.getOrCreateTextureLayout(x)],\n    outputLayout: handler.createTextureLayoutFromShape(outputShape),\n    samplers: ['A'],\n    shaderSource,\n  };\n}\n\nfunction createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n  const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n  return {\n    inputTextureDatas: inputTDs,\n    outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n    uniformData: {}\n  };\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Softmax} from '../../../ops/softmax';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\n\nexport class WebGLSoftmax extends Softmax {\n  constructor() {\n    super();\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\n      programInfos.forEach((pi) => {\n        const artifact = inferenceHandler.session.programManager.build(pi);\n        this.artifacts.push(artifact);\n      });\n    }\n\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\n    // return only the last output\n    return [runDatas[runDatas.length - 1].outputTextureData.tensor];\n  }\n  createSoftMaxProgramInfo(\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      inferenceHandler: WebGLInferenceHandler, input: Tensor, N: number, D: number,\n      maxElementPerLogicalRow: TextureLayout, normalizationPerLogicalRow: TextureLayout): ProgramInfo {\n    const inputShape = input.dims.slice();\n    const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\n    const outputShape = inputShape;\n    const rank = outputShape.length;\n    const textureWidth = inputLayout.width;\n    const textureHeight = inputLayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n    }\n\n    if (maxElementPerLogicalRow.shape.length !== 1 || normalizationPerLogicalRow.shape.length !== 1) {\n      throw new Error('Dimensionality of the intermediate results should be 1');\n    }\n\n    if (maxElementPerLogicalRow.shape[0] !== N || normalizationPerLogicalRow.shape[0] !== N) {\n      throw new Error('Shape of the intermediate results should be equal to logical row count');\n    }\n\n    const shaderSource = `\n    float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${D};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n    return {\n      inputLayouts: [inputLayout, maxElementPerLogicalRow, normalizationPerLogicalRow],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'Max', 'Norm'],\n      shaderSource,\n      name: 'SoftMax',\n    };\n  }\n\n  /**\n   * Create a texture that contains the normalization factor for each of the 'N' rows\n   */\n  createComputScaleProgramInfo(\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, maxElementPerLogicalRow: TextureLayout,\n      outputShape: number[]): ProgramInfo {\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\n    const rank = outputShape.length;\n    const textureWidth = xlayout.width;\n    const textureHeight = xlayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n    }\n\n    if (outputShape.length !== 1) {\n      throw new Error('Dimensionality of the output should be 1');\n    }\n\n    if (outputShape[0] !== N) {\n      throw new Error('Shape of the output should be equal to logical row count');\n    }\n\n    if (maxElementPerLogicalRow.shape.length !== 1) {\n      throw new Error('Dimensionality of the intermediate results should be 1');\n    }\n\n    if (maxElementPerLogicalRow.shape[0] !== N) {\n      throw new Error('Shape of the intermediate results should be equal to logical row count');\n    }\n\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n    float process(int[${rank}] indices) {\n\n      int logical_row_start_offset = indices[0] * ${D};\n\n      float norm_factor = 0.0;\n      float max = _Max(indices);\n      for(int i=0; i<${D}; ++i)\n      {\n        norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\n        textureWidth}, ${textureHeight}))) - max);\n      }\n\n      return norm_factor;\n    }`;\n    return {\n      inputLayouts: [xlayout, maxElementPerLogicalRow],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'Max'],\n      shaderSource,\n      name: 'ComputScale',\n    };\n  }\n  /**\n   * Create a texture that contains the maximum value of each of the 'N' rows\n   */\n  createComputeMaxProgramInfo(\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, outputShape: number[]): ProgramInfo {\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\n    const rank = outputShape.length;\n    const textureWidth = xlayout.width;\n    const textureHeight = xlayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n    }\n\n    if (outputShape.length !== 1) {\n      throw new Error('Dimensionality of the output should be 1');\n    }\n\n    if (outputShape[0] !== N) {\n      throw new Error('Shape of the output should be equal to logical row count');\n    }\n\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n        float process(int[${rank}] indices) {\n\n          int logical_row_start_offset = indices[0] * ${D};\n\n          float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth}, ${\n        textureHeight} )));\n          for(int i=1; i<${D}; ++i)\n          {\n            float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\n        textureWidth}, ${textureHeight})));\n            if(current > max)\n              max = current;\n          }\n\n          return max;\n        }`;\n    return {\n      inputLayouts: [xlayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n      name: 'ComputeMax',\n    };\n  }\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\n    const inputShape = inputs[0].dims.slice();\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\n    const N = ShapeUtil.sizeToDimension(inputShape, axis);\n    const D = ShapeUtil.sizeFromDimension(inputShape, axis);\n    const computeMaxProgramInfo = this.createComputeMaxProgramInfo(inferenceHandler, inputs[0], N, D, [N]);\n    const computeScaleProgramInfo =\n        this.createComputScaleProgramInfo(inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, [N]);\n    const softMaxProgramInfo = this.createSoftMaxProgramInfo(\n        inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, computeScaleProgramInfo.outputLayout);\n\n    const programInfos: ProgramInfo[] = [computeMaxProgramInfo, computeScaleProgramInfo, softMaxProgramInfo];\n    return programInfos;\n  }\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\n    const dataType = inputs[0].type;\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\n    const runDatas: RunData[] = [];\n    runDatas.push({\n      inputTextureDatas: [inputTD],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\n      uniformData: {}\n    });\n    for (let i = 1; i < programInfos.length; ++i) {\n      runDatas.push({\n        inputTextureDatas: [...runDatas[i - 1].inputTextureDatas, runDatas[i - 1].outputTextureData],\n        outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[i].outputLayout, dataType),\n        uniformData: {}\n      });\n    }\n    return runDatas;\n  }\n  protected artifacts: Artifact[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Split} from '../../../ops/split';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData} from '../types';\n\nexport class WebGLSplit extends Split {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const axis = ShapeUtil.normalizeAxis(this.axis, inputs[0].dims.length);\n      const count = this.getProgramCount(inferenceHandler, inputs, axis);\n      for (let i = 0; i < count; ++i) {\n        const programInfo = this.createProgramInfo(inferenceHandler, inputs[0], axis, i);\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\n        this.artifacts.push(artifact);\n      }\n    }\n    const results: Tensor[] = [];\n\n    this.artifacts.forEach(artifact => {\n      const rundata = this.createRunData(inferenceHandler, artifact.programInfo, inputs);\n      inferenceHandler.session.programManager.run(artifact, rundata);\n      results.push(rundata.outputTextureData.tensor);\n    });\n    return results;\n  }\n  getProgramCount(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): number {\n    const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, this.split, this.numOutputs);\n    return offsets.length;\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, input: Tensor, axis: number, index: number): ProgramInfo {\n    const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, this.split, this.numOutputs);\n    const offset = offsets[index];\n    const outputShape = shapes[index];\n    const rank = outputShape.length;\n    const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }`;\n    return {\n      name: 'WebGLSplit',\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(input)],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n  protected artifacts: Artifact[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Squeeze} from '../../../ops/squeeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {reshape} from './reshape';\n\nexport class WebGLSqueeze extends Squeeze {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.squeezeShape(inputs[0].dims, this.axes);\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Sum} from '../../../ops/sum';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLSum extends Sum implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const outputShape = inputs[0].dims.slice();\n    const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n    const samplers = inputs.map((v, i) => `X${i}`);\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers,\n      shaderSource: `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }`,\n      hasMain: true\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tile} from '../../../ops/tile';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLTile extends Tile implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    const outputShape = new Array(inputShape.length);  // inputs[0].dims.slice();\n\n    const tileOps: string[] = [];\n    for (let i = 0; i < inputShape.length; i++) {\n      outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n      tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n    }\n\n    const rank = outputShape.length;\n    const shaderSource = `\n    float process(int outputIdx[${rank}]) {\n      int inputIdx[${rank}];\n      ${tileOps.join('\\n')}\n      return _A(inputIdx);\n    }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Transpose} from '../../../ops/transpose';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {FunctionType, GlslPositionalFunction} from '../glsl-definitions';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLTranspose extends Transpose implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  getOutputShape(inputShapes: Array<readonly number[]>): readonly number[] {\n    const perm = this.getAdjustedPerm(inputShapes[0]);\n    return ShapeUtil.sortBasedOnPerm(inputShapes[0], perm);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShapes = inputs.map(t => t.dims.slice());\n    const perm = this.getAdjustedPerm(inputShapes[0]);\n    const unpackedOutputShape = this.getOutputShape(inputShapes);\n    const rank = inputs[0].dims.length;\n    // A dims=[${inputs[0].dims.toString()}]\n    // out Dims=[${unpackedOutputShape.toString()}]\n    // based on perm=[${perm.toString()}]\n    const shaderSource = `\n      ${this.getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n    const outputLayout = handler.createTextureLayoutFromShape(unpackedOutputShape, 1, unpackedOutputShape);\n    return {inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])], outputLayout, samplers: ['A'], shaderSource};\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n  getPositionalFunction(handler: WebGLInferenceHandler, inputShape: number[], name?: string): GlslPositionalFunction {\n    const outputShape = this.getOutputShape([inputShape]);\n    if (!name) {\n      name = 'perm';\n    }\n    return {\n      name,\n      body: this.getPermFunctionBody(name, this.getAdjustedPerm(inputShape), outputShape.length),\n      type: FunctionType.Positional,\n      inputShape,\n      outputShape\n    };\n  }\n  protected getAdjustedPerm(inputShape: readonly number[]): number[] {\n    let perm = this.perm;\n    if (perm && perm.length !== inputShape.length) {\n      perm = [...(inputShape.keys())].reverse();\n    }\n    return perm;\n  }\n  protected getPermFunctionBody(name: string, perm: number[], rank: number): string {\n    const reverseFunc = [];\n    reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n    for (let i = 0; i < rank; ++i) {\n      reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n    }\n    reverseFunc.push('\\t}');\n    return reverseFunc.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureLayout} from '../types';\n\nexport class WebGLUint8Encode {\n  runInternal(inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData {\n    const outputShape = input.shape;\n    const [width, height] = inferenceHandler.session.layoutStrategy.computeTextureWH(input.shape);\n    const outputLayout: TextureLayout = {\n      width,\n      height,\n      channels: 4,\n      shape: outputShape,\n      strides: ShapeUtil.computeStrides(outputShape),\n      unpackedShape: outputShape\n    };\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    // TODO: remove this special script. Use graph transformer instead.\n    /**\n     * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n     */\n    const shaderSource = `\n      const float FLOAT_MAX = 1.70141184e38;\n      const float FLOAT_MIN = 1.17549435e-38;\n\n      bool isNaN(float val) {\n        return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n      }\n\n      highp vec4 encodeAsUint8(highp float v) {\n        if (isNaN(v)) {\n          return vec4(255, 255, 255, 255);\n        }\n\n        highp float av = abs(v);\n\n        if(av < FLOAT_MIN) {\n          return vec4(0.0, 0.0, 0.0, 0.0);\n        } else if(v > FLOAT_MAX) {\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n        } else if(v < -FLOAT_MAX) {\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n        }\n\n        highp vec4 c = vec4(0,0,0,0);\n\n        highp float e = floor(log2(av));\n        highp float m = exp2(fract(log2(av))) - 1.0;\n\n        c[2] = floor(128.0 * m);\n        m -= c[2] / 128.0;\n        c[1] = floor(32768.0 * m);\n        m -= c[1] / 32768.0;\n        c[0] = floor(8388608.0 * m);\n\n        highp float ebias = e + 127.0;\n        c[3] = floor(ebias / 2.0);\n        ebias -= c[3] * 2.0;\n        c[2] += floor(ebias) * 128.0;\n\n        c[3] += 128.0 * step(0.0, -v);\n\n        return c / 255.0;\n      }\n\n      void main() {\n        float value = ${glsl.texture2D}(X,TexCoords).r;\n        ${glsl.output} = encodeAsUint8(value);\n      }`;\n    const programInfo =\n        {name: 'Uint8Encode', inputLayouts: [input], outputLayout, samplers: ['X'], shaderSource, hasMain: true};\n    const artifact = inferenceHandler.session.programManager.build(programInfo);\n\n    const encoder = inferenceHandler.session.backend.glContext.getEncoder('byte', 4);\n    const texture =\n        inferenceHandler.session.backend.glContext.allocateTexture(outputLayout.width, outputLayout.height, encoder);\n    const outputTextureData = inferenceHandler.createSharedTextureData(outputLayout, 'uint8', texture);\n    const runData = {inputTextureDatas: [input], outputTextureData, uniformData: {}};\n\n    inferenceHandler.session.programManager.run(artifact, runData);\n    return runData.outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {UnaryOp} from '../../../ops/unary-op';\nimport {Tensor} from '../../../tensor';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLUnaryOp extends UnaryOp implements WebGLOperator {\n  constructor(protected typeConstraint: readonly Tensor.DataType[], protected glslFunc: GlslValueFunction) {\n    super(typeConstraint);\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const inputLayout = handler.session.pack ?\n        handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true) :\n        handler.getOrCreateTextureLayout(inputs[0]);\n\n    const outputLayout = handler.session.pack ?\n        handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}) :\n        handler.createTextureLayoutFromShape(outputShape);\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      ${this.glslFunc.body}\n      void main() {\n        vec4 v = ${glsl.texture2D}(A, TexCoords);\n        v = ${this.glslFunc.name}(v);\n        ${glsl.output} = v;\n      }\n      `;\n\n    if (handler.session.pack) {\n      return {\n        inputLayouts: [inputLayout],\n        outputLayout,\n        samplers: ['A'],\n        shaderSource,\n        hasMain: true,\n        expectPackedInputs: true,\n        expectPackedOutputs: true\n      };\n    } else {\n      return {inputLayouts: [inputLayout], outputLayout, samplers: ['A'], shaderSource, hasMain: true};\n    }\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTD = handler.session.pack ?\n        handler.getOrCreateTextureData(inputs[0], handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true)) :\n        handler.getOrCreateTextureData(inputs[0]);\n    return {\n      inputTextureDatas: [inputTD],\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTD.tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity_';\n  const body = `\n  float ${name}(float a) {\n    return a;\n  }\n  vec4 ${name}(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg_';\n  const body = `\n  float ${name}(float a) {\n    return -a;\n  }\n  vec4 ${name}(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not_';\n  const body = `\n  float ${name}(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}(bool a) {\n    return !a;\n  }\n  vec4 ${name}(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu_';\n  const body = `\n  float ${name}(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid_';\n  const body = `\n  float ${name}(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh_';\n  const body = `\n  float ${name}(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a) {\n    return ${fname}(a);\n  }\n  vec4 ${name}(vec4 v) {\n    return ${fname}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {getCoordsDataType} from '../utils';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nexport class WebGLUnpack implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (inputs.length !== 1) {\n      throw new Error('Pack kernel should have input tensor count to 1.');\n    }\n\n    const inputTexture = handler.getTextureData(inputs[0].dataId, true);\n    if (!inputTexture) {\n      throw new Error('packed input texture must exist');\n    }\n\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true);\n    const isScalar = (inputLayout.unpackedShape.length === 0);\n    const outputLayout = handler.createTextureLayoutFromShape(inputTexture.unpackedShape);\n    const outputShape = outputLayout.shape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const innerDims = channels.slice(-2);\n    const coordsDataType = getCoordsDataType(rank);\n    const unpackChannel = unpackFromChannel();\n    const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n      // Sample the texture with the coords to get the rgba channel value.\n      vec4 packedInput = getA(${sourceCoords});\n\n      ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n    }\n  `;\n\n    return {\n      name: 'WebGLUnpack',\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true)],\n      outputLayout,\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: true,\n      expectPackedOutputs: false,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0], true)];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Unsqueeze} from '../../../ops/unsqueeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {reshape} from './reshape';\n\nexport class WebGLUnsqueeze extends Unsqueeze {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.unsqueezeShape(inputs[0].dims, this.axes);\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Upsample} from '../../../ops/upsample';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLUpsample extends Upsample implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0]);\n    const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * this.scales[i]));\n    const outputLayout = handler.createTextureLayoutFromShape(outputShape);\n    const dim = outputShape.length;\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n\n    const outputPitches = new Array<number>(dim);\n    const inputPitches = new Array<number>(dim);\n    let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n    for (let d = dim - 1; d >= 0; d--) {\n      outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n      inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n      precalculatedPitches += `\n      output_pitches[${d}] = ${outputPitches[d]};\n      input_pitches[${d}] = ${inputPitches[d]};\n      `;\n    }\n    const getInputFloatFunction = `\n    float getInputFloat(int index) {\n      vec2 coords = offsetToCoords(index, ${inputLayout.width}, ${inputLayout.height});\n      float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n      return value;\n    }\n    `;\n\n    const shaderSource = this.mode === 'nearest' ?\n        // nearest\n        `\n      ${getInputFloatFunction}\n      float process(int indices[${dim}]) {\n        int input_index = 0;\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n        ${precalculatedPitches}\n\n        int d, m;\n        for (int dim = 0; dim < ${dim}; ++dim) {\n          d = output_index / output_pitches[dim];\n          m = output_index - d * output_pitches[dim];\n          output_index = m;\n\n          if (scales[dim] != 1 && d > 0) {\n            int d2 = d / scales[dim];\n            m = d - d2 * scales[dim];\n            d = d2;\n          }\n          input_index += input_pitches[dim] * d;\n        }\n\n        return getInputFloat(input_index);\n      }` :\n        dim === 4 ?\n        // bilinear 4D\n            `\n      ${getInputFloatFunction}\n      float process(int indices[4]) {\n        int input_index = 0;\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n        ${precalculatedPitches}\n\n        int m;\n        int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n        index_of_dim0 = output_index / output_pitches[0];\n        m = output_index - index_of_dim0 * output_pitches[0];\n        index_of_dim1 = m / output_pitches[1];\n        m = m - index_of_dim1 * output_pitches[1];\n        index_of_dim2 = m / output_pitches[2];\n        m = m - index_of_dim2 * output_pitches[2];\n        index_of_dim3 = m;\n\n        int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n        index_of_input_dim2 = index_of_dim2 / scales[2];\n        y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n        index_of_input_dim3 = index_of_dim3 / scales[3];\n        x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n        input_index = index_of_dim0 * input_pitches[0] +\n                      index_of_dim1 * input_pitches[1] +\n                      index_of_input_dim2 * input_pitches[2] +\n                      index_of_input_dim3;\n\n        float x00 = getInputFloat(input_index);\n        float x10, x01, x11;\n\n        bool end_of_dim2 = false;\n        if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n          // It's the end in dimension 2\n          x01 = x00;\n          end_of_dim2 = true;\n        } else {\n          x01 = getInputFloat(input_index + input_pitches[2]);\n        }\n\n        if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n          // It's the end in dimension 3\n          x10 = x00;\n          x11 = x01;\n        }\n        else {\n          x10 = getInputFloat(input_index + 1);\n          x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n        }\n\n        float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n        float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n        return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n      }` :\n            // bilinear 2D\n            `\n      ${getInputFloatFunction}\n      float process(int indices[2]) {\n        int input_index = 0;\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n        ${precalculatedPitches}\n\n        int m;\n        int index_of_dim0, index_of_dim1;\n        index_of_dim0 = output_index / output_pitches[0];\n        m = output_index - index_of_dim0 * output_pitches[0];\n        index_of_dim1 = m;\n\n        int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n        index_of_input_dim0 = index_of_dim0 / scales[0];\n        y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n        index_of_input_dim1 = index_of_dim1 / scales[1];\n        x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n        input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n        float x00 = getInputFloat(input_index);\n        float x10, x01, x11;\n\n        bool end_of_dim0 = false;\n        if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n          // It's the end in dimension 0\n          x01 = x00;\n          end_of_dim0 = true;\n        } else {\n          x01 = getInputFloat(input_index + input_pitches[0]);\n        }\n\n        if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n          // It's the end in dimension 1\n          x10 = x00;\n          x11 = x01;\n        }\n        else {\n          x10 = getInputFloat(input_index + 1);\n          x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n        }\n\n        float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n        float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n        return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n      }`;\n    return {\n      inputLayouts: [inputLayout],\n      outputLayout,\n      samplers: ['X'],\n      shaderSource,\n      variables: [{name: 'scales', type: 'int', arrayLength: this.scales.length}]\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {scales: this.scales.map(x => Math.ceil(x))}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, RunData, TextureData, UniformData, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, runData: RunData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(runData.outputTextureData);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, runData.uniformData, runData.inputTextureDatas);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.doDraw(buildArtifact, runData);\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.samplers, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected doDraw(artifact: Artifact, runData: RunData): void {\n    if (runData.draw) {\n      Logger.verbose('ProgramManager', 'Custom draw function');\n      runData.draw(this.glContext, artifact);\n    } else {\n      this.glContext.draw();\n    }\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, uniformData: UniformData, textures: TextureData[]): void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, uniformData[name] as number[]);\n          } else {\n            gl.uniform1f(location, uniformData[name] as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, uniformData[name] as number[]);\n          } else {\n            gl.uniform1i(location, uniformData[name] as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData, WebGLOperator} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  packOpCache: Map<string, WebGLOperator>;\n  unpackOpCache: Map<string, WebGLOperator>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.packOpCache = new Map();\n    this.unpackOpCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    op.initialize(node.attributes, node, graph);\n    return op;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\nfunction createCanvas(): HTMLCanvasElement {\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const execNodeFn = async () => {\n          const op = thisOp.op;\n          if (!op.checkInputs(inputTensors)) {\n            throw new Error(`invalid inputs detected; op: ${thisOp.node.name}`);\n          }\n\n          const result = op.run(inferenceHandler, inputTensors);\n\n          return result;\n        };\n\n        const outputList = await this.profiler.event('node', thisOp.node.name, execNodeFn);\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      this.graph.getOutputIndices().forEach((outputIndex) => {\n        const thisValue = this._values[outputIndex];\n        if (thisValue === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        // eslint-disable-next-line no-unused-expressions\n        thisValue.data;\n        output.push(thisValue);\n      });\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\nimport {Tensor} from './tensor';\nimport {LongUtil, ProtoUtil} from './util';\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has only one input and the first output connected to other nodes\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.inputs.length > 1) {\n      throw new Error('Node deletion with multiple inputs is not supported. ');\n    }\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          node.attributes.set('__internal_activation', 'string', (this._nodes[next[0]].opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\nimport {LongUtil} from './util';\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport interface Operator {\n  initialize(attributes: Attribute, node: Graph.Node, graph: Graph): void;\n  checkInputs(inputs: Tensor[]): boolean;\n  run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\n// currently this operator supports ONLY 'test' mode\n// inputs/outputs and parameters will reflect that\n// the operator implementation only supports test mode\nexport abstract class BatchNormalization implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\n    this.momentum = attributes.getFloat('momentum', 0.9);\n    this.spatial = attributes.getInt('spatial', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 5) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n    const mean = inputs[3];\n    const var_ = inputs[4];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs can have only one dimensions\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n        var_.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n        var_.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n        (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n        (var_.type !== 'float32' && var_.type !== 'float64')) {\n      return false;\n    }\n    return true;\n  }\n\n  protected epsilon: number;\n  protected momentum: number;\n  protected spatial: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class BinaryOp implements Operator {\n  constructor(\n      protected typeConstraint: readonly Tensor.DataType[], protected opType?: string,\n      protected resultType?: Tensor.DataType) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[0].type !== inputs[1].type) {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Clip implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.min = attributes.getFloat('min', -3.4028234663852886e+38);\n    this.max = attributes.getFloat('max', 3.4028234663852886e+38);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected min: number;\n  protected max: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Concat implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length < 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const inputType = inputs[0].type;\n    const inputDimensionality = inputs[0].dims.length;\n\n    // TODO: Support string concat\n    if (inputType === 'string') {\n      return false;\n    }\n\n    for (const input of inputs) {\n      // make sure types of all inputs match\n      if (input.type !== inputType) {\n        return false;\n      }\n\n      // make sure the dimensionality of all inputs are the same\n      if (input.dims.length !== inputDimensionality) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Conv implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.dilations = attributes.getInts('dilations', [1, 1]);\n    this.group = attributes.getInt('group', 1);\n    this.kernelShape = attributes.getInts('kernel_shape', []);\n    this.pads = attributes.getInts('pads', [0, 0, 0, 0]);\n    this.strides = attributes.getInts('strides', [1, 1]);\n    this.activation = attributes.getString('__internal_activation', '');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    // Refer to the below link for all input checks\n    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n    if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n      return false;\n    }\n\n    // TODO : Need to add support for multi-dimensional conv\n    // currently only support 2-dimensional conv\n    if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n      return false;\n    }\n\n    // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n    const dataChannel = inputs[0].dims[1];\n    const filterInChannel = inputs[1].dims[1] * this.group;\n    if (dataChannel !== filterInChannel) {\n      return false;\n    }\n\n    // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n    if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n      return false;\n    }\n\n    const spatialRank = inputs[0].dims.length - 2;\n    // wrong dilations dimension\n    if (this.dilations.length !== spatialRank) {\n      return false;\n    }\n\n    // Wrong strides dimension\n    if (this.strides.length !== spatialRank) {\n      return false;\n    }\n\n    // Wrong pads dimension\n    if (this.pads.length !== spatialRank * 2) {\n      return false;\n    }\n\n    // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n    // (the first 2 dims are batch_size and channels)\n    if (this.kernelShape.length !== 0 && this.kernelShape.length !== inputs[1].dims.length - 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO : Need to add support for float64\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n      return false;\n    }\n\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected autoPad: string;\n  protected dilations: number[];\n  protected group: number;\n  protected kernelShape: number[];\n  protected pads: number[];\n  protected strides: number[];\n  protected activation: string;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class DepthToSpace implements Operator {\n  constructor() {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    // processing node attributes\n    this.blocksize = attributes.getInt('blocksize');\n    if (this.blocksize < 1) {\n      throw new Error(`blocksize must be >= 1, but got : ${this.blocksize} for DepthToSpace`);\n    }\n    this.blocksizeSqr = this.blocksize * this.blocksize;\n    this.mode = attributes.getString('mode', 'DCR');\n    if (DepthToSpace.supportedModes.indexOf(this.mode) < 0) {\n      throw new Error(`unrecognized mode: ${this.mode} for DepthToSpace`);\n    }\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const inputType = inputs[0].type;\n    const inputDimensionality = inputs[0].dims.length;\n\n    // Input has to be a 4-D tensor\n    // TODO: Support string depth-to-space.\n    if (inputType === 'string' || inputDimensionality !== 4) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected mode: string;\n  protected blocksize: number;\n  protected blocksizeSqr: number;\n\n  private static readonly supportedModes = ['DCR', 'CRD'];\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Dropout implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.ratio = attributes.getFloat('ratio', 0.5);\n    this.testMode = true;  // this is a hack to reflect that test mode is hardcoded\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected ratio: number;\n  protected testMode: boolean;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Elu implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.alpha = attributes.getFloat('alpha', 1.0);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected alpha: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Flatten implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 1);  // default axis is 1\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    const r = inputs[0].dims.length;\n    if (r === 0) {\n      return false;  // scalar tensor is not supported\n    }\n\n    if (this.axis < -r || this.axis > r) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Gather implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 0);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n    const tensorRank = inputs[0].dims.length;\n    if (tensorRank < 1) {\n      return false;\n    }\n    if (this.axis < -tensorRank || this.axis > tensorRank - 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n      return false;\n    }\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Gemm implements Operator {\n  constructor(isOptionalC: boolean) {\n    this.isOptionalC = isOptionalC;\n  }\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.transA = attributes.getInt('transA', 0) !== 0;\n    this.transB = attributes.getInt('transB', 0) !== 0;\n    this.alpha = attributes.getFloat('alpha', 1);\n    this.beta = attributes.getFloat('beta', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs) {\n      return false;\n    }\n    if (this.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n      return false;\n    }\n    if (!this.isOptionalC && inputs.length !== 3) {\n      return false;\n    }\n\n    // 'C' can be of dimensionality 1 or 2 only\n    if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n        (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n        (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n      return false;\n    }\n\n    if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected transA: boolean;\n  protected transB: boolean;\n  protected alpha: number;\n  protected beta: number;\n\n  protected isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class ImageScaler implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.scale = attributes.getFloat('scale');\n    this.bias = attributes.getFloats('bias');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    if (inputs[0].dims.length !== 4) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected scale: number;\n  protected bias: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class InstanceNormalization implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 3) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs can have only one dimensions\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n        (B.type !== 'float32' && B.type !== 'float64')) {\n      return false;\n    }\n    return true;\n  }\n\n  protected epsilon: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class LeakyRelu implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.alpha = attributes.getFloat('alpha', 0.01);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected alpha: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class MatMul implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.activation = attributes.getString('__internal_activation', '');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n\n    if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    if (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') {\n      return false;\n    }\n\n    if (inputs[0].type !== inputs[1].type) {\n      return false;\n    }\n\n    return true;\n  }\n  protected activation: string;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Pad implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.mode = attributes.getString('mode', 'constant');\n    this.value = attributes.getFloat('value', 0.0);\n    this.pads = attributes.getInts('pads');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected mode: string;\n  protected pads: number[];\n  protected value: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nclass PoolBase {\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected autoPad: string;\n  protected ceilMode: number;\n  protected countIncludePad: boolean;\n  protected kernelShape: number[];\n  protected strides: number[];\n  protected pads: number[];\n}\n\nexport abstract class AveragePool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.kernelShape = attributes.getInts('kernel_shape');\n    this.strides = attributes.getInts('strides', []);\n    this.pads = attributes.getInts('pads', []);\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\n\n    // TODO: support attribute 'ceil_mode'\n    if (this.ceilMode !== 0) {\n      throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n    }\n  }\n}\n\nexport abstract class GlobalAveragePool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n  }\n}\n\nexport abstract class MaxPool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.kernelShape = attributes.getInts('kernel_shape');\n    this.strides = attributes.getInts('strides', []);\n    this.pads = attributes.getInts('pads', []);\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\n    this.storageOrder = attributes.getInt('storage_order', 0);\n\n    // TODO: support attribute 'ceil_mode' and 'storage_order'\n    if (this.storageOrder !== 0) {\n      throw new Error('column major storage order is not yet supported for MaxPool');\n    }\n    if (this.ceilMode !== 0) {\n      throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n    }\n  }\n\n  protected storageOrder: number;\n}\n\nexport abstract class GlobalMaxPool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class ReduceBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes', []);\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n  protected keepDims: boolean;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Reshape implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2 || inputs[1].dims.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    if (inputs[1].type !== 'int32') {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Shape implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Slice implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.starts = attributes.getInts('starts');\n    this.ends = attributes.getInts('ends');\n    this.axes = attributes.getInts('axes', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    return true;\n  }\n\n  protected axes: number[];\n  protected ends: number[];\n  protected starts: number[];\n}\n\nexport abstract class SliceV10 implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length < 3 || inputs.length > 5) {\n      return false;\n    }\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n      return false;\n    }\n    if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n      return false;\n    }\n    if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n      return false;\n    }\n    if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Softmax implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Split implements Operator {\n  constructor(protected numOutputs?: number) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 0);\n    this.split = attributes.getInts('split', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n        inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n        inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected split: number[];\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Squeeze implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Sum implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length === 0) {\n      return false;\n    }\n\n    const length = inputs[0].dims.length;\n    for (let i = 1; i < inputs.length; i++) {\n      if (length !== inputs[i].dims.length) {\n        return false;\n      }\n\n      for (let j = 0; j < length; j++) {\n        if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n          return false;\n        }\n      }\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n    for (let i = 1; i < inputs.length; i++) {\n      if (inputs[0].type !== inputs[i].type) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Tile implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n    if (inputs[1].dims.length !== 1) {\n      return false;\n    }\n    if (inputs[1].dims[0] !== inputs[0].dims.length) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Transpose implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.perm = attributes.getInts('perm', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected perm: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class UnaryOp implements Operator {\n  constructor(protected typeConstraint: readonly Tensor.DataType[], protected resultType?: Tensor.DataType) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Unsqueeze implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Graph} from '../graph';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Upsample implements Operator {\n  constructor(protected opset: number) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute, _node: Graph.Node, _graph: Graph): void {\n    this.isResize = (this.opset >= 10);\n\n    // processing node attributes\n    this.mode = attributes.getString('mode', 'nearest');\n    if (this.mode !== 'nearest' && this.mode !== 'linear' && (this.opset < 11 || this.mode !== 'cubic')) {\n      throw new Error(`unrecognized mode: ${this.mode}`);\n    }\n\n    if (this.opset < 9) {\n      this.scales = attributes.getFloats('scales');\n      scalesValidataion(this.scales, this.mode, this.isResize);\n    }\n\n    this.extrapolationValue = attributes.getFloat('extrapolation_value', 0.0);\n\n    this.coordinateTransformMode =\n        this.opset > 10 ? attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n    if ([\n          'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize',\n          'half_pixel'\n        ].indexOf(this.coordinateTransformMode) === -1) {\n      throw new Error(`coordinate_transform_mode '${this.coordinateTransformMode}' is not supported`);\n    }\n    this.useExtrapolation = this.needRoiInput = (this.coordinateTransformMode === 'tf_crop_and_resize');\n\n    this.nearestMode =\n        (this.mode === 'nearest' && this.opset >= 11) ? attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n    if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(this.nearestMode) === -1) {\n      throw new Error(`nearest_mode '${this.nearestMode}' is not supported`);\n    }\n\n    this.cubicCoefficientA = attributes.getFloat('cubic_coeff_a', -0.75);\n    this.excludeOutside = attributes.getInt('exclude_outside', 0) !== 0;\n    if (this.excludeOutside && this.mode !== 'cubic') {\n      throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n    }\n\n    this.useNearest2xOptimization = (this.opset < 11) ?\n        true :\n        (this.mode === 'nearest' && this.coordinateTransformMode === 'asymmetric' && this.nearestMode === 'floor');\n\n    if (this.opset > 10) {\n      this.roiInputIdx = 1;\n      this.scalesInputIdx = 2;\n      this.sizesInputIdx = 3;\n    } else if (this.opset === 9) {\n      this.scalesInputIdx = 1;\n    }\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || (this.opset < 9 && inputs.length !== 1) ||\n        (this.opset >= 9 && this.opset < 11 && inputs.length !== 2) ||\n        (this.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\n      return false;\n    }\n\n    if (this.scales && inputs[0].dims.length !== this.scales.length) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected prepareInputs(inputs: Tensor[]): [number[], number[], readonly number[]] {\n    const x = inputs[0];\n    const xDims = x.dims;\n\n    // get roi data\n    let roi = this.roi;\n    if (!roi) {\n      if (this.needRoiInput) {\n        if (this.roiInputIdx <= 0) {\n          throw new Error('Invalid roi input index.');\n        }\n        roi = parseRoiData(inputs[this.roiInputIdx]);\n      } else {\n        roi = new Array(xDims.length * 2).fill(0);\n      }\n    }\n\n    let scales = this.scales;\n    let outputSizes: number[]|undefined;\n    if (!scales) {\n      const scalesTensor = inputs[this.scalesInputIdx];\n      if (scalesTensor && scalesTensor.size !== 0) {\n        if (inputs[this.sizesInputIdx]) {\n          throw new Error('Only one of scales or sizes must be provided as input.');\n        }\n        scales = parseScalesData(scalesTensor, this.mode, this.isResize);\n      } else {\n        const sizesTensor = inputs[this.sizesInputIdx];\n        if (!sizesTensor || sizesTensor.size === 0) {\n          throw new Error('Either scales or sizes MUST be provided as input.');\n        }\n\n        outputSizes = Array.from(sizesTensor.integerData);\n        scales = parseScalesDataFromOutputSize(outputSizes, xDims, this.mode, this.isResize);\n      }\n    } else {\n      if (inputs[this.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n    }\n\n    const yDims = outputSizes || computeOutputShape(scales, xDims);\n\n    return [roi, scales, yDims];\n  }\n\n  protected isResize: boolean;\n  protected mode: string;\n  protected scales: number[];\n  protected extrapolationValue: number;\n  protected coordinateTransformMode: string;\n  protected useExtrapolation: boolean;\n  protected needRoiInput: boolean;\n  protected nearestMode: string;\n  protected cubicCoefficientA: number;\n  protected excludeOutside: boolean;\n  protected useNearest2xOptimization: boolean;\n  protected roiInputIdx: number;\n  protected scalesInputIdx: number;\n  protected sizesInputIdx: number;\n  protected roi: number[];\n}\n\nfunction scalesValidataion(scales: number[], mode: string, isResize: boolean) {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') or 4-D inputs\\\nwith the corresponding outermost 2 scale values being 1 in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n}\n\nexport function parseRoiData(roi: Tensor): number[] {\n  return roi.size > 0 ? Array.from(roi.floatData) : [];\n}\n\nexport function parseScalesData(scale: Tensor, mode: string, isResize: boolean): number[] {\n  const scales = Array.from(scale.floatData);\n  scalesValidataion(scales, mode, isResize);\n  return scales;\n}\n\nexport function parseScalesDataFromOutputSize(\n    yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] {\n  const length = xDims.length;\n  const scales = new Array<number>(length);\n\n  for (let i = 0, end = length; i < end; i++) {\n    if (xDims[i] === 0) {\n      if (yDims[i] !== 0) {\n        throw new Error('Input dim is zero but required output dim is non-zero.');\n      }\n      scales[i] = 1;\n    } else {\n      scales[i] = yDims[i] / xDims[i];\n    }\n  }\n  scalesValidataion(scales, mode, isResize);\n  return scales;\n}\n\nexport function computeOutputShape(scales: readonly number[], inputDims: readonly number[]): number[] {\n  return inputDims.map((dim, i) => Math.floor(dim * scales[i]));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {Operator} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  interface OperatorConstructor {\n    (node: Graph.Node): Operator;\n  }\n\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml';\n\n  /**\n   * A resolve rule consists of 4 items: opType, opSetDomain, versionSelector and operatorConstructor\n   */\n  type ResolveRule = [string, Domain, string, OperatorConstructor];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opConstructor = rule[3];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return opConstructor(node);\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(Buffer.from(buf), isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nimport {ProtoUtil, ShapeUtil} from './util';\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    // TBD: This function is designed for usage when any backend data provider offers a way to retrieve data in an\n    //      asynchronous way. should implement this function when enabling webgl async read data.\n\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        const buf = Buffer.from(str.buffer, str.byteOffset, str.byteLength);\n        value.data[i] = buf.toString();\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  static longToNumber(n: Long|flatbuffers.Long|number) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: true}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(\n      originalDims: readonly number[], shapeHints: number[]|readonly number[]|Tensor.IntegerType): readonly number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: number[], dilations: number[], kernelShape: number[], pads: number[],\n      autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], kernelShape: number[], pads: number[],\n      autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    // TODO: support dilations for pool operators\n    const dilations = new Array<number>(kernelShape.length).fill(1);\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\nimport {env, InferenceSession, SessionHandler, Tensor, TypedTensor} from 'onnxruntime-common';\n\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nlet ortInit: boolean;\n\nconst tensorDataTypeStringToEnum = (type: string): onnx.TensorProto.DataType => {\n  switch (type) {\n    case 'int8':\n      return onnx.TensorProto.DataType.INT8;\n    case 'uint8':\n      return onnx.TensorProto.DataType.UINT8;\n    case 'bool':\n      return onnx.TensorProto.DataType.BOOL;\n    case 'int16':\n      return onnx.TensorProto.DataType.INT16;\n    case 'uint16':\n      return onnx.TensorProto.DataType.UINT16;\n    case 'int32':\n      return onnx.TensorProto.DataType.INT32;\n    case 'uint32':\n      return onnx.TensorProto.DataType.UINT32;\n    case 'float32':\n      return onnx.TensorProto.DataType.FLOAT;\n    case 'float64':\n      return onnx.TensorProto.DataType.DOUBLE;\n    case 'string':\n      return onnx.TensorProto.DataType.STRING;\n    case 'int64':\n      return onnx.TensorProto.DataType.INT64;\n    case 'uint64':\n      return onnx.TensorProto.DataType.UINT64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: onnx.TensorProto.DataType): Tensor.Type => {\n  switch (typeProto) {\n    case onnx.TensorProto.DataType.INT8:\n      return 'int8';\n    case onnx.TensorProto.DataType.UINT8:\n      return 'uint8';\n    case onnx.TensorProto.DataType.BOOL:\n      return 'bool';\n    case onnx.TensorProto.DataType.INT16:\n      return 'int16';\n    case onnx.TensorProto.DataType.UINT16:\n      return 'uint16';\n    case onnx.TensorProto.DataType.INT32:\n      return 'int32';\n    case onnx.TensorProto.DataType.UINT32:\n      return 'uint32';\n    case onnx.TensorProto.DataType.FLOAT:\n      return 'float32';\n    case onnx.TensorProto.DataType.DOUBLE:\n      return 'float64';\n    case onnx.TensorProto.DataType.STRING:\n      return 'string';\n    case onnx.TensorProto.DataType.INT64:\n      return 'int32';\n    case onnx.TensorProto.DataType.UINT64:\n      return 'uint32';\n\n    default:\n      throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionHandle: number;\n\n  inputNames: string[];\n  private inputNamesUTF8Encoded: number[];\n  outputNames: string[];\n  private outputNamesUTF8Encoded: number[];\n\n  loadModel(model: Uint8Array, options?: InferenceSession.SessionOptions): void {\n    const wasm = getInstance();\n    if (!ortInit) {\n      const errorCode = wasm._OrtInit(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      if (errorCode !== 0) {\n        throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n      }\n      ortInit = true;\n    }\n\n    const modelDataOffset = wasm._malloc(model.byteLength);\n    let sessionOptionsHandle = 0;\n    let allocs: number[] = [];\n\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n      wasm.HEAPU8.set(model, modelDataOffset);\n      this.sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\n      if (this.sessionHandle === 0) {\n        throw new Error('Can\\'t create a session');\n      }\n    } finally {\n      wasm._free(modelDataOffset);\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n      allocs.forEach(wasm._free);\n    }\n\n    const inputCount = wasm._OrtGetInputCount(this.sessionHandle);\n    const outputCount = wasm._OrtGetOutputCount(this.sessionHandle);\n\n    this.inputNames = [];\n    this.inputNamesUTF8Encoded = [];\n    this.outputNames = [];\n    this.outputNamesUTF8Encoded = [];\n    for (let i = 0; i < inputCount; i++) {\n      const name = wasm._OrtGetInputName(this.sessionHandle, i);\n      if (name === 0) {\n        throw new Error('Can\\'t get an input name');\n      }\n      this.inputNamesUTF8Encoded.push(name);\n      this.inputNames.push(wasm.UTF8ToString(name));\n    }\n    for (let i = 0; i < outputCount; i++) {\n      const name = wasm._OrtGetOutputName(this.sessionHandle, i);\n      if (name === 0) {\n        throw new Error('Can\\'t get an output name');\n      }\n      this.outputNamesUTF8Encoded.push(name);\n      this.outputNames.push(wasm.UTF8ToString(name));\n    }\n  }\n\n  async dispose(): Promise<void> {\n    const wasm = getInstance();\n    if (this.inputNamesUTF8Encoded) {\n      this.inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n      this.inputNamesUTF8Encoded = [];\n    }\n    if (this.outputNamesUTF8Encoded) {\n      this.outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n      this.outputNamesUTF8Encoded = [];\n    }\n    if (this.sessionHandle) {\n      wasm._OrtReleaseSession(this.sessionHandle);\n      this.sessionHandle = 0;\n    }\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const wasm = getInstance();\n\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n\n    let runOptionsHandle = 0;\n    let runOptionsAllocs: number[] = [];\n\n    const inputValues: number[] = [];\n    const inputAllocs: number[] = [];\n\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n      // create input tensors\n      for (let i = 0; i < inputCount; i++) {\n        const data = inputArray[i].data;\n\n        let dataOffset: number;\n        let dataByteLength: number;\n\n        if (Array.isArray(data)) {\n          // string tensor\n          dataByteLength = 4 * data.length;\n          dataOffset = wasm._malloc(dataByteLength);\n          inputAllocs.push(dataOffset);\n          let dataIndex = dataOffset / 4;\n          for (let i = 0; i < data.length; i++) {\n            if (typeof data[i] !== 'string') {\n              throw new TypeError(`tensor data at index ${i} is not a string`);\n            }\n            wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n          }\n        } else {\n          dataByteLength = data.byteLength;\n          dataOffset = wasm._malloc(dataByteLength);\n          inputAllocs.push(dataOffset);\n          wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n        }\n\n        const dims = inputArray[i].dims;\n\n        const stack = wasm.stackSave();\n        const dimsOffset = wasm.stackAlloc(4 * dims.length);\n        try {\n          let dimIndex = dimsOffset / 4;\n          dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n          const tensor = wasm._OrtCreateTensor(\n              tensorDataTypeStringToEnum(inputArray[i].type), dataOffset, dataByteLength, dimsOffset, dims.length);\n          if (tensor === 0) {\n            throw new Error('Can\\'t create a tensor');\n          }\n          inputValues.push(tensor);\n        } finally {\n          wasm.stackRestore(stack);\n        }\n      }\n\n      const beforeRunStack = wasm.stackSave();\n      const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n      const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n      const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n      const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n      try {\n        let inputValuesIndex = inputValuesOffset / 4;\n        let inputNamesIndex = inputNamesOffset / 4;\n        let outputValuesIndex = outputValuesOffset / 4;\n        let outputNamesIndex = outputNamesOffset / 4;\n        for (let i = 0; i < inputCount; i++) {\n          wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n          wasm.HEAPU32[inputNamesIndex++] = this.inputNamesUTF8Encoded[inputIndices[i]];\n        }\n        for (let i = 0; i < outputCount; i++) {\n          wasm.HEAPU32[outputValuesIndex++] = 0;\n          wasm.HEAPU32[outputNamesIndex++] = this.outputNamesUTF8Encoded[outputIndices[i]];\n        }\n\n        // support RunOptions\n        let errorCode = wasm._OrtRun(\n            this.sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n            outputValuesOffset, runOptionsHandle);\n\n        const output: {[name: string]: Tensor} = {};\n\n        if (errorCode === 0) {\n          for (let i = 0; i < outputCount; i++) {\n            const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n            const beforeGetTensorDataStack = wasm.stackSave();\n            // stack allocate 4 pointer value\n            const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n            let type: Tensor.Type|undefined, dataOffset = 0;\n            try {\n              errorCode = wasm._OrtGetTensorData(\n                  tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n              if (errorCode !== 0) {\n                throw new Error(`Can't get a tensor data. error code = ${errorCode}`);\n              }\n              let tensorDataIndex = tensorDataOffset / 4;\n              const dataType = wasm.HEAPU32[tensorDataIndex++];\n              dataOffset = wasm.HEAPU32[tensorDataIndex++];\n              const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n              const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n              const dims = [];\n              for (let i = 0; i < dimsLength; i++) {\n                dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n              }\n              wasm._OrtFree(dimsOffset);\n\n              const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n              type = tensorDataTypeEnumToString(dataType);\n              if (type === 'string') {\n                const stringData: string[] = [];\n                let dataIndex = dataOffset / 4;\n                for (let i = 0; i < size; i++) {\n                  const offset = wasm.HEAPU32[dataIndex++];\n                  const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                  stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                }\n                output[this.outputNames[outputIndices[i]]] = new Tensor('string', stringData, dims);\n              } else {\n                const typedArray = numericTensorTypeToTypedArray(type);\n                const t = new Tensor(type, new typedArray(size), dims) as TypedTensor<Exclude<Tensor.Type, 'string'>>;\n                new Uint8Array(t.data.buffer, t.data.byteOffset, t.data.byteLength)\n                    .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + t.data.byteLength));\n                output[this.outputNames[outputIndices[i]]] = t;\n              }\n            } finally {\n              wasm.stackRestore(beforeGetTensorDataStack);\n              if (type === 'string' && dataOffset) {\n                wasm._free(dataOffset);\n              }\n              wasm._OrtReleaseTensor(tensor);\n            }\n          }\n        }\n\n        if (errorCode === 0) {\n          return output;\n        } else {\n          throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n        }\n      } finally {\n        wasm.stackRestore(beforeRunStack);\n      }\n    } finally {\n      inputValues.forEach(wasm._OrtReleaseTensor);\n      inputAllocs.forEach(wasm._free);\n\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n      runOptionsAllocs.forEach(wasm._free);\n    }\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    // TODO: implement profiling\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    // TODO: Support profiling\n    sessionOptions.enableProfiling = false;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        sessionOptions.enableProfiling, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    if (options?.executionProviders) {\n      const eps = options.executionProviders;\n      const epsNames = eps.map(i => typeof i === 'string' ? i : i.name);\n      if (epsNames.indexOf('webnn') !== -1) {\n        if (wasm._OrtSessionOptionsAppendExecutionProviderWebNN(sessionOptionsHandle, 0) !== 0) {\n          throw new Error(`Can't append WebNN execution provider`);\n        }\n      }\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactoryThreaded from './binding/ort-wasm-threaded.js';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nlet wasm: OrtWasmModule;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    if ((typeof process !== 'undefined') &&\n        (typeof process.versions !== 'undefined') &&\n        (typeof process.versions.node !== 'undefined')) {\n      throw Error('Threads is not supported in Node.js');\n    }\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n    return WebAssembly.validate(new Uint8Array(\n        [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]));\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const initializeWebAssembly = async(): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = env.wasm.initTimeout!;\n  const numThreads = env.wasm.numThreads!;\n  const simd = env.wasm.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {};\n\n    if (!useThreads) {\n      config.locateFile = (fileName: string, scriptDirectory: string) => {\n        if (useSimd && fileName === 'ort-wasm.wasm') {\n          return scriptDirectory + 'ort-wasm-simd.wasm';\n        }\n        return scriptDirectory + fileName;\n      };\n    } else {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode =\n            `var ortWasmThreaded=(function(){var _scriptDir;return ${ortWasmFactoryThreaded.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n        config.locateFile = (fileName: string, scriptDirectory: string) => {\n          if (fileName.endsWith('.worker.js')) {\n            return URL.createObjectURL(new Blob(\n                [\n                  // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                  // eslint-disable-next-line @typescript-eslint/no-require-imports\n                  require('./binding/ort-wasm-threaded.worker.js')\n                ],\n                {type: 'text/javascript'}));\n          }\n\n          if (useSimd && fileName === 'ort-wasm-threaded.wasm') {\n            return scriptDirectory + 'ort-wasm-simd-threaded.wasm';\n          }\n          return scriptDirectory + fileName;\n        };\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__2174__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}