{"version":3,"sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/clip.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dropout.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/elu.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/leaky-relu.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/ops/binary-op.ts","webpack://ort/./lib/onnxjs/ops/clip.ts","webpack://ort/./lib/onnxjs/ops/concat.ts","webpack://ort/./lib/onnxjs/ops/conv.ts","webpack://ort/./lib/onnxjs/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/ops/dropout.ts","webpack://ort/./lib/onnxjs/ops/elu.ts","webpack://ort/./lib/onnxjs/ops/flatten.ts","webpack://ort/./lib/onnxjs/ops/gather.ts","webpack://ort/./lib/onnxjs/ops/gemm.ts","webpack://ort/./lib/onnxjs/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/ops/leaky-relu.ts","webpack://ort/./lib/onnxjs/ops/matmul.ts","webpack://ort/./lib/onnxjs/ops/pad.ts","webpack://ort/./lib/onnxjs/ops/pool.ts","webpack://ort/./lib/onnxjs/ops/reduce-op.ts","webpack://ort/./lib/onnxjs/ops/reshape.ts","webpack://ort/./lib/onnxjs/ops/shape.ts","webpack://ort/./lib/onnxjs/ops/slice.ts","webpack://ort/./lib/onnxjs/ops/softmax.ts","webpack://ort/./lib/onnxjs/ops/split.ts","webpack://ort/./lib/onnxjs/ops/squeeze.ts","webpack://ort/./lib/onnxjs/ops/sum.ts","webpack://ort/./lib/onnxjs/ops/tile.ts","webpack://ort/./lib/onnxjs/ops/transpose.ts","webpack://ort/./lib/onnxjs/ops/unary-op.ts","webpack://ort/./lib/onnxjs/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/ops/upsample.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/string-utils.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","length","splice","push","env","this","wasm","webgl","logLevelInternal","value","indexOf","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","set","Tensor","arg0","arg1","arg2","type","data","dims","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","constructor","size","dim","Number","isSafeInteger","RangeError","calculateSize","InferenceSession","handler","feeds","fetches","options","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","buffer","byteOffset","byteLength","backendHints","executionProviders","map","async","backendNames","errors","backendName","backendInfo","initialized","initializing","aborted","e","err","join","resolveBackend","startProfiling","endProfiling","_scriptDir","document","currentScript","src","t","N","M","$","j","r","L","n","P","a","G","o","B","H","u","s","c","ready","Promise","f","l","d","m","p","h","g","_","window","importScripts","process","versions","node","E","y","O","b","w","T","ENVIRONMENT_IS_PTHREAD","A","S","locateFile","x","__dirname","normalize","readFileSync","U","argv","replace","slice","on","Wn","ve","exit","inspect","console","error","Worker","read","readbuffer","scriptArgs","arguments","quit","print","log","warn","printErr","location","href","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","k","C","bind","I","D","shown","thisProgram","Atomics","load","store","compareExchange","wasmBinary","R","F","noExitRuntime","WebAssembly","W","Y","String","fromCharCode","z","V","charCodeAt","q","X","K","_n","Q","Z","J","HEAP8","HEAP16","HEAP32","HEAPU8","HEAPU16","HEAPU32","HEAPF32","HEAPF64","ee","te","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","re","ne","ae","oe","ie","preRun","fe","shift","ke","ue","se","hr","Fe","runExitHandlers","ce","postRun","de","unshift","le","me","pe","he","ge","monitorRunDependencies","_e","clearInterval","onAbort","stack","RuntimeError","preloadedImages","preloadedAudios","Ee","ye","startsWith","Oe","be","we","Te","fetch","credentials","then","ok","arrayBuffer","catch","resolve","Ae","gn","asm","eb","Ma","tlsInitFunctions","jb","instance","instantiate","instantiateWasm","instantiateStreaming","Se","653988","654006","setTimeout","wn","xe","initRuntime","func","arg","Ce","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EAGAIN","EWOULDBLOCK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","ENOMSG","EIDRM","ECHRNG","EL2NSYNC","EL3HLT","EL3RST","ELNRNG","EUNATCH","ENOCSI","EL2HLT","EDEADLK","ENOLCK","EBADE","EBADR","EXFULL","ENOANO","EBADRQC","EBADSLT","EDEADLOCK","EBFONT","ENOSTR","ENODATA","ETIME","ENOSR","ENONET","ENOPKG","EREMOTE","ENOLINK","EADV","ESRMNT","ECOMM","EPROTO","EMULTIHOP","EDOTDOT","EBADMSG","ENOTUNIQ","EBADFD","EREMCHG","ELIBACC","ELIBBAD","ELIBSCN","ELIBMAX","ELIBEXEC","ENOSYS","ENOTEMPTY","ENAMETOOLONG","ELOOP","EOPNOTSUPP","EPFNOSUPPORT","ECONNRESET","ENOBUFS","EAFNOSUPPORT","EPROTOTYPE","ENOTSOCK","ENOPROTOOPT","ESHUTDOWN","ECONNREFUSED","EADDRINUSE","ECONNABORTED","ENETUNREACH","ENETDOWN","ETIMEDOUT","EHOSTDOWN","EHOSTUNREACH","EINPROGRESS","EALREADY","EDESTADDRREQ","EMSGSIZE","EPROTONOSUPPORT","ESOCKTNOSUPPORT","EADDRNOTAVAIL","ENETRESET","EISCONN","ENOTCONN","ETOOMANYREFS","EUSERS","EDQUOT","ESTALE","ENOTSUP","ENOMEDIUM","EILSEQ","EOVERFLOW","ECANCELED","ENOTRECOVERABLE","EOWNERDEAD","ESTRPIPE","Ie","Hn","notify","De","pthreads","worker","terminate","freeThreadData","runningWorkers","pthread","Ne","postMessage","cmd","Re","returnWorkerToPool","_emscripten_futex_wake","unusedWorkers","initMainThreadBlock","kn","On","initWorker","threadExitHandlers","pop","yn","In","runExitHandlersAndDeinitThread","setExitStatus","threadExit","threadCancel","terminateAllThreads","threadInfoStruct","En","allocatedOwnStack","stackBase","runWithoutMainThreadQueuedCalls","Bn","receiveObjectTransfer","threadInit","loadWasmModuleToWorker","onmessage","currentProxiedOperationCallerThread","targetThread","transferList","An","Kr","thread","loaded","runPthread","threadId","text","alert","Yn","returnCode","target","filename","lineno","message","urlOrBlob","mainScriptUrlOrBlob","wasmModule","allocateUnusedWorker","getNewWorker","busySpinWait","now","Me","Pn","jn","je","establishStackSpace","invokeEntryPoint","Le","Pe","Ge","Be","keepRuntimeAlive","hrtime","__performance_now_clock_drift","dateNow","He","We","vn","Ue","Date","Ye","ze","DESTRUCTOR_OFFSET","REFCOUNT_OFFSET","TYPE_OFFSET","CAUGHT_OFFSET","RETHROWN_OFFSET","SIZE","Ve","qe","Rt","Xe","Ke","Qe","Ze","excPtr","ptr","set_type","get_type","set_destructor","get_destructor","set_refcount","set_caught","get_caught","set_rethrown","get_rethrown","add_ref","add","release_ref","sub","Je","$e","mappings","buffers","printChar","varargs","getStr","get64","et","doAccess","tt","rt","nt","at","ot","it","ut","doMkdir","st","Gn","Cn","malloc","len","allocated","fd","prot","flags","offset","ct","ft","lt","dt","mt","doReadlink","pt","ht","gt","_t","vt","Et","yt","Ot","bt","wt","Tt","At","St","apply","xt","kt","Ct","exchange","wait","It","Dt","copyWithin","Nt","navigator","hardwareConcurrency","Mn","Ln","Sn","Ft","Mt","mn","jt","grow","Lt","Math","min","max","Pt","inEventHandler","removeAllEventListeners","eventHandlers","_removeHandler","deferredCalls","registerRemoveEventListeners","removeEventListenersRegistered","deferCall","targetFunction","argsList","precedence","sort","removeDeferredCalls","canPerformEventHandlerRequests","currentEventHandler","allowsDeferredCalls","runDeferredCalls","removeAllHandlersOnTarget","eventTypeString","removeEventListener","eventListenerFunc","useCapture","registerOrRemoveHandler","handlerFunc","callbackfunc","addEventListener","queueEventHandlerOnThread_iiii","xn","getTargetThreadForEventCallback","getNodeNameForTarget","screen","nodeName","fullscreenEnabled","webkitFullscreenEnabled","Gt","Bt","Ht","Wt","Ut","Yt","querySelector","zt","Vt","canvasSharedPtr","offscreenCanvas","controlTransferredOffscreen","GLctxObject","GLctx","getParameter","width","height","viewport","qt","Xt","Kt","Qt","getExtension","vertexAttribDivisor","vertexAttribDivisorANGLE","drawArraysInstanced","drawArraysInstancedANGLE","drawElementsInstanced","drawElementsInstancedANGLE","Zt","createVertexArray","createVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","bindVertexArray","bindVertexArrayOES","isVertexArray","isVertexArrayOES","Jt","drawBuffers","drawBuffersWEBGL","$t","multiDrawWebgl","er","counter","programs","framebuffers","renderbuffers","textures","shaders","vaos","contexts","offscreenCanvases","queries","stringCache","unpackAlignment","recordError","lastError","getNewId","getSource","createContext","getContextSafariWebGL2Fixed","getContext","WebGLRenderingContext","registerContext","handle","attributes","version","majorVersion","canvas","enableExtensionsByDefault","initExtensions","makeContextCurrent","currentContext","ctx","rn","deleteContext","initExtensionsDone","disjointTimerQueryExt","getSupportedExtensions","forEach","includes","tr","rr","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","minorVersion","explicitSwapControl","proxyContextToMainThread","renderViaOffscreenBackBuffer","nr","ar","initManagers","mgrContext","objects","nextId","create","refcount","object","reference","release","mgrGraph","mgrGraphBuilder","mgrNamedInputs","mgrNamedOperands","mgrNamedOutputs","mgrNamedResults","mgrOperand","mgrResult","AutoPad","BuildGraphStatus","ComputeGraphStatus","ErrorFilter","ErrorType","FilterOperandLayout","FusedActivation","InputOperandLayout","OperandType","PowerPreference","makeI32Array","makeArrayBufferView","BYTES_PER_ELEMENT","makeClampOptions","minValue","maxValue","makeBatchNormOptions","scale","bias","axis","epsilon","activation","makeGemmOptions","beta","aTranspose","bTranspose","makeOperandDescriptor","dimensions","makeConv2dOptions","padding","strides","dilations","autoPad","groups","inputLayout","filterLayout","makePool2dOptions","windowDimensions","makeInput","makeOutput","or","ml","ir","ur","sr","strings","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","cr","fr","lr","dr","mr","getStreamFromFD","doReadv","pr","_fflush","gr","_r","vr","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getTime","GMTString","Er","called","getFullYear","getTimezoneOffset","Fn","Rn","Nn","toTimeString","match","yr","getSeconds","getMinutes","getHours","getDate","getMonth","getDay","Or","setTime","br","wr","Tr","Ar","averagePool2d","Sr","batchNormalization","xr","buildSync","kr","concat","Cr","constant","Ir","conv2d","Dr","gemm","Nr","input","Rr","matmul","Fr","maxPool2d","Mr","jr","relu","Lr","reshape","Pr","computeSync","Gr","Br","Hr","Wr","Ur","Yr","zr","Vr","qr","Xr","pthread_ptr","stackSize","detached","Dn","start_routine","startRoutine","time","Qr","Tn","Zr","Jr","bn","$r","en","tn","nn","an","setDate","setMonth","setFullYear","un","tm_sec","tm_min","tm_hour","tm_mday","tm_mon","tm_year","tm_wday","tm_yday","tm_isdst","tm_gmtoff","tm_zone","RegExp","toString","substring","ceil","abs","pn","sn","cn","MLGraphBuilder","fn","ln","dn","hn","ba","aa","Ka","Ia","na","La","Ha","Ga","Ca","Ba","Aa","za","ya","xa","wa","va","ua","ta","sa","pa","ra","qa","Fa","Ea","Da","ma","oa","ka","la","ia","ja","ha","ga","Ja","fa","ea","da","ca","___wasm_call_ctors","_OrtInit","Na","_OrtCreateSessionOptions","Oa","_OrtSessionOptionsAppendExecutionProviderWebNN","Pa","_OrtAddSessionConfigEntry","Qa","_OrtReleaseSessionOptions","Ra","_OrtCreateSession","Sa","_OrtReleaseSession","Ta","_OrtGetInputCount","Ua","_OrtGetOutputCount","Va","_OrtGetInputName","Wa","_OrtGetOutputName","Xa","_OrtFree","Ya","_OrtCreateTensor","Za","_OrtGetTensorData","_a","_OrtReleaseTensor","$a","_OrtCreateRunOptions","ab","_OrtAddRunConfigEntry","bb","_OrtReleaseRunOptions","cb","_OrtRun","db","_malloc","fb","___errno_location","gb","_free","hb","_pthread_self","ib","_emscripten_tls_init","_emscripten_current_thread_process_queued_calls","kb","_emscripten_register_main_browser_thread_id","lb","_emscripten_main_browser_thread_id","mb","__emscripten_do_dispatch_to_thread","nb","_emscripten_sync_run_in_main_thread_4","ob","_emscripten_main_thread_process_queued_calls","pb","_emscripten_run_in_main_runtime_thread_js","qb","__emscripten_call_on_thread","rb","__emscripten_thread_init","sb","_memset","tb","___pthread_tsd_run_dtors","ub","_emscripten_get_global_libc","vb","__get_tzname","wb","__get_daylight","xb","__get_timezone","yb","stackSave","zb","stackRestore","Ab","stackAlloc","Bb","_emscripten_stack_set_limits","Cb","_memalign","Db","__emscripten_allow_main_runtime_queued_calls","__emscripten_main_thread_futex","Un","setStatus","calledRun","onRuntimeInitialized","onExit","UTF8ToString","stringToUTF8","lengthBytesUTF8","PThread","ExitStatus","preInit","ortWasm","readyPromiseResolve","readyPromiseReject","Module","reject","moduleOverrides","arguments_","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","read_","readAsync","readBinary","nodeFS","nodePath","scriptDirectory","path","binary","ret","assert","ex","abort","url","xhr","out","ABORT","condition","UTF8Decoder","TextDecoder","UTF8ArrayToString","heap","idx","maxBytesToRead","endIdx","endPtr","subarray","decode","str","u0","u1","u2","ch","stringToUTF8Array","outIdx","maxBytesToWrite","startIdx","outPtr","allocateUTF8","writeArrayToMemory","array","writeAsciiToMemory","dontAddNull","alignUp","multiple","updateGlobalBufferAndViews","buf","wasmTable","__ATPRERUN__","__ATINIT__","__ATEXIT__","__ATPOSTRUN__","addOnPreRun","callRuntimeCallbacks","addOnPostRun","addOnInit","runDependencies","runDependencyWatcher","dependenciesFulfilled","addRunDependency","id","removeRunDependency","callback","what","dataURIPrefix","isDataURI","isFileURI","wasmBinaryFile","getBinary","file","getBinaryPromise","createWasm","info","asmLibraryArg","receiveInstance","receiveInstantiationResult","result","instantiateArrayBuffer","receiver","reason","callbacks","ExceptionInfoAttrs","___cxa_allocate_exception","_atexit","___cxa_atexit","a0","a1","___cxa_thread_atexit","ExceptionInfo","destructor","caught","rethrown","prev","___cxa_throw","_emscripten_get_now","SYSCALLS","stream","curr","low","high","___sys_access","amode","setErrNo","___sys_fcntl64","___sys_fstat64","___sys_getdents64","dirp","count","___sys_getpid","___sys_ioctl","op","___sys_lstat64","___sys_mkdir","mode","syscallMmap2","addr","off","___sys_mmap2","syscallMunmap","___sys_munmap","___sys_open","___sys_readlink","bufsize","___sys_rmdir","___sys_stat64","___sys_unlink","_abort","_emscripten_get_now_is_monotonic","_clock_gettime","clk_id","tp","_difftime","time1","time0","_dlclose","_dlerror","_dlopen","flag","_dlsym","symbol","_emscripten_get_heap_max","_emscripten_memcpy_big","dest","num","emscripten_realloc_buffer","_emscripten_resize_heap","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","_emscripten_thread_sleep","msecs","start","WebNN","wrapper","arrayPtr","byteSize","_emscripten_webnn_create_context","context","ENV","getExecutableName","getEnvStrings","_environ_get","__environ","environ_buf","bufSize","string","_environ_sizes_get","penviron_count","penviron_buf_size","_fd_close","_fd_fdstat_get","pbuf","_fd_read","iov","iovcnt","pnum","_fd_seek","offset_low","offset_high","whence","newOffset","_fd_write","_gettimeofday","_gmtime_r","tmPtr","date","yday","_tzset","currentYear","winter","summer","winterOffset","summerOffset","stdTimezoneOffset","winterName","extractZone","summerName","winterNamePtr","summerNamePtr","_localtime_r","dst","zonePtr","_mktime","guessedOffset","dstOffset","nonDstOffset","trueOffset","_mlContextReference","_mlContextRelease","_mlGraphBuilderAdd","builderId","aId","bId","builder","_mlGraphBuilderAveragePool2d","inputId","optionsPtr","pool2d","_mlGraphBuilderBatchNorm","meanId","varianceId","mean","variance","output","_mlGraphBuilderBuildSync","namedOperandsId","namedOperands","graph","_mlGraphBuilderConcat","inputsCount","inputsPtr","inputIds","inputs","_mlGraphBuilderConstant","descPtr","valuePtr","desc","_mlGraphBuilderConv2d","filterId","filter","_mlGraphBuilderGemm","_mlGraphBuilderInput","namePtr","_mlGraphBuilderMatmul","_mlGraphBuilderMaxPool2d","_mlGraphBuilderRelease","_mlGraphBuilderRelu","_mlGraphBuilderReshape","newShapePtr","newShapeCount","newShape","_mlGraphComputeSync","graphId","inputsId","outputsId","outputs","_mlGraphReference","_mlGraphRelease","_mlNamedInputsRelease","_mlNamedInputsSet","namedInputsId","inputPtr","namedInputs","_mlNamedOperandsRelease","_mlNamedOperandsSet","operandId","operand","_mlNamedOutputsRelease","_mlNamedOutputsSet","namedOutputsId","outputPtr","namedOutputs","_mlOperandReference","_mlOperandRelease","_pthread_create","_pthread_join","__isLeapYear","year","__arraySum","index","sum","__MONTH_DAYS_LEAP","__MONTH_DAYS_REGULAR","__addDays","days","newDate","leap","currentMonth","daysInCurrentMonth","_strftime","maxsize","format","tm","pattern","EXPANSION_RULES_1","rule","WEEKDAYS","MONTHS","leadingSomething","digits","character","leadingNulls","compareByDay","date1","date2","sgn","compare","getFirstWeekStartDate","janFourth","getWeekBasedYear","thisDate","janFourthThisYear","janFourthNextYear","firstWeekStartThisYear","firstWeekStartNextYear","EXPANSION_RULES_2","twelveHour","janFirst","firstSunday","endDate","februaryFirstUntilEndMonth","daysDifference","firstMonday","ahead","bytes","intArrayFromString","_strftime_l","_webnnCreateGraphBuilder","contextId","_webnnCreateNamedInputs","_webnnCreateNamedOperands","_webnnCreateNamedOutputs","stringy","u8array","numBytesWritten","args","doRun","runCaller","params","pending","base64","charAt","b64","s64","encode","end","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","listeners","emit","f32","f8b","writeFloat_f32_cpy","val","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","MAX","slab","utf8","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","EMPTY","isGuid","validator","gen","createEmpty","parse","raw","random","isEmpty","toJSON","Instance","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","gte","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","values","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","tensors","graphs","refAttrName","docString","newBuffer","emptyArray","writer","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","fromObject","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","elemType","shape","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","asPromise","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","initTimeout","simd","numThreads","numCpuLogicalCores","cpus","initializeWebAssembly","promisify","readFile","OnnxruntimeWebAssemblySessionHandler","wasmBackend","OnnxruntimeWebAssemblyBackend","ortFbs","onnxruntime","experimental","fbs","_attributes","attr","Attribute","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","initialize","dispose","WebGLBackend","hint","hints","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","programInfo","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","samplers","samplerName","inputLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","squeezeShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encodeUint8","endianness","EncodingGlslLib","decodeUint8","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","split","tokens","trim","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","pack2unpackMap","unpack2packMap","artifact","programManager","getArtifact","createProgramInfo","setArtifact","runData","createRunData","runProgram","outputTextureData","tensor","checkAndUpdateTextureForm","inputTextureDatas","expectPackedInputs","unpack","expectPackedOutputs","getOrCreateTextureData","td","getTextureData","dataId","createTextureLayoutFromShape","unpackedTextureLayout","getOrCreateTextureLayout","unpackedTextureData","createTextureData","numberData","createTextureDataFromLayout","createTextureDataFromLayoutBindTensor","usage","texture","textureManager","createTextureFromLayout","createTextureDataFromTexture","createSharedTextureData","tensorId","textureData","_id","readTexture","setTextureData","isInitializer","isTextureLayoutCached","channels","reverseWH","getPackedShape","prefs","layoutStrategy","computeTextureWH","texWidth","texHeight","inferredDims","computeStrides","reversedWH","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","uint8TD","WebGLUint8Encode","runInternal","readUint8TextureAsFloat","cachedId","packOpCache","WebGLPack","unpackOpCache","WebGLUnpack","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","WebGLUnaryOp","NUMBER_TYPES","glslAbs","FLOAT_TYPES","glslAcos","binaryOps","WebGLBinaryOp","glslAdd","glslAnd","glslAsin","glslAtan","WebGLAveragePool","WebGLBatchNormalization","glslCeil","WebGLClip","WebGLConcat","WebGLConv","glslCos","glslDiv","WebGLDropout","WebGLDepthToSpace","glslEqual","WebGLElu","glslExp","WebGLFlatten","glslFloor","WebGLGather","WebGLGemm","WebGLGlobalAveragePool","WebGLGlobalMaxPool","glslGreater","glslIdentity","WebGLImageScaler","WebGLInstanceNormalization","WebGLLeakyRelu","glslLess","glslLog","WebGLMatMul","WebGLMaxPool","glslMul","glslNeg","glslNot","glslOr","WebGLPad","glslPow","glslPRelu","reduceOps","WebGLReduceLogSum","WebGLReduceMax","WebGLReduceMean","WebGLReduceMin","WebGLReduceProd","WebGLReduceSum","WebGLReduceSumSquare","glslRelu","WebGLReshape","WebGLResizePacked","WebGLShape","glslSigmoid","glslSin","WebGLSliceV10","WebGLSlice","WebGLSoftmax","WebGLSplit","glslSqrt","WebGLSqueeze","glslSub","WebGLSum","glslTan","glslTanh","WebGLTile","WebGLTranspose","WebGLUpsample","WebGLUnsqueeze","glslXor","inferenceHandler","outputShape","inputTDs","outputTD","uniformData","BatchNormalization","typeConstraint","glslFunc","resultType","isBroadcast","areEqual","usePackedTexture","ouputLayout","calcShape","aRank","bRank","aBcast","bBcast","BinaryOp","ValueBased","glslBuiltinBinary","Clip","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","allGlChannels","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","channelIdx","Concat","WebGLPackedConcat","unpackedImpl","WebGLUnpackedConcat","packedImpl","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getValueFromArrayIndexMethod","sizeInConcatAxis","previousSum","numberOfTensors","tensorRank","codeLines","arrayRank","kernelReshape","WebGLReshapePacked","WebGLMatMulPacked","outputReshape","xshape","kshape","kernelShape","PoolConvUtil","adjustPadsBasedOnAutoPad","pads","group","calcOutputShape","im2col","WebGLIm2ColPacked","artifacts","runDataIm2col","im2colOutput","runDataKernelReshape","kernelReshaped","hasBias","runDataMatmul","matmulOutput","outputShapeTensor","runDataOutputReshape","Conv","WebGLConvPacked","unpackedGroupedConvImpl","WebGLUnpackedGroupedConv","unpackedConvImpl","WebGLUnpackedConv","packedConvImpl","packMode","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","outputSpatialShape","processBias","xShape","wShape","outputChannelsPerGroup","getActicationSnippet","activationFunction","applyActivation","readSize","blockSize","programInfos","createProgramInfoArray","runDataArray","createRunDataArray","wDims","im2colProgramInfo","createIm2ColProgramInfo","createDotProductProgramInfo","kTD","newKernelData","prepKernelForDotProduct","runtDataIm2Col","draw","gl","sharedDim","sharedDimReadSize","sharedDimOffsetLocation","uniformLocations","find","blend","enable","BLEND","checkError","blendEquation","FUNC_ADD","blendFunc","uniform1i","disable","im2colDims","calcIm2ColDims","breakAxis","im2colLayout","bLayout","adjustedKernelShape","kLayout","initValue","isBlendSupported","calcSharedDimReadSize","kernel","numFeatureMaps","oldRowSize","newRowSize","oldOffset","preferredBatchSize","calcBlockSize","transposePerm","firstReshapeShape","blocksize","blocksizeSqr","firstReshapedTensor","transposeProgramInfo","transposeArtifact","runDataTranspose","transposeOutput","getOutShape","inputDepth","inputHeight","inputWidth","DepthToSpace","testMode","_handler","_inputs","_programInfo","Dropout","toExponential","Elu","outputDims","flattenShape","Flatten","activationName","indexDataShape","normalizeAxis","indexCopyOps","Gather","aShape","bShape","GemmUtil","getShapeOfGemmResult","transA","transB","oShape","line","Gemm","convOutputShape","wshape","im2colShape","kernelSize","unrolled","row","col","createGetBiasMethod","numChannels","ImageScaler","createProgramInfos","runDatas","createRunDatas","checkInputTypes","createMeanAndVarianceProgramInfo","xLayout","xDims","channelSize","outputUnpackedShape","createComputOutputProgramInfo","scaleLayout","meanAndVarianceLayout","meanAndVarianceProgramInfo","inputTD","scaleTD","bTD","InstanceNormalization","LeakyRelu","sharedDimIndex","coordsDataType","getA","getB","MatMul","WebGLUnpackedMatMul","arank","brank","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","getVecChannels","padShape","alayout","getPadFunction","Pad","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","countIncludePad","GlobalAveragePool","AveragePool","isGlobalOperator","adjustPoolAttributes","computePoolOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","GlobalMaxPool","MaxPool","op1","startVal","inputDims","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","reduce","cur","arrayName","iRank","idxCopy","axes","normalizeAxes","ops","getOps","keepDims","ReduceBase","WebGLGenericReduce","idxZero","needSqueezeInputData","originInputShape","inputShape3D","processDims3D","originalInputLayout","calculateReshapedDims","integerData","squeezedOutputShape","mainLoop","outputCoords","getFlattenedIndexFrom3D","originalInputTD","squeezedInputLayout","Reshape","batchDims","batch","reshapedDims","packedShape","newTextureLayout","prepareInputs","scales","roi","extrapolationEnabled","extrapolationValue","cubicCoefficientA","excludeOutside","coordinateTransformMode","every","outputHeight","outputWidth","scalesHeight","scalesWidth","getSourceFracIndex","createResizeProgramInfo","useExtrapolation","Upsample","Shape","starts","ends","Slice","some","SliceV10","ind","sliceOps","pi","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","textureWidth","textureHeight","createComputScaleProgramInfo","xlayout","createComputeMaxProgramInfo","sizeToDimension","sizeFromDimension","computeMaxProgramInfo","computeScaleProgramInfo","Softmax","getProgramCount","rundata","SplitUtil","splitShape","numOutputs","Split","Squeeze","sumLine","Sum","tileOps","Tile","getOutputShape","inputShapes","perm","getAdjustedPerm","sortBasedOnPerm","unpackedOutputShape","getPermFunctionBody","getPositionalFunction","Positional","reverseFunc","Transpose","encoder","getEncoder","allocateTexture","UnaryOp","glslBuiltinUnary","inputTexture","isScalar","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","Unsqueeze","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","program","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","doDraw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","texturePosition","bindTexture","uniform1fv","uniform1f","uniform1iv","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","createInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","resolveOperator","internalFormat","R32F","RED","textureType","RGBA32F","RGBA","textureSize","dataSize","RedFloat32DataEncoder","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","Uint8DataEncoder","wsize","hsize","totalSize","sqrt","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","parseAxisParam","ax","isInt","dimsToSkip","config","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","updateTexture","toTextureData","toTensorData","deleteTexture","_dataType","checkFn","delayFn","maxCounter","_counter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","createElement","createCanvas","WebGLContext","webgl2","isContextLost","DEPTH_TEST","STENCIL_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","SCISSOR_TEST","CULL_FACE","cullFace","BACK","frameBufferBound","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","scissor","readPixels","isFramebufferReady","getActiveTexture","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","getNodes","_ops","KernelOp","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","execNodeFn","checkInputs","outputList","downstreamNodes","to","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","thisValue","ExecutionPlan","Graph","graphProto","GraphImpl","_from","_to","ProtoUtil","tensorValueTypeFromProto","_nodeProto","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","tensorDataTypeFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","fill","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","finalizeGraph","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","fuseConvActivationNodes","_severity","_content","_category","severity","content","category","color","SEVERITY_VALUE","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","logInternal","toISOString","previousConfig","logLevel","startTime","endCallback","timer","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","flush","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","momentum","spatial","var_","inputType","inputDimensionality","supportedModes","ratio","isOptionalC","ceilMode","PoolBase","storageOrder","opset","_node","isResize","scalesValidataion","needRoiInput","nearestMode","useNearest2xOptimization","roiInputIdx","scalesInputIdx","sizesInputIdx","parseRoiData","outputSizes","scalesTensor","parseScalesData","sizesTensor","parseScalesDataFromOutputSize","computeOutputShape","yDims","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","versionSelector","opConstructor","DimensionValueType","TensorDataType","NodeType","__init","getRootAsShape","getSizePrefixedRootAsShape","startShape","addDim","createDimVector","startDimVector","numElems","endShape","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","optionalEncoding","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","UNKNOWN","startDimensionValue","addDimType","addDimValue","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","NONE","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawDataLength","rawDataArray","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","floatsLength","graphsLength","startAttribute","addF","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","graphInputTypes","graphInputDims","_model","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","getData","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","fromData","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","targetIndex","sourceIndex","leftShape","transLeft","rightShape","transRight","biasShape","kDim","typeProto","tensorDataTypeStringToEnum","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","dilation","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","errorCode","getLogLevel","modelDataOffset","sessionOptionsHandle","setSessionOptions","sessionHandle","inputCount","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","inputArray","inputIndices","kvp","runOptionsAllocs","inputValues","inputAllocs","dataOffset","dataByteLength","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","typedArray","sessionOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","dataLength","timeout","useThreads","MessageChannel","port1","validate","isMultiThreadSupported","useSimd","isSimdSupported","isTimeout","tasks","Blob","scriptSourceCode","fileName","URL","createObjectURL","race","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"mappings":"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","file":"ort.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority.\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.backend === backend) {\n            return;\n        }\n        else {\n            throw new Error(`backend \"${name}\" is already registered`);\n        }\n        for (let i = 0; i < backendsSortedByPriority.length; i++) {\n            if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                backendsSortedByPriority.splice(i, 0, name);\n                return;\n            }\n        }\n        backendsSortedByPriority.push(name);\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.initializing) {\n                throw new Error(`backend \"${backendName}\" is being initialized; cannot initialize multiple times.`);\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            try {\n                backendInfo.initializing = true;\n                await backendInfo.backend.init();\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                errors.push({ name: backendName, err: e });\n                backendInfo.aborted = true;\n            }\n            finally {\n                backendInfo.initializing = false;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\nif (isBigInt64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n}\nif (isBigUint64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n}\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    //#endregion\n    //#region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function t(){return N.buffer!=M&&$(N.buffer),j}function r(){return N.buffer!=M&&$(N.buffer),L}function n(){return N.buffer!=M&&$(N.buffer),P}function a(){return N.buffer!=M&&$(N.buffer),G}function o(){return N.buffer!=M&&$(N.buffer),B}function i(){return N.buffer!=M&&$(N.buffer),H}var u,s,c=void 0!==(e=e||{})?e:{};c.ready=new Promise((function(e,t){u=e,s=t}));var f,l={};for(f in c)c.hasOwnProperty(f)&&(l[f]=c[f]);var d=[],m=\"./this.program\",p=function(e,t){throw t},h=!1,g=!1,_=!1,v=!1;h=\"object\"==typeof window,g=\"function\"==typeof importScripts,_=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=!h&&!_&&!g;var E,y,O,b,w,T=c.ENVIRONMENT_IS_PTHREAD||!1,A=\"\";function S(e){return c.locateFile?c.locateFile(e,A):A+e}if(_){var x;A=g?require(\"path\").dirname(A)+\"/\":__dirname+\"/\",E=function(e,t){return b||(b=require(\"fs\")),w||(w=require(\"path\")),e=w.normalize(e),b.readFileSync(e,t?null:\"utf8\")},O=function(e){var t=E(e,!0);return t.buffer||(t=new Uint8Array(t)),U(t.buffer),t},process.argv.length>1&&(m=process.argv[1].replace(/\\\\/g,\"/\")),d=process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof Wn))throw e})),process.on(\"unhandledRejection\",ve),p=function(e){process.exit(e)},c.inspect=function(){return\"[Emscripten Module object]\"};try{x=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=x.Worker}else v?(\"undefined\"!=typeof read&&(E=function(e){return read(e)}),O=function(e){var t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(U(\"object\"==typeof(t=read(e,\"binary\"))),t)},\"undefined\"!=typeof scriptArgs?d=scriptArgs:void 0!==arguments&&(d=arguments),\"function\"==typeof quit&&(p=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(h||g)&&(g?A=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\"blob:\")?A.substr(0,A.lastIndexOf(\"/\")+1):\"\",_?(E=function(e,t){return b||(b=require(\"fs\")),w||(w=require(\"path\")),e=w.normalize(e),b.readFileSync(e,t?null:\"utf8\")},O=function(e){var t=E(e,!0);return t.buffer||(t=new Uint8Array(t)),U(t.buffer),t}):(E=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},g&&(O=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),y=function(e,t,r){var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=function(){200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));_&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var k,C=c.print||console.log.bind(console),I=c.printErr||console.warn.bind(console);for(f in l)l.hasOwnProperty(f)&&(c[f]=l[f]);function D(e){D.shown||(D.shown={}),D.shown[e]||(D.shown[e]=1,I(e))}l=null,c.arguments&&(d=c.arguments),c.thisProgram&&(m=c.thisProgram),c.quit&&(p=c.quit),Atomics.load,Atomics.store,Atomics.compareExchange,c.wasmBinary&&(k=c.wasmBinary);var N,R,F=c.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&ve(\"no native wasm support detected\");var M,j,L,P,G,B,H,W=!1;function U(e,t){e||ve(\"Assertion failed: \"+t)}function Y(e,t,r){for(var n=t+r,a=\"\";!(t>=n);){var o=e[t++];if(!o)return a;if(128&o){var i=63&e[t++];if(192!=(224&o)){var u=63&e[t++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&e[t++])<65536)a+=String.fromCharCode(o);else{var s=o-65536;a+=String.fromCharCode(55296|s>>10,56320|1023&s)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function z(e,t){return e?Y(r(),e,t):\"\"}function V(e,t,r,n){if(!(n>0))return 0;for(var a=r,o=r+n-1,i=0;i<e.length;++i){var u=e.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++i)),u<=127){if(r>=o)break;t[r++]=u}else if(u<=2047){if(r+1>=o)break;t[r++]=192|u>>6,t[r++]=128|63&u}else if(u<=65535){if(r+2>=o)break;t[r++]=224|u>>12,t[r++]=128|u>>6&63,t[r++]=128|63&u}else{if(r+3>=o)break;t[r++]=240|u>>18,t[r++]=128|u>>12&63,t[r++]=128|u>>6&63,t[r++]=128|63&u}}return t[r]=0,r-a}function q(e,t,n){return V(e,r(),t,n)}function X(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);n>=55296&&n<=57343&&(n=65536+((1023&n)<<10)|1023&e.charCodeAt(++r)),n<=127?++t:t+=n<=2047?2:n<=65535?3:4}return t}function K(e){var r=X(e)+1,n=_n(r);return n&&V(e,t(),n,r),n}function Q(e,r){t().set(e,r)}function Z(e,r,n){for(var a=0;a<e.length;++a)t()[r++>>0]=e.charCodeAt(a);n||(t()[r>>0]=0)}function J(e,t){return e%t>0&&(e+=t-e%t),e}function $(e){M=e,c.HEAP8=j=new Int8Array(e),c.HEAP16=new Int16Array(e),c.HEAP32=P=new Int32Array(e),c.HEAPU8=L=new Uint8Array(e),c.HEAPU16=new Uint16Array(e),c.HEAPU32=G=new Uint32Array(e),c.HEAPF32=B=new Float32Array(e),c.HEAPF64=H=new Float64Array(e)}T&&(M=c.buffer);var ee,te=c.INITIAL_MEMORY||16777216;if(T)N=c.wasmMemory,M=c.buffer;else if(c.wasmMemory)N=c.wasmMemory;else if(!((N=new WebAssembly.Memory({initial:te/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw I(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),_&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");N&&(M=N.buffer),te=M.byteLength,$(M);var re=[],ne=[],ae=[],oe=[];function ie(){if(!T){if(c.preRun)for(\"function\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)fe(c.preRun.shift());ke(re)}}function ue(){T||ke(ne)}function se(){T||(ke(ae),hr(),Fe.runExitHandlers())}function ce(){if(!T){if(c.postRun)for(\"function\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;)de(c.postRun.shift());ke(oe)}}function fe(e){re.unshift(e)}function le(e){ne.unshift(e)}function de(e){oe.unshift(e)}var me=0,pe=null,he=null;function ge(e){U(!T,\"addRunDependency cannot be used in a pthread worker\"),me++,c.monitorRunDependencies&&c.monitorRunDependencies(me)}function _e(e){if(me--,c.monitorRunDependencies&&c.monitorRunDependencies(me),0==me&&(null!==pe&&(clearInterval(pe),pe=null),he)){var t=he;he=null,t()}}function ve(e){c.onAbort&&c.onAbort(e),T&&console.error(\"Pthread aborting at \"+(new Error).stack),I(e+=\"\"),W=!0,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var t=new WebAssembly.RuntimeError(e);throw s(t),t}c.preloadedImages={},c.preloadedAudios={};var Ee=\"data:application/octet-stream;base64,\";function ye(e){return e.startsWith(Ee)}function Oe(e){return e.startsWith(\"file://\")}var be=\"ort-wasm-threaded.wasm\";function we(e){try{if(e==be&&k)return new Uint8Array(k);if(O)return O(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){ve(e)}}function Te(){if(!k&&(h||g)){if(\"function\"==typeof fetch&&!Oe(be))return fetch(be,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+be+\"'\";return e.arrayBuffer()})).catch((function(){return we(be)}));if(y)return new Promise((function(e,t){y(be,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return we(be)}))}function Ae(){var e={a:gn};function t(e,t){var r=e.exports;c.asm=r,ee=c.asm.eb,le(c.asm.Ma),Fe.tlsInitFunctions.push(c.asm.jb),R=t,T||_e()}function r(e){t(e.instance,e.module)}function n(t){return Te().then((function(t){return WebAssembly.instantiate(t,e)})).then(t,(function(e){I(\"failed to asynchronously prepare wasm: \"+e),ve(e)}))}if(T||ge(),c.instantiateWasm)try{return c.instantiateWasm(e,t)}catch(e){return I(\"Module.instantiateWasm callback failed with error: \"+e),!1}return(k||\"function\"!=typeof WebAssembly.instantiateStreaming||ye(be)||Oe(be)||\"function\"!=typeof fetch?n(r):fetch(be,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(r,(function(e){return I(\"wasm streaming compile failed: \"+e),I(\"falling back to ArrayBuffer instantiation\"),n(r)}))}))).catch(s),{}}ye(be)||(be=S(be));var Se={653988:function(){throw\"Canceled!\"},654006:function(e,t){setTimeout((function(){wn(e,t)}),0)}};function xe(){Fe.initRuntime()}function ke(e){for(;e.length>0;){var t=e.shift();if(\"function\"!=typeof t){var r=t.func;\"number\"==typeof r?void 0===t.arg?ee.get(r)():ee.get(r)(t.arg):r(void 0===t.arg?null:t.arg)}else t(c)}}var Ce={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};function Ie(e,r){if(e<=0||e>t().length||!0&e||r<0)return-28;if(0==r)return 0;r>=2147483647&&(r=1/0);var a=Atomics.load(n(),Hn>>2),o=0;if(a==e&&Atomics.compareExchange(n(),Hn>>2,a,0)==a&&(o=1,--r<=0))return 1;var i=Atomics.notify(n(),e>>2,r);if(i>=0)return i+o;throw\"Atomics.notify returned an unexpected value \"+i}function De(e){if(T)throw\"Internal Error! killThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in killThread!\";n()[e+12>>2]=0;var t=Fe.pthreads[e];t.worker.terminate(),Fe.freeThreadData(t),Fe.runningWorkers.splice(Fe.runningWorkers.indexOf(t.worker),1),t.worker.pthread=void 0}function Ne(e){if(T)throw\"Internal Error! cancelThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in cancelThread!\";Fe.pthreads[e].worker.postMessage({cmd:\"cancel\"})}function Re(e){if(T)throw\"Internal Error! cleanupThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in cleanupThread!\";var t=Fe.pthreads[e];if(t){n()[e+12>>2]=0;var r=t.worker;Fe.returnWorkerToPool(r)}}c._emscripten_futex_wake=Ie;var Fe={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){},initRuntime:function(){for(var e=_n(228),t=0;t<57;++t)a()[e/4+t]=0;n()[e+12>>2]=e;var r=e+152;n()[r>>2]=r;var o=_n(512);for(t=0;t<128;++t)a()[o/4+t]=0;Atomics.store(a(),e+100>>2,o),Atomics.store(a(),e+40>>2,e),kn(e,!g,1),On(e)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;Fe.threadExitHandlers.length>0;)Fe.threadExitHandlers.pop()();T&&yn()&&In()},runExitHandlersAndDeinitThread:function(e,t){Atomics.store(a(),e+56>>2,1),Atomics.store(a(),e+60>>2,0),Fe.runExitHandlers(),Atomics.store(a(),e+4>>2,t),Atomics.store(a(),e+0>>2,1),Ie(e+0,2147483647),kn(0,0,0)},setExitStatus:function(e){},threadExit:function(e){var t=yn();t&&(Fe.runExitHandlersAndDeinitThread(t,e),T&&postMessage({cmd:\"exit\"}))},threadCancel:function(){Fe.runExitHandlersAndDeinitThread(yn(),-1),postMessage({cmd:\"cancelDone\"})},terminateAllThreads:function(){for(var e in Fe.pthreads)(n=Fe.pthreads[e])&&n.worker&&Fe.returnWorkerToPool(n.worker);Fe.pthreads={};for(var t=0;t<Fe.unusedWorkers.length;++t)(r=Fe.unusedWorkers[t]).terminate();for(Fe.unusedWorkers=[],t=0;t<Fe.runningWorkers.length;++t){var r,n=(r=Fe.runningWorkers[t]).pthread;Fe.freeThreadData(n),r.terminate()}Fe.runningWorkers=[]},freeThreadData:function(e){if(e){if(e.threadInfoStruct){var t=n()[e.threadInfoStruct+100>>2];n()[e.threadInfoStruct+100>>2]=0,En(t),En(e.threadInfoStruct)}e.threadInfoStruct=0,e.allocatedOwnStack&&e.stackBase&&En(e.stackBase),e.stackBase=0,e.worker&&(e.worker.pthread=null)}},returnWorkerToPool:function(e){Fe.runWithoutMainThreadQueuedCalls((function(){delete Fe.pthreads[e.pthread.threadInfoStruct],Fe.unusedWorkers.push(e),Fe.runningWorkers.splice(Fe.runningWorkers.indexOf(e),1),Fe.freeThreadData(e.pthread),e.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(e){n()[Bn>>2]=0;try{e()}finally{n()[Bn>>2]=1}},receiveObjectTransfer:function(e){},threadInit:function(){for(var e in Fe.tlsInitFunctions)Fe.tlsInitFunctions[e]()},loadWasmModuleToWorker:function(e,t){e.onmessage=function(r){var n=r.data,o=n.cmd;if(e.pthread&&(Fe.currentProxiedOperationCallerThread=e.pthread.threadInfoStruct),n.targetThread&&n.targetThread!=yn()){var i=Fe.pthreads[n.targetThread];return i?i.worker.postMessage(r.data,n.transferList):console.error('Internal error! Worker sent a message \"'+o+'\" to target pthread '+n.targetThread+\", but that thread no longer exists!\"),void(Fe.currentProxiedOperationCallerThread=void 0)}if(\"processQueuedMainThreadWork\"===o)An();else if(\"spawnThread\"===o)Kr(r.data);else if(\"cleanupThread\"===o)Re(n.thread);else if(\"killThread\"===o)De(n.thread);else if(\"cancelThread\"===o)Ne(n.thread);else if(\"loaded\"===o)e.loaded=!0,t&&t(e),e.runPthread&&(e.runPthread(),delete e.runPthread);else if(\"print\"===o)C(\"Thread \"+n.threadId+\": \"+n.text);else if(\"printErr\"===o)I(\"Thread \"+n.threadId+\": \"+n.text);else if(\"alert\"===o)alert(\"Thread \"+n.threadId+\": \"+n.text);else if(\"exit\"===o)e.pthread&&Atomics.load(a(),e.pthread.threadInfoStruct+64>>2)&&Fe.returnWorkerToPool(e);else if(\"exitProcess\"===o)try{Yn(n.returnCode)}catch(r){if(r instanceof Wn)return;throw r}else\"cancelDone\"===o?Fe.returnWorkerToPool(e):\"objectTransfer\"===o?Fe.receiveObjectTransfer(r.data):\"setimmediate\"===r.data.target?e.postMessage(r.data):I(\"worker sent an unknown command \"+o);Fe.currentProxiedOperationCallerThread=void 0},e.onerror=function(e){I(\"pthread sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message)},_&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})),e.on(\"exit\",(function(e){}))),e.postMessage({cmd:\"load\",urlOrBlob:c.mainScriptUrlOrBlob||_scriptDir,wasmMemory:N,wasmModule:R})},allocateUnusedWorker:function(){var e=S(\"ort-wasm-threaded.worker.js\");Fe.unusedWorkers.push(new Worker(e))},getNewWorker:function(){return 0==Fe.unusedWorkers.length&&(Fe.allocateUnusedWorker(),Fe.loadWasmModuleToWorker(Fe.unusedWorkers[0])),Fe.unusedWorkers.pop()},busySpinWait:function(e){for(var t=performance.now()+e;performance.now()<t;);}};function Me(e,t){Pn(e,t),jn(e)}function je(e,t){return ee.get(e)(t)}c.establishStackSpace=Me,c.invokeEntryPoint=je;var Le,Pe=0;function Ge(){return F||Pe>0}function Be(e,t,r,n){ve(\"Assertion failed: \"+z(e)+\", at: \"+[t?z(t):\"unknown filename\",r,n?z(n):\"unknown function\"])}c.keepRuntimeAlive=Ge,Le=_?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:T?function(){return performance.now()-c.__performance_now_clock_drift}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var He=!0;function We(e){return n()[vn()>>2]=e,e}function Ue(e,t){var r;if(0===e)r=Date.now();else{if(1!==e&&4!==e||!He)return We(28),-1;r=Le()}return n()[t>>2]=r/1e3|0,n()[t+4>>2]=r%1e3*1e3*1e3|0,0}function Ye(e,t){return Ue(e,t)}var ze={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function Ve(e){return _n(e+ze.SIZE)+ze.SIZE}function qe(e,t){if(T)return Rt(1,1,e,t);ae.unshift({func:e,arg:t})}function Xe(e,t){return qe(e,t)}function Ke(e,t){Fe.threadExitHandlers.push((function(){ee.get(e)(t)}))}function Qe(e,t){return Ke(e,t)}function Ze(e){this.excPtr=e,this.ptr=e-ze.SIZE,this.set_type=function(e){n()[this.ptr+ze.TYPE_OFFSET>>2]=e},this.get_type=function(){return n()[this.ptr+ze.TYPE_OFFSET>>2]},this.set_destructor=function(e){n()[this.ptr+ze.DESTRUCTOR_OFFSET>>2]=e},this.get_destructor=function(){return n()[this.ptr+ze.DESTRUCTOR_OFFSET>>2]},this.set_refcount=function(e){n()[this.ptr+ze.REFCOUNT_OFFSET>>2]=e},this.set_caught=function(e){e=e?1:0,t()[this.ptr+ze.CAUGHT_OFFSET>>0]=e},this.get_caught=function(){return 0!=t()[this.ptr+ze.CAUGHT_OFFSET>>0]},this.set_rethrown=function(e){e=e?1:0,t()[this.ptr+ze.RETHROWN_OFFSET>>0]=e},this.get_rethrown=function(){return 0!=t()[this.ptr+ze.RETHROWN_OFFSET>>0]},this.init=function(e,t){this.set_type(e),this.set_destructor(t),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(n(),this.ptr+ze.REFCOUNT_OFFSET>>2,1)},this.release_ref=function(){return 1===Atomics.sub(n(),this.ptr+ze.REFCOUNT_OFFSET>>2,1)}}function Je(e,t,r){throw new Ze(e).init(t,r),e}var $e={mappings:{},buffers:[null,[],[]],printChar:function(e,t){var r=$e.buffers[e];0===t||10===t?((1===e?C:I)(Y(r,0)),r.length=0):r.push(t)},varargs:void 0,get:function(){return $e.varargs+=4,n()[$e.varargs-4>>2]},getStr:function(e){return z(e)},get64:function(e,t){return e}};function et(e,t){return T?Rt(2,1,e,t):(e=$e.getStr(e),$e.doAccess(e,t))}function tt(e,t,r){return T?Rt(3,1,e,t,r):($e.varargs=r,0)}function rt(e,t){if(T)return Rt(4,1,e,t)}function nt(e,t,r){if(T)return Rt(5,1,e,t,r)}function at(){return 42}function ot(e,t,r){return T?Rt(6,1,e,t,r):($e.varargs=r,0)}function it(e,t){if(T)return Rt(7,1,e,t)}function ut(e,t){return T?Rt(8,1,e,t):(e=$e.getStr(e),$e.doMkdir(e,t))}function st(e,t,r,n,a,o){var i;o<<=12;var u=!1;return 0!=(16&n)&&e%65536!=0?-28:0==(32&n)?-52:(i=Gn(65536,t))?(Cn(i,0,t),u=!0,$e.mappings[i]={malloc:i,len:t,allocated:u,fd:a,prot:r,flags:n,offset:o},i):-48}function ct(e,t,r,n,a,o){return T?Rt(9,1,e,t,r,n,a,o):st(e,t,r,n,a,o)}function ft(e,t){if(-1==(0|e)||0===t)return-28;var r=$e.mappings[e];return r?(t===r.len&&($e.mappings[e]=null,r.allocated&&En(r.malloc)),0):0}function lt(e,t){return T?Rt(10,1,e,t):ft(e,t)}function dt(e,t,r){if(T)return Rt(11,1,e,t,r);$e.varargs=r}function mt(e,t,r){return T?Rt(12,1,e,t,r):(e=$e.getStr(e),$e.doReadlink(e,t,r))}function pt(e){if(T)return Rt(13,1,e)}function ht(e,t){if(T)return Rt(14,1,e,t)}function gt(e){if(T)return Rt(15,1,e)}function _t(e,t){if(e==t)postMessage({cmd:\"processQueuedMainThreadWork\"});else if(T)postMessage({targetThread:e,cmd:\"processThreadQueue\"});else{var r=Fe.pthreads[e],n=r&&r.worker;if(!n)return;n.postMessage({cmd:\"processThreadQueue\"})}return 1}function vt(){ve()}function Et(e,t){return e-t}function yt(e){ve(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function Ot(){ve(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function bt(e,t){ve(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function wt(e,t){ve(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}var Tt=[];function At(e,t){var a;for(Tt.length=0,t>>=2;a=r()[e++];){var o=a<105;o&&1&t&&t++,Tt.push(o?i()[t++>>1]:n()[t]),++t}return Tt}function St(e,t,r){var n=At(t,r);return Se[e].apply(null,n)}function xt(){_||g||D(\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\")}function kt(e,t){}function Ct(e,r,a){if(e<=0||e>t().length||!0&e)return-28;if(h){if(Atomics.load(n(),e>>2)!=r)return-6;var o=performance.now(),i=o+a;for(Atomics.exchange(n(),Hn>>2,e);;){if((o=performance.now())>i)return Atomics.exchange(n(),Hn>>2,0),-73;if(0==Atomics.exchange(n(),Hn>>2,0))break;if(An(),Atomics.load(n(),e>>2)!=r)return-6;Atomics.exchange(n(),Hn>>2,e)}return 0}var u=Atomics.wait(n(),e>>2,r,a);if(\"timed-out\"===u)return-73;if(\"not-equal\"===u)return-6;if(\"ok\"===u)return 0;throw\"Atomics.wait returned an unexpected value \"+u}function It(){return 2147483648}function Dt(e,t,n){r().copyWithin(e,t,t+n)}function Nt(){return _?require(\"os\").cpus().length:navigator.hardwareConcurrency}function Rt(e,t){for(var r=arguments.length-2,n=Mn(),a=r,o=Ln(8*a),u=o>>3,s=0;s<r;s++){var c=arguments[2+s];i()[u+s]=c}var f=Sn(e,a,o,t);return jn(n),f}var Ft=[];function Mt(e,t,r){Ft.length=t;for(var n=r>>3,a=0;a<t;a++)Ft[a]=i()[n+a];return(e<0?Se[-e-1]:mn[e]).apply(null,Ft)}function jt(e){try{return N.grow(e-M.byteLength+65535>>>16),$(N.buffer),1}catch(e){}}function Lt(e){var t=r().length;if((e>>>=0)<=t)return!1;var n=2147483648;if(e>n)return!1;for(var a=1;a<=4;a*=2){var o=t*(1+.2/a);if(o=Math.min(o,e+100663296),jt(Math.min(n,J(Math.max(e,o),65536))))return!0}return!1}var Pt={inEventHandler:0,removeAllEventListeners:function(){for(var e=Pt.eventHandlers.length-1;e>=0;--e)Pt._removeHandler(e);Pt.eventHandlers=[],Pt.deferredCalls=[]},registerRemoveEventListeners:function(){Pt.removeEventListenersRegistered||(ae.push(Pt.removeAllEventListeners),Pt.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(e,t,r){function n(e,t){if(e.length!=t.length)return!1;for(var r in e)if(e[r]!=t[r])return!1;return!0}for(var a in Pt.deferredCalls){var o=Pt.deferredCalls[a];if(o.targetFunction==e&&n(o.argsList,r))return}Pt.deferredCalls.push({targetFunction:e,precedence:t,argsList:r}),Pt.deferredCalls.sort((function(e,t){return e.precedence<t.precedence}))},removeDeferredCalls:function(e){for(var t=0;t<Pt.deferredCalls.length;++t)Pt.deferredCalls[t].targetFunction==e&&(Pt.deferredCalls.splice(t,1),--t)},canPerformEventHandlerRequests:function(){return Pt.inEventHandler&&Pt.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(Pt.canPerformEventHandlerRequests())for(var e=0;e<Pt.deferredCalls.length;++e){var t=Pt.deferredCalls[e];Pt.deferredCalls.splice(e,1),--e,t.targetFunction.apply(null,t.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(e,t){for(var r=0;r<Pt.eventHandlers.length;++r)Pt.eventHandlers[r].target!=e||t&&t!=Pt.eventHandlers[r].eventTypeString||Pt._removeHandler(r--)},_removeHandler:function(e){var t=Pt.eventHandlers[e];t.target.removeEventListener(t.eventTypeString,t.eventListenerFunc,t.useCapture),Pt.eventHandlers.splice(e,1)},registerOrRemoveHandler:function(e){var t=function(t){++Pt.inEventHandler,Pt.currentEventHandler=e,Pt.runDeferredCalls(),e.handlerFunc(t),Pt.runDeferredCalls(),--Pt.inEventHandler};if(e.callbackfunc)e.eventListenerFunc=t,e.target.addEventListener(e.eventTypeString,t,e.useCapture),Pt.eventHandlers.push(e),Pt.registerRemoveEventListeners();else for(var r=0;r<Pt.eventHandlers.length;++r)Pt.eventHandlers[r].target==e.target&&Pt.eventHandlers[r].eventTypeString==e.eventTypeString&&Pt._removeHandler(r--)},queueEventHandlerOnThread_iiii:function(e,t,r,a,o){var i=Mn(),u=Ln(12);n()[u>>2]=r,n()[u+4>>2]=a,n()[u+8>>2]=o,xn(0,e,637534208,t,a,u),jn(i)},getTargetThreadForEventCallback:function(e){switch(e){case 1:return 0;case 2:return Fe.currentProxiedOperationCallerThread;default:return e}},getNodeNameForTarget:function(e){return e?e==window?\"#window\":e==screen?\"#screen\":e&&e.nodeName?e.nodeName:\"\":\"\"},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};function Gt(e){var t=X(e)+1,r=_n(t);return q(e,r,t),r}function Bt(e,t,r,a){var o=Mn(),i=Ln(12),u=0;t&&(u=Gt(t)),n()[i>>2]=u,n()[i+4>>2]=r,n()[i+8>>2]=a,xn(0,e,657457152,0,u,i),jn(o)}function Ht(e,t,r,n){Bt(e,t=t?z(t):\"\",r,n)}function Wt(e){return e>2?z(e):e}var Ut=[0,\"undefined\"!=typeof document?document:0,\"undefined\"!=typeof window?window:0];function Yt(e){return e=Wt(e),Ut[e]||(\"undefined\"!=typeof document?document.querySelector(e):void 0)}function zt(e){return Yt(e)}function Vt(e,t,r){var a=zt(e);if(!a)return-4;if(a.canvasSharedPtr&&(n()[a.canvasSharedPtr>>2]=t,n()[a.canvasSharedPtr+4>>2]=r),!a.offscreenCanvas&&a.controlTransferredOffscreen)return a.canvasSharedPtr?(Ht(n()[a.canvasSharedPtr+8>>2],e,t,r),1):-4;a.offscreenCanvas&&(a=a.offscreenCanvas);var o=!1;if(a.GLctxObject&&a.GLctxObject.GLctx){var i=a.GLctxObject.GLctx.getParameter(2978);o=0===i[0]&&0===i[1]&&i[2]===a.width&&i[3]===a.height}return a.width=t,a.height=r,o&&a.GLctxObject.GLctx.viewport(0,0,t,r),0}function qt(e,t,r){return T?Rt(16,1,e,t,r):Vt(e,t,r)}function Xt(e,t,r){return zt(e)?Vt(e,t,r):qt(e,t,r)}function Kt(e){}function Qt(e){var t=e.getExtension(\"ANGLE_instanced_arrays\");if(t)return e.vertexAttribDivisor=function(e,r){t.vertexAttribDivisorANGLE(e,r)},e.drawArraysInstanced=function(e,r,n,a){t.drawArraysInstancedANGLE(e,r,n,a)},e.drawElementsInstanced=function(e,r,n,a,o){t.drawElementsInstancedANGLE(e,r,n,a,o)},1}function Zt(e){var t=e.getExtension(\"OES_vertex_array_object\");if(t)return e.createVertexArray=function(){return t.createVertexArrayOES()},e.deleteVertexArray=function(e){t.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){t.bindVertexArrayOES(e)},e.isVertexArray=function(e){return t.isVertexArrayOES(e)},1}function Jt(e){var t=e.getExtension(\"WEBGL_draw_buffers\");if(t)return e.drawBuffers=function(e,r){t.drawBuffersWEBGL(e,r)},1}function $t(e){return!!(e.multiDrawWebgl=e.getExtension(\"WEBGL_multi_draw\"))}var er={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(e){er.lastError||(er.lastError=e)},getNewId:function(e){for(var t=er.counter++,r=e.length;r<t;r++)e[r]=null;return t},getSource:function(e,t,r,a){for(var o=\"\",i=0;i<t;++i){var u=a?n()[a+4*i>>2]:-1;o+=z(n()[r+4*i>>2],u<0?void 0:u)}return o},createContext:function(e,t){e.getContextSafariWebGL2Fixed||(e.getContextSafariWebGL2Fixed=e.getContext,e.getContext=function(t,r){var n=e.getContextSafariWebGL2Fixed(t,r);return\"webgl\"==t==n instanceof WebGLRenderingContext?n:null});var r=e.getContext(\"webgl\",t);return r?er.registerContext(r,t):0},registerContext:function(e,t){var r=_n(8);n()[r+4>>2]=yn();var a={handle:r,attributes:t,version:t.majorVersion,GLctx:e};return e.canvas&&(e.canvas.GLctxObject=a),er.contexts[r]=a,(void 0===t.enableExtensionsByDefault||t.enableExtensionsByDefault)&&er.initExtensions(a),r},makeContextCurrent:function(e){return er.currentContext=er.contexts[e],c.ctx=rn=er.currentContext&&er.currentContext.GLctx,!(e&&!rn)},getContext:function(e){return er.contexts[e]},deleteContext:function(e){er.currentContext===er.contexts[e]&&(er.currentContext=null),\"object\"==typeof Pt&&Pt.removeAllHandlersOnTarget(er.contexts[e].GLctx.canvas),er.contexts[e]&&er.contexts[e].GLctx.canvas&&(er.contexts[e].GLctx.canvas.GLctxObject=void 0),En(er.contexts[e].handle),er.contexts[e]=null},initExtensions:function(e){if(e||(e=er.currentContext),!e.initExtensionsDone){e.initExtensionsDone=!0;var t=e.GLctx;Qt(t),Zt(t),Jt(t),t.disjointTimerQueryExt=t.getExtension(\"EXT_disjoint_timer_query\"),$t(t),(t.getSupportedExtensions()||[]).forEach((function(e){e.includes(\"lose_context\")||e.includes(\"debug\")||t.getExtension(e)}))}}},tr=[\"default\",\"low-power\",\"high-performance\"];function rr(e,t){var r=t>>2,a=n()[r+6],o={alpha:!!n()[r+0],depth:!!n()[r+1],stencil:!!n()[r+2],antialias:!!n()[r+3],premultipliedAlpha:!!n()[r+4],preserveDrawingBuffer:!!n()[r+5],powerPreference:tr[a],failIfMajorPerformanceCaveat:!!n()[r+7],majorVersion:n()[r+8],minorVersion:n()[r+9],enableExtensionsByDefault:n()[r+10],explicitSwapControl:n()[r+11],proxyContextToMainThread:n()[r+12],renderViaOffscreenBackBuffer:n()[r+13]},i=zt(e);return i?o.explicitSwapControl?0:er.createContext(i,o):0}function nr(e,t){return rr(e,t)}var ar={initManagers:function(){this.mgrContext||(this.mgrContext=this.mgrContext||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrGraph=this.mgrGraph||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrGraphBuilder=this.mgrGraphBuilder||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrNamedInputs=this.mgrNamedInputs||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrNamedOperands=this.mgrNamedOperands||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrNamedOutputs=this.mgrNamedOutputs||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrNamedResults=this.mgrNamedResults||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrOperand=this.mgrOperand||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}},this.mgrResult=this.mgrResult||{objects:{},nextId:1,create:function(e,t){t=t||{};var r=this.nextId++;return t.refcount=1,t.object=e,this.objects[r]=t,r},get:function(e){if(0!==e)return this.objects[e].object},reference:function(e){this.objects[e].refcount++},release:function(e){var t=this.objects[e];t.refcount--,t.refcount<=0&&delete this.objects[e]}})},AutoPad:[\"explicit\",\"same-upper\",\"same-lower\"],BuildGraphStatus:[\"success\",\"error\",\"context-lost\",\"unknown\"],ComputeGraphStatus:[\"success\",\"error\",\"context-lost\",\"unknown\"],ErrorFilter:[\"none\",\"validation\",\"out-of-memory\"],ErrorType:[\"no-error\",\"validation\",\"out-of-memory\",\"unknown\",\"device-lost\"],FilterOperandLayout:[\"oihw\",\"hwio\",\"ohwi\",\"ihwo\"],FusedActivation:[\"none\",\"relu\"],InputOperandLayout:[\"nchw\",\"nhwc\"],OperandType:[\"float32\",\"float16\",\"int32\",\"uint32\",\"int8\",\"uint8\"],PowerPreference:[\"default\",\"high_performance\",\"low_power\"],makeI32Array:function(e,t){if(0!==e&&0!==t){for(var r=[],a=0;a<e;++a,t+=4)r.push(n()[t>>2]);return r}},makeArrayBufferView:function(e,t,n=\"float32\"){return U(\"float32\"===n),new Float32Array(r().buffer,e,t/Float32Array.BYTES_PER_ELEMENT)},makeClampOptions:function(e){return{minValue:this.mgrOperand.get(n()[e>>2]),maxValue:this.mgrOperand.get(n()[e+4>>2])}},makeBatchNormOptions:function(e){return{scale:this.mgrOperand.get(n()[e>>2]),bias:this.mgrOperand.get(n()[e+4>>2]),axis:n()[e+8>>2],epsilon:o()[e+12>>2],activation:this.FusedActivation[n()[e+16>>2]]}},makeGemmOptions:function(e){return{c:this.mgrOperand.get(n()[e>>2]),alpha:o()[e+4>>2],beta:o()[e+8>>2],aTranspose:0!==t()[e+12>>0],bTranspose:0!==t()[e+13>>0]}},makeOperandDescriptor:function(e){return{type:this.OperandType[a()[e>>2]],dimensions:this.makeI32Array(a()[e+8>>2],n()[e+4>>2])}},makeConv2dOptions:function(e){return{padding:\"explicit\"===this.AutoPad[n()[e+24>>2]]?this.makeI32Array(a()[e>>2],n()[e+4>>2]):void 0,strides:this.makeI32Array(a()[e+8>>2],n()[e+12>>2]),dilations:this.makeI32Array(a()[e+16>>2],n()[e+20>>2]),autoPad:this.AutoPad[n()[e+24>>2]],groups:n()[e+28>>2],inputLayout:this.InputOperandLayout[n()[e+32>>2]],filterLayout:this.FilterOperandLayout[n()[e+36>>2]],bias:this.mgrOperand.get(n()[e+40>>2]),activation:this.FusedActivation[n()[e+44>>2]]}},makePool2dOptions:function(e){return{windowDimensions:this.makeI32Array(a()[e>>2],n()[e+4>>2]),padding:\"explicit\"===this.AutoPad[n()[e+32>>2]]?this.makeI32Array(a()[e+8>>2],n()[e+12>>2]):void 0,strides:this.makeI32Array(a()[e+16>>2],n()[e+20>>2]),dilations:this.makeI32Array(a()[e+24>>2],n()[e+28>>2]),autoPad:this.AutoPad[n()[e+32>>2]],inputLayout:this.InputOperandLayout[n()[e+36>>2]]}},makeInput:function(e){return{data:this.makeArrayBufferView(n()[e>>2],a()[e+4>>2]),dimensions:0===n()[e+8>>2]?void 0:this.makeI32Array(a()[e+12>>2],n()[e+8>>2])}},makeOutput:function(e){return{data:0===n()[e>>2]?void 0:this.makeArrayBufferView(n()[e>>2],a()[e+4>>2]),dimensions:0===n()[e+8>>2]?void 0:this.makeI32Array(a()[e+12>>2],n()[e+8>>2])}}};function or(){var e=navigator.ml.createContext();return ar.mgrContext.create(e)}var ir={};function ur(){return m||\"./this.program\"}function sr(){if(!sr.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ur()};for(var t in ir)e[t]=ir[t];var r=[];for(var t in e)r.push(t+\"=\"+e[t]);sr.strings=r}return sr.strings}function cr(e,t){if(T)return Rt(17,1,e,t);var r=0;return sr().forEach((function(a,o){var i=t+r;n()[e+4*o>>2]=i,Z(a,i),r+=a.length+1})),0}function fr(e,t){if(T)return Rt(18,1,e,t);var r=sr();n()[e>>2]=r.length;var a=0;return r.forEach((function(e){a+=e.length+1})),n()[t>>2]=a,0}function lr(e){return T?Rt(19,1,e):0}function dr(e,r){if(T)return Rt(20,1,e,r);var n=1==e||2==e?2:ve();return t()[r>>0]=n,0}function mr(e,t,r,a){if(T)return Rt(21,1,e,t,r,a);var o=$e.getStreamFromFD(e),i=$e.doReadv(o,t,r);return n()[a>>2]=i,0}function pr(e,t,r,n,a){if(T)return Rt(22,1,e,t,r,n,a)}function hr(){\"undefined\"!=typeof _fflush&&_fflush(0);var e=$e.buffers;e[1].length&&$e.printChar(1,10),e[2].length&&$e.printChar(2,10)}function gr(e,t,a,o){if(T)return Rt(23,1,e,t,a,o);for(var i=0,u=0;u<a;u++){for(var s=n()[t+8*u>>2],c=n()[t+(8*u+4)>>2],f=0;f<c;f++)$e.printChar(e,r()[s+f]);i+=c}return n()[o>>2]=i,0}function _r(e){var t=Date.now();return n()[e>>2]=t/1e3|0,n()[e+4>>2]=t%1e3*1e3|0,0}function vr(e,t){var r=new Date(1e3*n()[e>>2]);n()[t>>2]=r.getUTCSeconds(),n()[t+4>>2]=r.getUTCMinutes(),n()[t+8>>2]=r.getUTCHours(),n()[t+12>>2]=r.getUTCDate(),n()[t+16>>2]=r.getUTCMonth(),n()[t+20>>2]=r.getUTCFullYear()-1900,n()[t+24>>2]=r.getUTCDay(),n()[t+36>>2]=0,n()[t+32>>2]=0;var a=Date.UTC(r.getUTCFullYear(),0,1,0,0,0,0),o=(r.getTime()-a)/864e5|0;return n()[t+28>>2]=o,vr.GMTString||(vr.GMTString=K(\"GMT\")),n()[t+40>>2]=vr.GMTString,t}function Er(){if(T)return Rt(24,1);if(!Er.called){Er.called=!0;var e=(new Date).getFullYear(),t=new Date(e,0,1),r=new Date(e,6,1),a=t.getTimezoneOffset(),o=r.getTimezoneOffset(),i=Math.max(a,o);n()[Fn()>>2]=60*i,n()[Rn()>>2]=Number(a!=o);var u=l(t),s=l(r),c=K(u),f=K(s);o<a?(n()[Nn()>>2]=c,n()[Nn()+4>>2]=f):(n()[Nn()>>2]=f,n()[Nn()+4>>2]=c)}function l(e){var t=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);return t?t[1]:\"GMT\"}}function yr(e,t){Er();var r=new Date(1e3*n()[e>>2]);n()[t>>2]=r.getSeconds(),n()[t+4>>2]=r.getMinutes(),n()[t+8>>2]=r.getHours(),n()[t+12>>2]=r.getDate(),n()[t+16>>2]=r.getMonth(),n()[t+20>>2]=r.getFullYear()-1900,n()[t+24>>2]=r.getDay();var a=new Date(r.getFullYear(),0,1),o=(r.getTime()-a.getTime())/864e5|0;n()[t+28>>2]=o,n()[t+36>>2]=-60*r.getTimezoneOffset();var i=new Date(r.getFullYear(),6,1).getTimezoneOffset(),u=a.getTimezoneOffset(),s=0|(i!=u&&r.getTimezoneOffset()==Math.min(u,i));n()[t+32>>2]=s;var c=n()[Nn()+(s?4:0)>>2];return n()[t+40>>2]=c,t}function Or(e){Er();var t=new Date(n()[e+20>>2]+1900,n()[e+16>>2],n()[e+12>>2],n()[e+8>>2],n()[e+4>>2],n()[e>>2],0),r=n()[e+32>>2],a=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=o.getTimezoneOffset(),s=Math.min(u,i);if(r<0)n()[e+32>>2]=Number(i!=u&&s==a);else if(r>0!=(s==a)){var c=Math.max(u,i),f=r>0?s:c;t.setTime(t.getTime()+6e4*(f-a))}n()[e+24>>2]=t.getDay();var l=(t.getTime()-o.getTime())/864e5|0;return n()[e+28>>2]=l,n()[e>>2]=t.getSeconds(),n()[e+4>>2]=t.getMinutes(),n()[e+8>>2]=t.getHours(),n()[e+12>>2]=t.getDate(),n()[e+16>>2]=t.getMonth(),t.getTime()/1e3|0}function br(e){ar.mgrContext.reference(e)}function wr(e){ar.mgrContext.release(e)}function Tr(e,t,r){var n=ar.mgrGraphBuilder.get(e),a=ar.mgrOperand.get(t),o=ar.mgrOperand.get(r),i=n.add(a,o);return ar.mgrOperand.create(i)}function Ar(e,t,r){var n=ar.mgrGraphBuilder.get(e),a=ar.mgrOperand.get(t),o=ar.makePool2dOptions(r),i=n.averagePool2d(a,o);return ar.mgrOperand.create(i)}function Sr(e,t,r,n,a){var o=ar.mgrGraphBuilder.get(e),i=ar.mgrOperand.get(t),u=ar.mgrOperand.get(r),s=ar.mgrOperand.get(n),c=ar.makeBatchNormOptions(a),f=o.batchNormalization(i,u,s,c);return ar.mgrOperand.create(f)}function xr(e,t){var r=ar.mgrGraphBuilder.get(e),n=ar.mgrNamedOperands.get(t);try{var a=r.buildSync(n);return ar.mgrGraph.create(a)}catch(e){return console.log(\"builder.buildSync failed: \"+e),0}}function kr(e,t,r,n){for(var a=ar.mgrGraphBuilder.get(e),o=ar.makeI32Array(t,r),i=[],u=0;u<o.length;++u)i.push(ar.mgrOperand.get(o[u]));var s=a.concat(i,n);return ar.mgrOperand.create(s)}function Cr(e,t,r,n){var a=ar.mgrGraphBuilder.get(e),o=ar.makeOperandDescriptor(t),i=ar.makeArrayBufferView(r,n),u=a.constant(o,i);return ar.mgrOperand.create(u)}function Ir(e,t,r,n){var a=ar.mgrGraphBuilder.get(e),o=ar.mgrOperand.get(t),i=ar.mgrOperand.get(r),u=ar.makeConv2dOptions(n),s=a.conv2d(o,i,u);return ar.mgrOperand.create(s)}function Dr(e,t,r,n){var a=ar.mgrGraphBuilder.get(e),o=ar.mgrOperand.get(t),i=ar.mgrOperand.get(r),u=ar.makeGemmOptions(n),s=a.gemm(o,i,u);return ar.mgrOperand.create(s)}function Nr(e,t,r){var n=ar.mgrGraphBuilder.get(e),a=z(t),o=ar.makeOperandDescriptor(r),i=n.input(a,o);return ar.mgrOperand.create(i)}function Rr(e,t,r){var n=ar.mgrGraphBuilder.get(e),a=ar.mgrOperand.get(t),o=ar.mgrOperand.get(r),i=n.matmul(a,o);return ar.mgrOperand.create(i)}function Fr(e,t,r){var n=ar.mgrGraphBuilder.get(e),a=ar.mgrOperand.get(t),o=ar.makePool2dOptions(r),i=n.maxPool2d(a,o);return ar.mgrOperand.create(i)}function Mr(e){ar.mgrGraphBuilder.release(e)}function jr(e,t){var r=ar.mgrGraphBuilder.get(e),n=ar.mgrOperand.get(t),a=r.relu(n);return ar.mgrOperand.create(a)}function Lr(e,t,r,n){var a=ar.mgrGraphBuilder.get(e),o=ar.mgrOperand.get(t),i=ar.makeI32Array(n,r),u=a.reshape(o,i);return ar.mgrOperand.create(u)}function Pr(e,t,r){var n=ar.mgrGraph.get(e),a=ar.mgrNamedInputs.get(t),o=ar.mgrNamedOutputs.get(r);return n.computeSync(a,o)}function Gr(e){ar.mgrGraph.reference(e)}function Br(e){ar.mgrGraph.release(e)}function Hr(e){ar.mgrNamedInputs.release(e)}function Wr(e,t,r){var n=ar.mgrNamedInputs.get(e),a=z(t),o=ar.makeInput(r);n[a]=o}function Ur(e){ar.mgrNamedOperands.release(e)}function Yr(e,t,r){var n=ar.mgrNamedOperands.get(e),a=z(t),o=ar.mgrOperand.get(r);n[a]=o}function zr(e){ar.mgrNamedOutputs.release(e)}function Vr(e,t,r){var n=ar.mgrNamedOutputs.get(e),a=z(t),o=ar.makeOutput(r);n[a]=o}function qr(e){ar.mgrOperand.reference(e)}function Xr(e){ar.mgrOperand.release(e)}function Kr(e){if(T)throw\"Internal Error! spawnThread() can only ever be called from main application thread!\";var t=Fe.getNewWorker();if(!t)return 6;if(void 0!==t.pthread)throw\"Internal error!\";if(!e.pthread_ptr)throw\"Internal error, no pthread ptr!\";Fe.runningWorkers.push(t);for(var r=_n(512),o=0;o<128;++o)n()[r+4*o>>2]=0;var i=e.stackBase+e.stackSize,u=Fe.pthreads[e.pthread_ptr]={worker:t,stackBase:e.stackBase,stackSize:e.stackSize,allocatedOwnStack:e.allocatedOwnStack,threadInfoStruct:e.pthread_ptr},s=u.threadInfoStruct>>2;Atomics.store(a(),s+16,e.detached),Atomics.store(a(),s+25,r),Atomics.store(a(),s+10,u.threadInfoStruct),Atomics.store(a(),s+20,e.stackSize),Atomics.store(a(),s+19,i),Atomics.store(a(),s+26,e.stackSize),Atomics.store(a(),s+28,i),Atomics.store(a(),s+29,e.detached);var c=Dn()+40;Atomics.store(a(),s+43,c),t.pthread=u;var f={cmd:\"run\",start_routine:e.startRoutine,arg:e.arg,threadInfoStruct:e.pthread_ptr,stackBase:e.stackBase,stackSize:e.stackSize};return t.runPthread=function(){f.time=performance.now(),t.postMessage(f,e.transferList)},t.loaded&&(t.runPthread(),delete t.runPthread),0}function Qr(e,t,r,o){if(\"undefined\"==typeof SharedArrayBuffer)return I(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;if(!e)return I(\"pthread_create called with a null thread pointer!\"),28;var i=[];if(T&&0===i.length)return Tn(687865856,e,t,r,o);var u=0,s=0,c=0;t&&-1!=t?(u=n()[t>>2],u+=81920,s=n()[t+8>>2],c=0!==n()[t+12>>2]):u=2097152;var f=0==s;f?s=Gn(16,u):U((s-=u)>0);for(var l=_n(228),d=0;d<57;++d)a()[(l>>2)+d]=0;n()[e>>2]=l,n()[l+12>>2]=l;var m=l+152;n()[m>>2]=m;var p={stackBase:s,stackSize:u,allocatedOwnStack:f,detached:c,startRoutine:r,pthread_ptr:l,arg:o,transferList:i};return T?(p.cmd=\"spawnThread\",postMessage(p,i),0):Kr(p)}function Zr(){if(T){var e=yn();if(e&&!Atomics.load(a(),e+56>>2)&&2==Atomics.load(a(),e+0>>2))throw\"Canceled!\"}}function Jr(e,t,r){if(!e)return I(\"pthread_join attempted on a null thread pointer!\"),Ce.ESRCH;if(T&&yn()==e)return I(\"PThread \"+e+\" is attempting to join to itself!\"),Ce.EDEADLK;if(!T&&bn()==e)return I(\"Main thread \"+e+\" is attempting to join to itself!\"),Ce.EDEADLK;if(n()[e+12>>2]!==e)return I(\"pthread_join attempted on thread \"+e+\", which does not point to a valid thread, or does not exist anymore!\"),Ce.ESRCH;if(Atomics.load(a(),e+64>>2))return I(\"Attempted to join thread \"+e+\", which was already detached!\"),Ce.EINVAL;for(r&&xt();;){var o=Atomics.load(a(),e+0>>2);if(1==o){var i=Atomics.load(a(),e+4>>2);return t&&(n()[t>>2]=i),Atomics.store(a(),e+64>>2,1),T?postMessage({cmd:\"cleanupThread\",thread:e}):Re(e),0}if(!r)return Ce.EBUSY;Zr(),T||An(),Ct(e+0,o,T?100:1)}}function $r(e,t){return Jr(e,t,!0)}function en(e){return e%4==0&&(e%100!=0||e%400==0)}function tn(e,t){for(var r=0,n=0;n<=t;r+=e[n++]);return r}var rn,nn=[31,29,31,30,31,30,31,31,30,31,30,31],an=[31,28,31,30,31,30,31,31,30,31,30,31];function on(e,t){for(var r=new Date(e.getTime());t>0;){var n=en(r.getFullYear()),a=r.getMonth(),o=(n?nn:an)[a];if(!(t>o-r.getDate()))return r.setDate(r.getDate()+t),r;t-=o-r.getDate()+1,r.setDate(1),a<11?r.setMonth(a+1):(r.setMonth(0),r.setFullYear(r.getFullYear()+1))}return r}function un(e,t,r,a){var o=n()[a+40>>2],i={tm_sec:n()[a>>2],tm_min:n()[a+4>>2],tm_hour:n()[a+8>>2],tm_mday:n()[a+12>>2],tm_mon:n()[a+16>>2],tm_year:n()[a+20>>2],tm_wday:n()[a+24>>2],tm_yday:n()[a+28>>2],tm_isdst:n()[a+32>>2],tm_gmtoff:n()[a+36>>2],tm_zone:o?z(o):\"\"},u=z(r),s={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var c in s)u=u.replace(new RegExp(c,\"g\"),s[c]);var f=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],l=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function d(e,t,r){for(var n=\"number\"==typeof e?e.toString():e||\"\";n.length<t;)n=r[0]+n;return n}function m(e,t){return d(e,t,\"0\")}function p(e,t){function r(e){return e<0?-1:e>0?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function h(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function g(e){var t=on(new Date(e.tm_year+1900,0,1),e.tm_yday),r=new Date(t.getFullYear(),0,4),n=new Date(t.getFullYear()+1,0,4),a=h(r),o=h(n);return p(a,t)<=0?p(o,t)<=0?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var _={\"%a\":function(e){return f[e.tm_wday].substring(0,3)},\"%A\":function(e){return f[e.tm_wday]},\"%b\":function(e){return l[e.tm_mon].substring(0,3)},\"%B\":function(e){return l[e.tm_mon]},\"%C\":function(e){return m((e.tm_year+1900)/100|0,2)},\"%d\":function(e){return m(e.tm_mday,2)},\"%e\":function(e){return d(e.tm_mday,2,\" \")},\"%g\":function(e){return g(e).toString().substring(2)},\"%G\":function(e){return g(e)},\"%H\":function(e){return m(e.tm_hour,2)},\"%I\":function(e){var t=e.tm_hour;return 0==t?t=12:t>12&&(t-=12),m(t,2)},\"%j\":function(e){return m(e.tm_mday+tn(en(e.tm_year+1900)?nn:an,e.tm_mon-1),3)},\"%m\":function(e){return m(e.tm_mon+1,2)},\"%M\":function(e){return m(e.tm_min,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return e.tm_hour>=0&&e.tm_hour<12?\"AM\":\"PM\"},\"%S\":function(e){return m(e.tm_sec,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.tm_wday||7},\"%U\":function(e){var t=new Date(e.tm_year+1900,0,1),r=0===t.getDay()?t:on(t,7-t.getDay()),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(p(r,n)<0){var a=tn(en(n.getFullYear())?nn:an,n.getMonth()-1)-31,o=31-r.getDate()+a+n.getDate();return m(Math.ceil(o/7),2)}return 0===p(r,t)?\"01\":\"00\"},\"%V\":function(e){var t,r=new Date(e.tm_year+1900,0,4),n=new Date(e.tm_year+1901,0,4),a=h(r),o=h(n),i=on(new Date(e.tm_year+1900,0,1),e.tm_yday);return p(i,a)<0?\"53\":p(o,i)<=0?\"01\":(t=a.getFullYear()<e.tm_year+1900?e.tm_yday+32-a.getDate():e.tm_yday+1-a.getDate(),m(Math.ceil(t/7),2))},\"%w\":function(e){return e.tm_wday},\"%W\":function(e){var t=new Date(e.tm_year,0,1),r=1===t.getDay()?t:on(t,0===t.getDay()?1:7-t.getDay()+1),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(p(r,n)<0){var a=tn(en(n.getFullYear())?nn:an,n.getMonth()-1)-31,o=31-r.getDate()+a+n.getDate();return m(Math.ceil(o/7),2)}return 0===p(r,t)?\"01\":\"00\"},\"%y\":function(e){return(e.tm_year+1900).toString().substring(2)},\"%Y\":function(e){return e.tm_year+1900},\"%z\":function(e){var t=e.tm_gmtoff,r=t>=0;return t=(t=Math.abs(t)/60)/60*100+t%60,(r?\"+\":\"-\")+String(\"0000\"+t).slice(-4)},\"%Z\":function(e){return e.tm_zone},\"%%\":function(){return\"%\"}};for(var c in _)u.includes(c)&&(u=u.replace(new RegExp(c,\"g\"),_[c](i)));var v=pn(u,!1);return v.length>t?0:(Q(v,e),v.length-1)}function sn(e,t,r,n){return un(e,t,r,n)}function cn(e){var t=ar.mgrContext.get(e),r=new MLGraphBuilder(t);return ar.mgrGraphBuilder.create(r)}function fn(){return ar.mgrNamedInputs.create({})}function ln(){return ar.mgrNamedOperands.create({})}function dn(){return ar.mgrNamedOutputs.create({})}T||Fe.initMainThreadBlock(),ar.initManagers();var mn=[null,qe,et,tt,rt,nt,ot,it,ut,ct,lt,dt,mt,pt,ht,gt,qt,cr,fr,lr,dr,mr,pr,gr,Er];function pn(e,t,r){var n=r>0?r:X(e)+1,a=new Array(n),o=V(e,a,0,a.length);return t&&(a.length=o),a}var hn,gn={h:Be,ba:Ye,b:Ve,d:Xe,e:Qe,c:Je,Q:et,r:tt,X:rt,R:nt,t:at,I:ot,S:it,W:ut,V:ct,U:lt,q:dt,P:mt,N:pt,u:ht,O:gt,aa:_t,g:vt,y:Ue,Ka:Et,M:yt,m:Ot,T:bt,D:wt,w:St,H:xt,n:kt,j:Ct,k:Ie,Y:It,i:Le,F:Dt,o:Nt,Z:Mt,G:Lt,_:Xt,v:Kt,$:nr,Ia:or,K:cr,L:fr,l:lr,J:dr,s:mr,C:pr,p:gr,na:_r,La:vr,E:xe,A:yr,a:N||c.wasmMemory,z:Or,Ha:br,Ga:wr,Ca:Tr,Ba:Ar,Aa:Sr,za:xr,ya:kr,xa:Cr,wa:Ir,va:Dr,ua:Nr,ta:Rr,sa:Fr,pa:Mr,ra:jr,qa:Lr,Fa:Pr,Ea:Gr,Da:Br,ma:Hr,oa:Wr,ka:Ur,la:Yr,ia:zr,ja:Vr,ha:qr,ga:Xr,x:Qr,B:$r,Ja:un,f:sn,fa:cn,ea:fn,da:ln,ca:dn},_n=(Ae(),c.___wasm_call_ctors=function(){return(c.___wasm_call_ctors=c.asm.Ma).apply(null,arguments)},c._OrtInit=function(){return(c._OrtInit=c.asm.Na).apply(null,arguments)},c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.Oa).apply(null,arguments)},c._OrtSessionOptionsAppendExecutionProviderWebNN=function(){return(c._OrtSessionOptionsAppendExecutionProviderWebNN=c.asm.Pa).apply(null,arguments)},c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.Qa).apply(null,arguments)},c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.Ra).apply(null,arguments)},c._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.Sa).apply(null,arguments)},c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.Ta).apply(null,arguments)},c._OrtGetInputCount=function(){return(c._OrtGetInputCount=c.asm.Ua).apply(null,arguments)},c._OrtGetOutputCount=function(){return(c._OrtGetOutputCount=c.asm.Va).apply(null,arguments)},c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.Wa).apply(null,arguments)},c._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.Xa).apply(null,arguments)},c._OrtFree=function(){return(c._OrtFree=c.asm.Ya).apply(null,arguments)},c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.Za).apply(null,arguments)},c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm._a).apply(null,arguments)},c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.$a).apply(null,arguments)},c._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.ab).apply(null,arguments)},c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.bb).apply(null,arguments)},c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.cb).apply(null,arguments)},c._OrtRun=function(){return(c._OrtRun=c.asm.db).apply(null,arguments)},c._malloc=function(){return(_n=c._malloc=c.asm.fb).apply(null,arguments)}),vn=c.___errno_location=function(){return(vn=c.___errno_location=c.asm.gb).apply(null,arguments)},En=c._free=function(){return(En=c._free=c.asm.hb).apply(null,arguments)},yn=c._pthread_self=function(){return(yn=c._pthread_self=c.asm.ib).apply(null,arguments)},On=(c._emscripten_tls_init=function(){return(c._emscripten_tls_init=c.asm.jb).apply(null,arguments)},c._emscripten_current_thread_process_queued_calls=function(){return(c._emscripten_current_thread_process_queued_calls=c.asm.kb).apply(null,arguments)},c._emscripten_register_main_browser_thread_id=function(){return(On=c._emscripten_register_main_browser_thread_id=c.asm.lb).apply(null,arguments)}),bn=c._emscripten_main_browser_thread_id=function(){return(bn=c._emscripten_main_browser_thread_id=c.asm.mb).apply(null,arguments)},wn=c.__emscripten_do_dispatch_to_thread=function(){return(wn=c.__emscripten_do_dispatch_to_thread=c.asm.nb).apply(null,arguments)},Tn=c._emscripten_sync_run_in_main_thread_4=function(){return(Tn=c._emscripten_sync_run_in_main_thread_4=c.asm.ob).apply(null,arguments)},An=c._emscripten_main_thread_process_queued_calls=function(){return(An=c._emscripten_main_thread_process_queued_calls=c.asm.pb).apply(null,arguments)},Sn=c._emscripten_run_in_main_runtime_thread_js=function(){return(Sn=c._emscripten_run_in_main_runtime_thread_js=c.asm.qb).apply(null,arguments)},xn=c.__emscripten_call_on_thread=function(){return(xn=c.__emscripten_call_on_thread=c.asm.rb).apply(null,arguments)},kn=c.__emscripten_thread_init=function(){return(kn=c.__emscripten_thread_init=c.asm.sb).apply(null,arguments)},Cn=c._memset=function(){return(Cn=c._memset=c.asm.tb).apply(null,arguments)},In=c.___pthread_tsd_run_dtors=function(){return(In=c.___pthread_tsd_run_dtors=c.asm.ub).apply(null,arguments)},Dn=c._emscripten_get_global_libc=function(){return(Dn=c._emscripten_get_global_libc=c.asm.vb).apply(null,arguments)},Nn=c.__get_tzname=function(){return(Nn=c.__get_tzname=c.asm.wb).apply(null,arguments)},Rn=c.__get_daylight=function(){return(Rn=c.__get_daylight=c.asm.xb).apply(null,arguments)},Fn=c.__get_timezone=function(){return(Fn=c.__get_timezone=c.asm.yb).apply(null,arguments)},Mn=c.stackSave=function(){return(Mn=c.stackSave=c.asm.zb).apply(null,arguments)},jn=c.stackRestore=function(){return(jn=c.stackRestore=c.asm.Ab).apply(null,arguments)},Ln=c.stackAlloc=function(){return(Ln=c.stackAlloc=c.asm.Bb).apply(null,arguments)},Pn=c._emscripten_stack_set_limits=function(){return(Pn=c._emscripten_stack_set_limits=c.asm.Cb).apply(null,arguments)},Gn=c._memalign=function(){return(Gn=c._memalign=c.asm.Db).apply(null,arguments)},Bn=c.__emscripten_allow_main_runtime_queued_calls=653536,Hn=c.__emscripten_main_thread_futex=658904;function Wn(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function Un(e){if(e=e||d,!(me>0)){if(T)return u(c),ue(),void postMessage({cmd:\"loaded\"});ie(),me>0||(c.setStatus?(c.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){c.setStatus(\"\")}),1),t()}),1)):t())}function t(){hn||(hn=!0,c.calledRun=!0,W||(ue(),u(c),c.onRuntimeInitialized&&c.onRuntimeInitialized(),ce()))}}function Yn(e,t){if(!t||!Ge()||0!==e){if(!t&&T)throw postMessage({cmd:\"exitProcess\",returnCode:e}),new Wn(e);Ge()||(Fe.terminateAllThreads(),se(),c.onExit&&c.onExit(e),W=!0),p(e,new Wn(e))}}if(c.UTF8ToString=z,c.stringToUTF8=q,c.lengthBytesUTF8=X,c.PThread=Fe,c.stackSave=Mn,c.stackRestore=jn,c.stackAlloc=Ln,c.PThread=Fe,c.wasmMemory=N,c.ExitStatus=Wn,he=function e(){hn||Un(),hn||(he=e)},c.run=Un,c.preInit)for(\"function\"==typeof c.preInit&&(c.preInit=[c.preInit]);c.preInit.length>0;)c.preInit.pop()();return T&&(F=!1,Fe.initWorker()),Un(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\nvar ortWasm = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm) {\n  ortWasm = ortWasm || {};\n\nvar Module=typeof ortWasm!==\"undefined\"?ortWasm:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);quit_=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){read_=function shell_read(f){return read(f)}}readBinary=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){arguments_=scriptArgs}else if(typeof arguments!=\"undefined\"){arguments_=arguments}if(typeof quit===\"function\"){quit_=function(status){quit(status)}}if(typeof print!==\"undefined\"){if(typeof console===\"undefined\")console={};console.log=print;console.warn=console.error=typeof printErr!==\"undefined\"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||false;if(typeof WebAssembly!==\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith(\"file://\")}var wasmBinaryFile=\"ort-wasm.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"xa\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"bb\"];addOnInit(Module[\"asm\"][\"ya\"]);removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){var result=WebAssembly.instantiate(binary,info);return result}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync().catch(readyPromiseReject);return{}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function ___cxa_allocate_exception(size){return _malloc(size+ExceptionInfoAttrs.SIZE)+ExceptionInfoAttrs.SIZE}function _atexit(func,arg){__ATEXIT__.unshift({func:func,arg:arg})}function ___cxa_atexit(a0,a1){return _atexit(a0,a1)}function ___cxa_thread_atexit(a0,a1){return _atexit(a0,a1)}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-ExceptionInfoAttrs.SIZE;this.set_type=function(type){HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]=type};this.get_type=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=prev-1;return prev===1}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},get64:function(low,high){return low}};function ___sys_access(path,amode){path=SYSCALLS.getStr(path);return SYSCALLS.doAccess(path,amode)}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_fstat64(fd,buf){}function ___sys_getdents64(fd,dirp,count){}function ___sys_getpid(){return 42}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_lstat64(path,buf){}function ___sys_mkdir(path,mode){path=SYSCALLS.getStr(path);return SYSCALLS.doMkdir(path,mode)}function syscallMmap2(addr,len,prot,flags,fd,off){off<<=12;var ptr;var allocated=false;if((flags&16)!==0&&addr%65536!==0){return-28}if((flags&32)!==0){ptr=_memalign(65536,len);if(!ptr)return-48;_memset(ptr,0,len);allocated=true}else{return-52}SYSCALLS.mappings[ptr]={malloc:ptr,len:len,allocated:allocated,fd:fd,prot:prot,flags:flags,offset:off};return ptr}function ___sys_mmap2(addr,len,prot,flags,fd,off){return syscallMmap2(addr,len,prot,flags,fd,off)}function syscallMunmap(addr,len){if((addr|0)===-1||len===0){return-28}var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc)}}return 0}function ___sys_munmap(addr,len){return syscallMunmap(addr,len)}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs}function ___sys_readlink(path,buf,bufsize){path=SYSCALLS.getStr(path);return SYSCALLS.doReadlink(path,buf,bufsize)}function ___sys_rmdir(path){}function ___sys_stat64(path,buf){}function ___sys_unlink(path){}function _abort(){abort()}var _emscripten_get_now;if(ENVIRONMENT_IS_NODE){_emscripten_get_now=function(){var t=process[\"hrtime\"]();return t[0]*1e3+t[1]/1e6}}else if(typeof dateNow!==\"undefined\"){_emscripten_get_now=dateNow}else _emscripten_get_now=function(){return performance.now()};var _emscripten_get_now_is_monotonic=true;function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now()}else if((clk_id===1||clk_id===4)&&_emscripten_get_now_is_monotonic){now=_emscripten_get_now()}else{setErrNo(28);return-1}HEAP32[tp>>2]=now/1e3|0;HEAP32[tp+4>>2]=now%1e3*1e3*1e3|0;return 0}function _difftime(time1,time0){return time1-time0}function _dlclose(handle){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlerror(){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlopen(filename,flag){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlsym(handle,symbol){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _emscripten_get_heap_max(){return 2147483648}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}function _emscripten_thread_sleep(msecs){var start=_emscripten_get_now();while(_emscripten_get_now()-start<msecs){}}var WebNN={initManagers:function(){if(this[\"mgrContext\"])return;function makeManager(){return{objects:{},nextId:1,create:function(object,wrapper){wrapper=wrapper||{};var id=this.nextId++;wrapper.refcount=1;wrapper.object=object;this.objects[id]=wrapper;return id},get:function(id){if(id===0)return undefined;var o=this.objects[id];return o.object},reference:function(id){var o=this.objects[id];o.refcount++},release:function(id){var o=this.objects[id];o.refcount--;if(o.refcount<=0){delete this.objects[id]}}}}this[\"mgrContext\"]=this[\"mgrContext\"]||makeManager();this.mgrGraph=this.mgrGraph||makeManager();this.mgrGraphBuilder=this.mgrGraphBuilder||makeManager();this.mgrNamedInputs=this.mgrNamedInputs||makeManager();this.mgrNamedOperands=this.mgrNamedOperands||makeManager();this.mgrNamedOutputs=this.mgrNamedOutputs||makeManager();this.mgrNamedResults=this.mgrNamedResults||makeManager();this.mgrOperand=this.mgrOperand||makeManager();this.mgrResult=this.mgrResult||makeManager()},AutoPad:[\"explicit\",\"same-upper\",\"same-lower\"],BuildGraphStatus:[\"success\",\"error\",\"context-lost\",\"unknown\"],ComputeGraphStatus:[\"success\",\"error\",\"context-lost\",\"unknown\"],ErrorFilter:[\"none\",\"validation\",\"out-of-memory\"],ErrorType:[\"no-error\",\"validation\",\"out-of-memory\",\"unknown\",\"device-lost\"],FilterOperandLayout:[\"oihw\",\"hwio\",\"ohwi\",\"ihwo\"],FusedActivation:[\"none\",\"relu\"],InputOperandLayout:[\"nchw\",\"nhwc\"],OperandType:[\"float32\",\"float16\",\"int32\",\"uint32\",\"int8\",\"uint8\"],PowerPreference:[\"default\",\"high_performance\",\"low_power\"],makeI32Array:function(count,arrayPtr){if(count===0||arrayPtr===0){return undefined}var array=[];for(var i=0;i<count;++i,arrayPtr+=4){array.push(HEAP32[arrayPtr>>2])}return array},makeArrayBufferView:function(offset,byteSize,type=\"float32\"){assert(type===\"float32\");return new Float32Array(HEAPU8.buffer,offset,byteSize/Float32Array.BYTES_PER_ELEMENT)},makeClampOptions:function(ptr){return{\"minValue\":this.mgrOperand.get(HEAP32[ptr>>2]),\"maxValue\":this.mgrOperand.get(HEAP32[ptr+4>>2])}},makeBatchNormOptions:function(ptr){return{\"scale\":this.mgrOperand.get(HEAP32[ptr>>2]),\"bias\":this.mgrOperand.get(HEAP32[ptr+4>>2]),\"axis\":HEAP32[ptr+8>>2],\"epsilon\":HEAPF32[ptr+12>>2],\"activation\":this.FusedActivation[HEAP32[ptr+16>>2]]}},makeGemmOptions:function(ptr){return{\"c\":this.mgrOperand.get(HEAP32[ptr>>2]),\"alpha\":HEAPF32[ptr+4>>2],\"beta\":HEAPF32[ptr+8>>2],\"aTranspose\":HEAP8[ptr+12>>0]!==0,\"bTranspose\":HEAP8[ptr+13>>0]!==0}},makeOperandDescriptor:function(ptr){return{\"type\":this.OperandType[HEAPU32[ptr>>2]],\"dimensions\":this.makeI32Array(HEAPU32[ptr+8>>2],HEAP32[ptr+4>>2])}},makeConv2dOptions:function(ptr){return{\"padding\":this.AutoPad[HEAP32[ptr+24>>2]]===\"explicit\"?this.makeI32Array(HEAPU32[ptr>>2],HEAP32[ptr+4>>2]):undefined,\"strides\":this.makeI32Array(HEAPU32[ptr+8>>2],HEAP32[ptr+12>>2]),\"dilations\":this.makeI32Array(HEAPU32[ptr+16>>2],HEAP32[ptr+20>>2]),\"autoPad\":this.AutoPad[HEAP32[ptr+24>>2]],\"groups\":HEAP32[ptr+28>>2],\"inputLayout\":this.InputOperandLayout[HEAP32[ptr+32>>2]],\"filterLayout\":this.FilterOperandLayout[HEAP32[ptr+36>>2]],\"bias\":this.mgrOperand.get(HEAP32[ptr+40>>2]),\"activation\":this.FusedActivation[HEAP32[ptr+44>>2]]}},makePool2dOptions:function(ptr){return{\"windowDimensions\":this.makeI32Array(HEAPU32[ptr>>2],HEAP32[ptr+4>>2]),\"padding\":this.AutoPad[HEAP32[ptr+32>>2]]===\"explicit\"?this.makeI32Array(HEAPU32[ptr+8>>2],HEAP32[ptr+12>>2]):undefined,\"strides\":this.makeI32Array(HEAPU32[ptr+16>>2],HEAP32[ptr+20>>2]),\"dilations\":this.makeI32Array(HEAPU32[ptr+24>>2],HEAP32[ptr+28>>2]),\"autoPad\":this.AutoPad[HEAP32[ptr+32>>2]],\"inputLayout\":this.InputOperandLayout[HEAP32[ptr+36>>2]]}},makeInput:function(ptr){return{\"data\":this.makeArrayBufferView(HEAP32[ptr>>2],HEAPU32[ptr+4>>2]),\"dimensions\":HEAP32[ptr+8>>2]===0?undefined:this.makeI32Array(HEAPU32[ptr+12>>2],HEAP32[ptr+8>>2])}},makeOutput:function(ptr){return{\"data\":HEAP32[ptr>>2]===0?undefined:this.makeArrayBufferView(HEAP32[ptr>>2],HEAPU32[ptr+4>>2]),\"dimensions\":HEAP32[ptr+8>>2]===0?undefined:this.makeI32Array(HEAPU32[ptr+12>>2],HEAP32[ptr+8>>2])}}};function _emscripten_webnn_create_context(){var context=navigator.ml.createContext();return WebNN.mgrContext.create(context)}var ENV={};function getExecutableName(){return thisProgram||\"./this.program\"}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator===\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\";var env={\"USER\":\"web_user\",\"LOGNAME\":\"web_user\",\"PATH\":\"/\",\"PWD\":\"/\",\"HOME\":\"/home/web_user\",\"LANG\":lang,\"_\":getExecutableName()};for(var x in ENV){env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+\"=\"+env[x])}getEnvStrings.strings=strings}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _fd_close(fd){return 0}function _fd_fdstat_get(fd,pbuf){var type=fd==1||fd==2?2:abort();HEAP8[pbuf>>0]=type;return 0}function _fd_read(fd,iov,iovcnt,pnum){var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){}function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j])}num+=len}HEAP32[pnum>>2]=num;return 0}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function _gmtime_r(time,tmPtr){var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getUTCSeconds();HEAP32[tmPtr+4>>2]=date.getUTCMinutes();HEAP32[tmPtr+8>>2]=date.getUTCHours();HEAP32[tmPtr+12>>2]=date.getUTCDate();HEAP32[tmPtr+16>>2]=date.getUTCMonth();HEAP32[tmPtr+20>>2]=date.getUTCFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getUTCDay();HEAP32[tmPtr+36>>2]=0;HEAP32[tmPtr+32>>2]=0;var start=Date.UTC(date.getUTCFullYear(),0,1,0,0,0,0);var yday=(date.getTime()-start)/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;if(!_gmtime_r.GMTString)_gmtime_r.GMTString=allocateUTF8(\"GMT\");HEAP32[tmPtr+40>>2]=_gmtime_r.GMTString;return tmPtr}function _tzset(){if(_tzset.called)return;_tzset.called=true;var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAP32[__get_timezone()>>2]=stdTimezoneOffset*60;HEAP32[__get_daylight()>>2]=Number(winterOffset!=summerOffset);function extractZone(date){var match=date.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);return match?match[1]:\"GMT\"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocateUTF8(winterName);var summerNamePtr=allocateUTF8(summerName);if(summerOffset<winterOffset){HEAP32[__get_tzname()>>2]=winterNamePtr;HEAP32[__get_tzname()+4>>2]=summerNamePtr}else{HEAP32[__get_tzname()>>2]=summerNamePtr;HEAP32[__get_tzname()+4>>2]=winterNamePtr}}function _localtime_r(time,tmPtr){_tzset();var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst;var zonePtr=HEAP32[__get_tzname()+(dst?4:0)>>2];HEAP32[tmPtr+40>>2]=zonePtr;return tmPtr}function _mktime(tmPtr){_tzset();var date=new Date(HEAP32[tmPtr+20>>2]+1900,HEAP32[tmPtr+16>>2],HEAP32[tmPtr+12>>2],HEAP32[tmPtr+8>>2],HEAP32[tmPtr+4>>2],HEAP32[tmPtr>>2],0);var dst=HEAP32[tmPtr+32>>2];var guessedOffset=date.getTimezoneOffset();var start=new Date(date.getFullYear(),0,1);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dstOffset=Math.min(winterOffset,summerOffset);if(dst<0){HEAP32[tmPtr+32>>2]=Number(summerOffset!=winterOffset&&dstOffset==guessedOffset)}else if(dst>0!=(dstOffset==guessedOffset)){var nonDstOffset=Math.max(winterOffset,summerOffset);var trueOffset=dst>0?dstOffset:nonDstOffset;date.setTime(date.getTime()+(trueOffset-guessedOffset)*6e4)}HEAP32[tmPtr+24>>2]=date.getDay();var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();return date.getTime()/1e3|0}function _mlContextReference(id){WebNN.mgrContext.reference(id)}function _mlContextRelease(id){WebNN.mgrContext.release(id)}function _mlGraphBuilderAdd(builderId,aId,bId){var builder=WebNN.mgrGraphBuilder.get(builderId);var a=WebNN.mgrOperand.get(aId);var b=WebNN.mgrOperand.get(bId);var c=builder.add(a,b);return WebNN.mgrOperand.create(c)}function _mlGraphBuilderAveragePool2d(builderId,inputId,optionsPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var options=WebNN.makePool2dOptions(optionsPtr);var pool2d=builder.averagePool2d(input,options);return WebNN.mgrOperand.create(pool2d)}function _mlGraphBuilderBatchNorm(builderId,inputId,meanId,varianceId,optionsPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var mean=WebNN.mgrOperand.get(meanId);var variance=WebNN.mgrOperand.get(varianceId);var options=WebNN.makeBatchNormOptions(optionsPtr);var output=builder.batchNormalization(input,mean,variance,options);return WebNN.mgrOperand.create(output)}function _mlGraphBuilderBuildSync(builderId,namedOperandsId){var builder=WebNN.mgrGraphBuilder.get(builderId);var namedOperands=WebNN.mgrNamedOperands.get(namedOperandsId);try{var graph=builder.buildSync(namedOperands);return WebNN.mgrGraph.create(graph)}catch(error){console.log(\"builder.buildSync failed: \"+error);return 0}}function _mlGraphBuilderConcat(builderId,inputsCount,inputsPtr,axis){var builder=WebNN.mgrGraphBuilder.get(builderId);var inputIds=WebNN.makeI32Array(inputsCount,inputsPtr);var inputs=[];for(var i=0;i<inputIds.length;++i){inputs.push(WebNN.mgrOperand.get(inputIds[i]))}var output=builder.concat(inputs,axis);return WebNN.mgrOperand.create(output)}function _mlGraphBuilderConstant(builderId,descPtr,valuePtr,size){var builder=WebNN.mgrGraphBuilder.get(builderId);var desc=WebNN.makeOperandDescriptor(descPtr);var buffer=WebNN.makeArrayBufferView(valuePtr,size);var constant=builder.constant(desc,buffer);return WebNN.mgrOperand.create(constant)}function _mlGraphBuilderConv2d(builderId,inputId,filterId,optionsPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var filter=WebNN.mgrOperand.get(filterId);var options=WebNN.makeConv2dOptions(optionsPtr);var conv2d=builder.conv2d(input,filter,options);return WebNN.mgrOperand.create(conv2d)}function _mlGraphBuilderGemm(builderId,aId,bId,optionsPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var a=WebNN.mgrOperand.get(aId);var b=WebNN.mgrOperand.get(bId);var options=WebNN.makeGemmOptions(optionsPtr);var output=builder.gemm(a,b,options);return WebNN.mgrOperand.create(output)}function _mlGraphBuilderInput(builderId,namePtr,descPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var name=UTF8ToString(namePtr);var desc=WebNN.makeOperandDescriptor(descPtr);var input=builder.input(name,desc);return WebNN.mgrOperand.create(input)}function _mlGraphBuilderMatmul(builderId,aId,bId){var builder=WebNN.mgrGraphBuilder.get(builderId);var a=WebNN.mgrOperand.get(aId);var b=WebNN.mgrOperand.get(bId);var c=builder.matmul(a,b);return WebNN.mgrOperand.create(c)}function _mlGraphBuilderMaxPool2d(builderId,inputId,optionsPtr){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var options=WebNN.makePool2dOptions(optionsPtr);var pool2d=builder.maxPool2d(input,options);return WebNN.mgrOperand.create(pool2d)}function _mlGraphBuilderRelease(id){WebNN.mgrGraphBuilder.release(id)}function _mlGraphBuilderRelu(builderId,inputId){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var output=builder.relu(input);return WebNN.mgrOperand.create(output)}function _mlGraphBuilderReshape(builderId,inputId,newShapePtr,newShapeCount){var builder=WebNN.mgrGraphBuilder.get(builderId);var input=WebNN.mgrOperand.get(inputId);var newShape=WebNN.makeI32Array(newShapeCount,newShapePtr);var output=builder.reshape(input,newShape);return WebNN.mgrOperand.create(output)}function _mlGraphComputeSync(graphId,inputsId,outputsId){var graph=WebNN.mgrGraph.get(graphId);var inputs=WebNN.mgrNamedInputs.get(inputsId);var outputs=WebNN.mgrNamedOutputs.get(outputsId);return graph.computeSync(inputs,outputs)}function _mlGraphReference(id){WebNN.mgrGraph.reference(id)}function _mlGraphRelease(id){WebNN.mgrGraph.release(id)}function _mlNamedInputsRelease(id){WebNN.mgrNamedInputs.release(id)}function _mlNamedInputsSet(namedInputsId,namePtr,inputPtr){var namedInputs=WebNN.mgrNamedInputs.get(namedInputsId);var name=UTF8ToString(namePtr);var input=WebNN.makeInput(inputPtr);namedInputs[name]=input}function _mlNamedOperandsRelease(id){WebNN.mgrNamedOperands.release(id)}function _mlNamedOperandsSet(namedOperandsId,namePtr,operandId){var namedOperands=WebNN.mgrNamedOperands.get(namedOperandsId);var name=UTF8ToString(namePtr);var operand=WebNN.mgrOperand.get(operandId);namedOperands[name]=operand}function _mlNamedOutputsRelease(id){WebNN.mgrNamedOutputs.release(id)}function _mlNamedOutputsSet(namedOutputsId,namePtr,outputPtr){var namedOutputs=WebNN.mgrNamedOutputs.get(namedOutputsId);var name=UTF8ToString(namePtr);var output=WebNN.makeOutput(outputPtr);namedOutputs[name]=output}function _mlOperandReference(id){WebNN.mgrOperand.reference(id)}function _mlOperandRelease(id){WebNN.mgrOperand.release(id)}function _pthread_create(){return 6}function _pthread_join(){return 28}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):\"\"};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_1[rule])}var WEEKDAYS=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];var MONTHS=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function leadingSomething(value,digits,character){var str=typeof value===\"number\"?value.toString():value||\"\";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,\"0\")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={\"%a\":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},\"%A\":function(date){return WEEKDAYS[date.tm_wday]},\"%b\":function(date){return MONTHS[date.tm_mon].substring(0,3)},\"%B\":function(date){return MONTHS[date.tm_mon]},\"%C\":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},\"%d\":function(date){return leadingNulls(date.tm_mday,2)},\"%e\":function(date){return leadingSomething(date.tm_mday,2,\" \")},\"%g\":function(date){return getWeekBasedYear(date).toString().substring(2)},\"%G\":function(date){return getWeekBasedYear(date)},\"%H\":function(date){return leadingNulls(date.tm_hour,2)},\"%I\":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},\"%j\":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},\"%m\":function(date){return leadingNulls(date.tm_mon+1,2)},\"%M\":function(date){return leadingNulls(date.tm_min,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return\"AM\"}else{return\"PM\"}},\"%S\":function(date){return leadingNulls(date.tm_sec,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(date){return date.tm_wday||7},\"%U\":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?\"01\":\"00\"},\"%V\":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return\"53\"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return\"01\"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},\"%w\":function(date){return date.tm_wday},\"%W\":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?\"01\":\"00\"},\"%y\":function(date){return(date.tm_year+1900).toString().substring(2)},\"%Y\":function(date){return date.tm_year+1900},\"%z\":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?\"+\":\"-\")+String(\"0000\"+off).slice(-4)},\"%Z\":function(date){return date.tm_zone},\"%%\":function(){return\"%\"}};for(var rule in EXPANSION_RULES_2){if(pattern.includes(rule)){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function _webnnCreateGraphBuilder(contextId){var context=WebNN.mgrContext.get(contextId);var builder=new MLGraphBuilder(context);return WebNN.mgrGraphBuilder.create(builder)}function _webnnCreateNamedInputs(){var inputs={};return WebNN.mgrNamedInputs.create(inputs)}function _webnnCreateNamedOperands(){var operands={};return WebNN.mgrNamedOperands.create(operands)}function _webnnCreateNamedOutputs(){var outputs={};return WebNN.mgrNamedOutputs.create(outputs)}WebNN.initManagers();function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var asmLibraryArg={\"a\":___cxa_allocate_exception,\"c\":___cxa_atexit,\"f\":___cxa_thread_atexit,\"b\":___cxa_throw,\"L\":___sys_access,\"m\":___sys_fcntl64,\"R\":___sys_fstat64,\"M\":___sys_getdents64,\"q\":___sys_getpid,\"D\":___sys_ioctl,\"N\":___sys_lstat64,\"Q\":___sys_mkdir,\"P\":___sys_mmap2,\"O\":___sys_munmap,\"l\":___sys_open,\"K\":___sys_readlink,\"I\":___sys_rmdir,\"s\":___sys_stat64,\"J\":___sys_unlink,\"j\":_abort,\"u\":_clock_gettime,\"z\":_difftime,\"va\":_dlclose,\"i\":_dlerror,\"wa\":_dlopen,\"ua\":_dlsym,\"S\":_emscripten_get_heap_max,\"C\":_emscripten_memcpy_big,\"k\":_emscripten_resize_heap,\"H\":_emscripten_thread_sleep,\"sa\":_emscripten_webnn_create_context,\"F\":_environ_get,\"G\":_environ_sizes_get,\"h\":_fd_close,\"E\":_fd_fdstat_get,\"o\":_fd_read,\"B\":_fd_seek,\"p\":_fd_write,\"aa\":_gettimeofday,\"A\":_gmtime_r,\"n\":_localtime_r,\"y\":_mktime,\"x\":_mlContextReference,\"w\":_mlContextRelease,\"pa\":_mlGraphBuilderAdd,\"oa\":_mlGraphBuilderAveragePool2d,\"na\":_mlGraphBuilderBatchNorm,\"ma\":_mlGraphBuilderBuildSync,\"la\":_mlGraphBuilderConcat,\"ka\":_mlGraphBuilderConstant,\"ja\":_mlGraphBuilderConv2d,\"ia\":_mlGraphBuilderGemm,\"ha\":_mlGraphBuilderInput,\"ga\":_mlGraphBuilderMatmul,\"fa\":_mlGraphBuilderMaxPool2d,\"t\":_mlGraphBuilderRelease,\"ea\":_mlGraphBuilderRelu,\"da\":_mlGraphBuilderReshape,\"ra\":_mlGraphComputeSync,\"qa\":_mlGraphReference,\"v\":_mlGraphRelease,\"ba\":_mlNamedInputsRelease,\"ca\":_mlNamedInputsSet,\"_\":_mlNamedOperandsRelease,\"$\":_mlNamedOperandsSet,\"Y\":_mlNamedOutputsRelease,\"Z\":_mlNamedOutputsSet,\"e\":_mlOperandReference,\"d\":_mlOperandRelease,\"T\":_pthread_create,\"r\":_pthread_join,\"ta\":_strftime,\"g\":_strftime_l,\"X\":_webnnCreateGraphBuilder,\"W\":_webnnCreateNamedInputs,\"V\":_webnnCreateNamedOperands,\"U\":_webnnCreateNamedOutputs};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"ya\"]).apply(null,arguments)};var _OrtInit=Module[\"_OrtInit\"]=function(){return(_OrtInit=Module[\"_OrtInit\"]=Module[\"asm\"][\"za\"]).apply(null,arguments)};var _OrtCreateSessionOptions=Module[\"_OrtCreateSessionOptions\"]=function(){return(_OrtCreateSessionOptions=Module[\"_OrtCreateSessionOptions\"]=Module[\"asm\"][\"Aa\"]).apply(null,arguments)};var _OrtSessionOptionsAppendExecutionProviderWebNN=Module[\"_OrtSessionOptionsAppendExecutionProviderWebNN\"]=function(){return(_OrtSessionOptionsAppendExecutionProviderWebNN=Module[\"_OrtSessionOptionsAppendExecutionProviderWebNN\"]=Module[\"asm\"][\"Ba\"]).apply(null,arguments)};var _OrtAddSessionConfigEntry=Module[\"_OrtAddSessionConfigEntry\"]=function(){return(_OrtAddSessionConfigEntry=Module[\"_OrtAddSessionConfigEntry\"]=Module[\"asm\"][\"Ca\"]).apply(null,arguments)};var _OrtReleaseSessionOptions=Module[\"_OrtReleaseSessionOptions\"]=function(){return(_OrtReleaseSessionOptions=Module[\"_OrtReleaseSessionOptions\"]=Module[\"asm\"][\"Da\"]).apply(null,arguments)};var _OrtCreateSession=Module[\"_OrtCreateSession\"]=function(){return(_OrtCreateSession=Module[\"_OrtCreateSession\"]=Module[\"asm\"][\"Ea\"]).apply(null,arguments)};var _OrtReleaseSession=Module[\"_OrtReleaseSession\"]=function(){return(_OrtReleaseSession=Module[\"_OrtReleaseSession\"]=Module[\"asm\"][\"Fa\"]).apply(null,arguments)};var _OrtGetInputCount=Module[\"_OrtGetInputCount\"]=function(){return(_OrtGetInputCount=Module[\"_OrtGetInputCount\"]=Module[\"asm\"][\"Ga\"]).apply(null,arguments)};var _OrtGetOutputCount=Module[\"_OrtGetOutputCount\"]=function(){return(_OrtGetOutputCount=Module[\"_OrtGetOutputCount\"]=Module[\"asm\"][\"Ha\"]).apply(null,arguments)};var _OrtGetInputName=Module[\"_OrtGetInputName\"]=function(){return(_OrtGetInputName=Module[\"_OrtGetInputName\"]=Module[\"asm\"][\"Ia\"]).apply(null,arguments)};var _OrtGetOutputName=Module[\"_OrtGetOutputName\"]=function(){return(_OrtGetOutputName=Module[\"_OrtGetOutputName\"]=Module[\"asm\"][\"Ja\"]).apply(null,arguments)};var _OrtFree=Module[\"_OrtFree\"]=function(){return(_OrtFree=Module[\"_OrtFree\"]=Module[\"asm\"][\"Ka\"]).apply(null,arguments)};var _OrtCreateTensor=Module[\"_OrtCreateTensor\"]=function(){return(_OrtCreateTensor=Module[\"_OrtCreateTensor\"]=Module[\"asm\"][\"La\"]).apply(null,arguments)};var _OrtGetTensorData=Module[\"_OrtGetTensorData\"]=function(){return(_OrtGetTensorData=Module[\"_OrtGetTensorData\"]=Module[\"asm\"][\"Ma\"]).apply(null,arguments)};var _OrtReleaseTensor=Module[\"_OrtReleaseTensor\"]=function(){return(_OrtReleaseTensor=Module[\"_OrtReleaseTensor\"]=Module[\"asm\"][\"Na\"]).apply(null,arguments)};var _OrtCreateRunOptions=Module[\"_OrtCreateRunOptions\"]=function(){return(_OrtCreateRunOptions=Module[\"_OrtCreateRunOptions\"]=Module[\"asm\"][\"Oa\"]).apply(null,arguments)};var _OrtAddRunConfigEntry=Module[\"_OrtAddRunConfigEntry\"]=function(){return(_OrtAddRunConfigEntry=Module[\"_OrtAddRunConfigEntry\"]=Module[\"asm\"][\"Pa\"]).apply(null,arguments)};var _OrtReleaseRunOptions=Module[\"_OrtReleaseRunOptions\"]=function(){return(_OrtReleaseRunOptions=Module[\"_OrtReleaseRunOptions\"]=Module[\"asm\"][\"Qa\"]).apply(null,arguments)};var _OrtRun=Module[\"_OrtRun\"]=function(){return(_OrtRun=Module[\"_OrtRun\"]=Module[\"asm\"][\"Ra\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"Sa\"]).apply(null,arguments)};var ___errno_location=Module[\"___errno_location\"]=function(){return(___errno_location=Module[\"___errno_location\"]=Module[\"asm\"][\"Ta\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"Ua\"]).apply(null,arguments)};var _memset=Module[\"_memset\"]=function(){return(_memset=Module[\"_memset\"]=Module[\"asm\"][\"Va\"]).apply(null,arguments)};var __get_tzname=Module[\"__get_tzname\"]=function(){return(__get_tzname=Module[\"__get_tzname\"]=Module[\"asm\"][\"Wa\"]).apply(null,arguments)};var __get_daylight=Module[\"__get_daylight\"]=function(){return(__get_daylight=Module[\"__get_daylight\"]=Module[\"asm\"][\"Xa\"]).apply(null,arguments)};var __get_timezone=Module[\"__get_timezone\"]=function(){return(__get_timezone=Module[\"__get_timezone\"]=Module[\"asm\"][\"Ya\"]).apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){return(stackSave=Module[\"stackSave\"]=Module[\"asm\"][\"Za\"]).apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){return(stackRestore=Module[\"stackRestore\"]=Module[\"asm\"][\"_a\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"$a\"]).apply(null,arguments)};var _memalign=Module[\"_memalign\"]=function(){return(_memalign=Module[\"_memalign\"]=Module[\"asm\"][\"ab\"]).apply(null,arguments)};Module[\"UTF8ToString\"]=UTF8ToString;Module[\"stringToUTF8\"]=stringToUTF8;Module[\"lengthBytesUTF8\"]=lengthBytesUTF8;Module[\"stackSave\"]=stackSave;Module[\"stackRestore\"]=stackRestore;Module[\"stackAlloc\"]=stackAlloc;var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\n\n\n  return ortWasm.ready\n}\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\nimport {promisify} from 'util';\n\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\nimport {initializeWebAssembly} from './wasm/wasm-factory';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssembly();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    let buffer: Uint8Array;\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        buffer = await promisify(readFile)(pathOrBuffer);\n      } else {\n        // browser\n        const response = await fetch(pathOrBuffer);\n        const arrayBuffer = await response.arrayBuffer();\n        buffer = new Uint8Array(arrayBuffer);\n      }\n    } else {\n      buffer = pathOrBuffer;\n    }\n\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    handler.loadModel(buffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\nimport {onnxjsBackend} from './backend-onnxjs';\nimport {wasmBackend} from './backend-wasm';\n\nregisterBackend('webgl', onnxjsBackend, 1);\nregisterBackend('wasm', wasmBackend, 2);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\n\nimport {Tensor} from './tensor';\nimport {LongUtil} from './util';\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString();\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(\n            utf8String => Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString());\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName} from './utils';\nimport {generateShaderFuncNameFromInputSamplerNameAtOutCoords,} from './utils';\nimport {getCoordsDataType, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.programInfo.outputLayout;\n    this.context.programInfo.samplers.forEach((samplerName, i) => {\n      const inputLayout = this.context.programInfo.inputLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xx, outputValue.yy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.programInfo.outputLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const layout = programInfo.inputLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(public glContext: WebGLContext, public programInfo: ProgramInfo) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(glContext: WebGLContext, programInfo: ProgramInfo) {\n    this.context = new GlslContext(glContext, programInfo);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, programInfo.outputLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.samplers, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const outputRank = programInfo.outputLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const outputRank = programInfo.outputLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      const strides = programInfo.inputLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      const strides = programInfo.inputLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {WebGLPack} from './ops/pack';\n\nimport {WebGLUint8Encode} from './ops/uint8-encode';\nimport {WebGLUnpack} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {WidthHeightPrefs} from './texture-layout-strategy';\nimport {Artifact, RunData, TextureData, TextureLayout, WebGLOperator} from './types';\nimport {getPackedShape} from './utils';\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  private unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  run(op: WebGLOperator, inputs: Tensor[]): Tensor[] {\n    let artifact = this.session.programManager.getArtifact(op);\n    if (!artifact) {\n      const programInfo = op.createProgramInfo(this, inputs);\n      if (!programInfo.name) {\n        programInfo.name = op.constructor?.name;\n      }\n      artifact = this.session.programManager.build(programInfo);\n      this.session.programManager.setArtifact(op, artifact);\n    }\n    const runData = op.createRunData(this, artifact.programInfo, inputs);\n    this.runProgram(artifact, runData);\n    return [runData.outputTextureData.tensor];\n  }\n\n  checkAndUpdateTextureForm(artifact: Artifact, runData: RunData) {\n    // pack/unpack inputs\n    for (let i = 0; i < runData.inputTextureDatas.length; ++i) {\n      const input = runData.inputTextureDatas[i];\n      if (input.isPacked && !artifact.programInfo.expectPackedInputs) {\n        runData.inputTextureDatas[i] = this.unpack(input);\n      } else if (!input.isPacked && artifact.programInfo.expectPackedInputs) {\n        runData.inputTextureDatas[i] = this.pack(input);\n      }\n    }\n  }\n  runProgram(artifact: Artifact, runData: RunData) {\n    this.checkAndUpdateTextureForm(artifact, runData);\n\n    // output should match\n    if (!!runData.outputTextureData.isPacked !== !!artifact.programInfo.expectPackedOutputs) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, runData);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  getOrCreateTextureData(tensor: Tensor, layout?: TextureLayout, isPacked = false) {\n    let td = this.getTextureData(tensor.dataId, isPacked);\n    if (!td) {\n      Logger.verbose('InferenceHandler', `Creating new TextureData for dims: [${tensor.dims}]`);\n      if (!layout) {\n        layout = this.createTextureLayoutFromShape(tensor.dims.slice());\n      }\n      // if we don't find the texture data with specific pack mode in the cache, try with the different\n      // pack mode to see if the tensor is cached using that pack mode. If succeed, we can return this\n      // tensor data and later apply a pack/unpack op on this texture, no need to create a new one here.\n      td = this.getTextureData(tensor.dataId, !isPacked);\n      if (!td) {\n        if (isPacked) {\n          const unpackedTextureLayout = this.getOrCreateTextureLayout(tensor, 1, false, [], true);\n          const unpackedTextureData = this.createTextureData(\n              unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n          td = this.pack(unpackedTextureData);\n        } else {\n          td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n    } else {\n      Logger.verbose('InferenceHandler', `Retrieving TextureData from cache: [${tensor.dims}]`);\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object from the given data type and texture layout.\n   * Usage = Encoder.Usage.Default.\n   * @param dataType the tensor data type\n   */\n  createTextureDataFromLayout(layout: TextureLayout, dataType: Tensor.DataType): TextureData {\n    return this.createTextureData(layout, dataType);\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  /**\n   * Create a TextureData object, using the given texture.\n   * This function does not create new texture. Usually used in scenarios using texture sharing. (eg. Reshape)\n   * @param dataType the tensor data type\n   * @param texture the WebGLTexture object to share\n   * @param tensorId the tensor ID of the shared tensor data\n   */\n  createSharedTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensorId?: Tensor.Id): TextureData {\n    return this.createTextureDataFromTexture(layout, dataType, texture, undefined, tensorId);\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData), undefined,\n                  undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ?\n        this.session.getTextureData(tensorId, isPacked) :\n        isPacked ? this.packedTextureDataCache.get(tensorId) : this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n  /**\n   * Create a TextureLayout object from a tensor. If a related texture data is found, returns the cached texture layout.\n   */\n  getOrCreateTextureLayout(\n      tensor: Tensor, channels: 1|4 = 1, isPacked = false, unpackedShape?: readonly number[],\n      reverseWH = false): TextureLayout {\n    const td = this.getTextureData(tensor.dataId, isPacked);\n    if (td) {\n      return td;\n    }\n    return this.createTextureLayoutFromShape(\n        channels === 1 || isPacked ? tensor.dims : getPackedShape(tensor.dims), channels, unpackedShape,\n        isPacked || reverseWH ? {isPacked, reverseWH} : undefined);\n  }\n\n  /**\n   * Create a TextureLayout object from shape.\n   */\n  createTextureLayoutFromShape(\n      shape: readonly number[], channels: 1|4 = 1, unpackedShape?: readonly number[],\n      prefs?: WidthHeightPrefs): TextureLayout {\n    const isPacked = !!(prefs && prefs.isPacked);\n    const [texWidth, texHeight] =\n        this.session.layoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n    let [width, height] = [texWidth, texHeight];\n    if (prefs && prefs.reverseWH) {\n      width = texHeight;\n      height = texWidth;\n    }\n    const rank = shape.length;\n    let inferredDims = shape.slice(0);\n    if (rank === 0) {\n      inferredDims = [1];\n    }\n    if (channels === 1) {\n      // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n      unpackedShape = shape;\n    } else if (isPacked) {\n      if (channels !== 4) {\n        throw new Error('a packed texture must be 4-channel');\n      }\n      unpackedShape = shape;\n      if (rank > 0) {\n        inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n      }\n      if (rank > 1) {\n        inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n      }\n    } else if (!unpackedShape) {\n      throw new Error('Unpacked shape is needed when using channels > 1');\n    }\n    return {\n      width,\n      height,\n      channels,\n      isPacked,\n      shape: inferredDims,\n      strides: ShapeUtil.computeStrides(inferredDims),\n      unpackedShape,\n      reversedWH: (prefs && prefs.reverseWH)\n    };\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      const op = new WebGLUint8Encode();\n      const uint8TD = op.runInternal(this, textureData);\n      return this.session.textureManager.readUint8TextureAsFloat(uint8TD);\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const cachedId = this.unpack2packMap.get(input.tensor.dataId);\n    if (cachedId) {\n      return this.packedTextureDataCache.get(cachedId)!;\n    }\n    const key = `${input.shape}`;\n    let op = this.session.packOpCache.get(key);\n    if (!op) {\n      op = new WebGLPack();\n      this.session.packOpCache.set(key, op);\n    }\n    let artifact = this.session.programManager.getArtifact(op);\n    if (!artifact) {\n      const programInfo = op.createProgramInfo(this, [input.tensor]);\n      artifact = this.session.programManager.build(programInfo);\n      this.session.programManager.setArtifact(op, artifact);\n    }\n    const runData = op.createRunData(this, artifact.programInfo, [input.tensor]);\n    this.runProgram(artifact, runData);\n    this.unpack2packMap.set(input.tensor.dataId, runData.outputTextureData.tensor.dataId);\n    return runData.outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const cachedId = this.pack2unpackMap.get(input.tensor.dataId);\n    if (cachedId) {\n      return this.unpackedTextureDataCache.get(cachedId)!;\n    }\n    // For unpacked kernel, cache it by using input's unpackedShape as cache key.\n    // Note that we need to use input.unpackedShape instead of input.shape here,\n    // as the shape infers the packed texture shape. Different unpackedShape can have the\n    // same packed texture shape. For example, for unpacked shape, both [2, 3] and\n    // [2, 4] has the same packed shape [1, 2], but those two shapes should have different\n    // unpack shaders.\n    const key = `${input.unpackedShape}`;\n    let op = this.session.unpackOpCache.get(key);\n    if (!op) {\n      op = new WebGLUnpack();\n      this.session.unpackOpCache.set(key, op);\n    }\n    let artifact = this.session.programManager.getArtifact(op);\n    if (!artifact) {\n      const programInfo = op.createProgramInfo(this, [input.tensor]);\n      artifact = this.session.programManager.build(programInfo);\n      this.session.programManager.setArtifact(op, artifact);\n    }\n    const runData = op.createRunData(this, artifact.programInfo, [input.tensor]);\n    this.runProgram(artifact, runData);\n    this.pack2unpackMap.set(input.tensor.dataId, runData.outputTextureData.tensor.dataId);\n    return runData.outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\nimport {OpSet} from '../../opset';\n\nimport {WebGLBatchNormalization} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {WebGLClip} from './ops/clip';\nimport {WebGLConcat} from './ops/concat';\nimport {WebGLConv} from './ops/conv';\nimport {WebGLDepthToSpace} from './ops/depth-to-space';\nimport {WebGLDropout} from './ops/dropout';\nimport {WebGLElu} from './ops/elu';\nimport {WebGLFlatten} from './ops/flatten';\nimport {WebGLGather} from './ops/gather';\nimport {WebGLGemm} from './ops/gemm';\nimport {WebGLImageScaler} from './ops/image-scaler';\nimport {WebGLInstanceNormalization} from './ops/instance-normalization';\nimport {WebGLLeakyRelu} from './ops/leaky-relu';\nimport {WebGLMatMul} from './ops/matmul';\nimport {WebGLPad} from './ops/pad';\nimport {WebGLAveragePool, WebGLGlobalAveragePool, WebGLGlobalMaxPool, WebGLMaxPool} from './ops/pool';\nimport * as reduceOps from './ops/reduce';\nimport {WebGLReshape} from './ops/reshape';\nimport {WebGLResizePacked} from './ops/resize-packed';\nimport {WebGLShape} from './ops/shape';\nimport {WebGLSlice, WebGLSliceV10} from './ops/slice';\nimport {WebGLSoftmax} from './ops/softmax';\nimport {WebGLSplit} from './ops/split';\nimport {WebGLSqueeze} from './ops/squeeze';\nimport {WebGLSum} from './ops/sum';\nimport {WebGLTile} from './ops/tile';\nimport {WebGLTranspose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {WebGLUnsqueeze} from './ops/unsqueeze';\nimport {WebGLUpsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslAbs())],\n  ['Acos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAcos())],\n  ['Add', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslAdd())],\n  ['And', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslAnd())],\n  ['Asin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAsin())],\n  ['Atan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAtan())],\n  ['AveragePool', '', '7-10', () => new WebGLAveragePool()],  // TODO: support new attributes for AveragePool-10\n  ['BatchNormalization', '', '7+', () => new WebGLBatchNormalization()],\n  ['Ceil', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCeil())],\n  ['Clip', '', '6-10', () => new WebGLClip()],\n  ['Concat', '', '4+', () => new WebGLConcat()],\n  ['Conv', '', '1+', () => new WebGLConv()],\n  ['Cos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCos())],\n  ['Div', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslDiv())],\n  ['Dropout', '', '7+', () => new WebGLDropout()],\n  ['DepthToSpace', '', '1+', () => new WebGLDepthToSpace()],\n  ['Equal', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslEqual(), undefined, 'bool')],\n  ['Elu', '', '6+', () => new WebGLElu()],\n  ['Exp', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslExp())],\n  ['Flatten', '', '1+', () => new WebGLFlatten()],\n  ['Floor', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslFloor())],\n  ['Gather', '', '1+', () => new WebGLGather()],\n  ['Gemm', '', '7-10', () => new WebGLGemm(false)],\n  ['Gemm', '', '11+', () => new WebGLGemm(true)],\n  ['GlobalAveragePool', '', '1+', () => new WebGLGlobalAveragePool()],\n  ['GlobalMaxPool', '', '1+', () => new WebGLGlobalMaxPool()],\n  ['Greater', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslGreater(), undefined, 'bool')],\n  ['Identity', '', '1+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslIdentity())],\n  ['ImageScaler', '', '1+', () => new WebGLImageScaler()],\n  ['InstanceNormalization', '', '6+', () => new WebGLInstanceNormalization()],\n  ['LeakyRelu', '', '6+', () => new WebGLLeakyRelu()],\n  ['Less', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslLess(), undefined, 'bool')],\n  ['Log', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslLog())],\n  ['MatMul', '', '1+', () => new WebGLMatMul()],\n  ['MaxPool', '', '1-9', () => new WebGLMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['Mul', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslMul())],\n  ['Neg', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslNeg())],\n  ['Not', '', '1+', () => new unaryOps.WebGLUnaryOp(['bool'], unaryOps.glslNot())],\n  ['Or', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslOr())],\n  ['Pad', '', '2-10', () => new WebGLPad()],\n  ['Pow', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPow())],\n  ['PRelu', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPRelu())],\n  ['ReduceLogSum', '', '1+', () => new reduceOps.WebGLReduceLogSum()],\n  ['ReduceMax', '', '1+', () => new reduceOps.WebGLReduceMax()],\n  ['ReduceMean', '', '1+', () => new reduceOps.WebGLReduceMean()],\n  ['ReduceMin', '', '1+', () => new reduceOps.WebGLReduceMin()],\n  ['ReduceProd', '', '1+', () => new reduceOps.WebGLReduceProd()],\n  ['ReduceSum', '', '1+', () => new reduceOps.WebGLReduceSum()],\n  ['ReduceSumSquare', '', '1+', () => new reduceOps.WebGLReduceSumSquare()],\n  ['Relu', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslRelu())],\n  ['Reshape', '', '5+', () => new WebGLReshape()],\n  ['Resize', '', '10', () => new WebGLResizePacked(10)],\n  ['Resize', '', '11+', () => new WebGLResizePacked(11)],\n  ['Shape', '', '1+', () => new WebGLShape()],\n  ['Sigmoid', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSigmoid())],\n  ['Sin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSin())],\n  ['Slice', '', '10+', () => new WebGLSliceV10()],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', () => new WebGLSlice()],\n  ['Softmax', '', '1+', () => new WebGLSoftmax()],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data\n  // is split. When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2+', (node) => new WebGLSplit(node.outputs.length)],\n  ['Sqrt', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSqrt())],\n  ['Squeeze', '', '1+', () => new WebGLSqueeze()],\n  ['Sub', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslSub())],\n  ['Sum', '', '6+', () => new WebGLSum()],  // TODO: support multidirectional broadcast for Sum-8\n  ['Tan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTan())],\n  ['Tanh', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTanh())],\n  ['Tile', '', '6+', () => new WebGLTile()],\n  ['Transpose', '', '1+', () => new WebGLTranspose()],\n  ['Upsample', '', '7-8', () => new WebGLUpsample(7)],\n  ['Upsample', '', '9', () => new WebGLUpsample(9)],\n  ['Unsqueeze', '', '1+', () => new WebGLUnsqueeze()],\n  ['Xor', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslXor())],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {BatchNormalization} from '../../../ops/batch-normalization';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData} from '../types';\n\nexport class WebGLBatchNormalization extends BatchNormalization {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\n    const outputShape = inputs[0].dims.slice();\n    const rank = outputShape.length;\n    const scale = inputLayouts[1];\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      float process(int[${rank}] indices) {\n        vec2 position = offsetToCoords(indices[1], ${scale.width}, ${scale.height});\n        float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n        float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n        float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n        float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n        return scale * ( (_A(indices) - mean) / sqrt(variance + float(${this.epsilon})) ) + b;\n      }`;\n    return {\n      inputLayouts,\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n      shaderSource\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    inputs.slice(1).forEach(t => inputTDs.push(handler.getOrCreateTextureData(t)));\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type);\n    return {inputTextureDatas: inputTDs, outputTextureData: outputTD, uniformData: {}};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {BinaryOp} from '../../../ops/binary-op';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLBinaryOp extends BinaryOp implements WebGLOperator {\n  private usePackedTexture?: boolean;\n\n  constructor(\n      typeConstraint: readonly Tensor.DataType[], protected glslFunc: GlslValueFunction, opType?: string,\n      resultType?: Tensor.DataType) {\n    super(typeConstraint, opType, resultType);\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n    // TODO fix bcast in packed mode.\n    if (this.usePackedTexture === undefined) {\n      this.usePackedTexture = !isBroadcast && handler.session.pack;\n    }\n\n    const inputLayouts = this.usePackedTexture ?\n        inputs.map(t => handler.getOrCreateTextureLayout(t, 4, true, t.dims, true)) :\n        inputs.map(t => handler.getOrCreateTextureLayout(t));\n    const ouputLayout = this.usePackedTexture ?\n        handler.createTextureLayoutFromShape(inputs[0].dims, 4, inputs[0].dims, {isPacked: true, reverseWH: true}) :\n        handler.createTextureLayoutFromShape(inputs[0].dims);\n\n    if (isBroadcast) {\n      const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n      if (!outputShape) {\n        throw new Error('Can\\'t perform binary op on the given tensors');\n      }\n      const outputRank = outputShape.length;\n      const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n      const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n      const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n      const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n      // TODO: for packed tensors, we need to implement logic to caculate textCoords for broadcast tensor\n      const shaderSource = `\n      ${this.glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${this.glslFunc.name}(_A(aindices), _B(bindices));\n    }`;\n      const outputLayout = this.usePackedTexture ?\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}) :\n          handler.createTextureLayoutFromShape(outputShape);\n\n      return {\n        inputLayouts,\n        outputLayout,\n        samplers: ['A', 'B'],\n        shaderSource,\n        expectPackedInputs: this.usePackedTexture,\n        expectPackedOutputs: this.usePackedTexture\n      };\n    }\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n    ${this.glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${this.glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n    if (this.usePackedTexture) {\n      return {\n        hasMain: true,\n        inputLayouts,\n        outputLayout: ouputLayout,\n        samplers: ['A', 'B'],\n        shaderSource,\n        expectPackedInputs: true,\n        expectPackedOutputs: true\n      };\n    } else {\n      return {\n        hasMain: true,\n        inputLayouts,\n        outputLayout: handler.createTextureLayoutFromShape(inputs[0].dims),\n        samplers: ['A', 'B'],\n        shaderSource,\n      };\n    }\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = this.usePackedTexture ?\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true))) :\n        inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(\n          programInfo.outputLayout, this.resultType ? this.resultType : inputs[0].type),\n      uniformData: {}\n    };\n  }\n}\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Clip} from '../../../ops/clip';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLClip extends Clip implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      const float min = float(${this.min});\n      const float max = float(${this.max});\n      void main() {\n        float v = ${glsl.texture2D}(A, TexCoords).r;\n        ${glsl.output} = vec4(clamp(v, min, max));\n      }\n      `;\n    return {\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Concat} from '../../../ops/concat';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nexport class WebGLPackedConcat extends Concat implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\n      throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n    }\n    if (this.axis < 0) {\n      this.axis = inputShape.length + this.axis;\n    }\n    // ensure all of the non-concatenated axes match each other\n    // calculate the shape of the output tensor while we do that\n    const outputShape = inputShape.slice(0);\n    for (let i = 1; i < inputs.length; i++) {\n      const dataNShape = inputs[i].dims.slice();\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n        // add to the placeholder for computing output shape\n        if (axisIndex === this.axis) {\n          outputShape[this.axis] += dataNShape[axisIndex];\n        }\n        // ensure all non-cancatenated axes match each other\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n          throw new Error('non concat dimensions must match');\n        }\n      }\n    }\n\n    const rank = outputShape.length;\n    const coords = getChannels('coords', rank);\n    const dtype = getCoordsDataType(rank);\n    const unpackChannel = unpackFromChannel();\n\n    const shapes = inputs.map(i => i.dims);\n    const allGlChannels = ['x', 'y', 'z', 'w', 'u', 'v'];\n    const channels = allGlChannels.slice(0, rank);\n    const offsets: number[] = new Array(shapes.length - 1);\n    const samplers = inputs.map((v, i) => `X${i}`);\n\n    offsets[0] = shapes[0][this.axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][this.axis];\n    }\n\n    const channel = channels[this.axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n      return getChannel(\n          getX0(${allChannels}), vec2(${lastChannels.join()}));\n      }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      getValueSnippet += `\n          if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n            return getChannel(\n              getX${i}(${this.getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${this.getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n          }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n          return getChannel(\n            getX${lastIndex}(${this.getShiftedChannelsSnippet(channels, channel, shift)}),\n            vec2(${this.getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n\n    const shaderSource = `\n        ${unpackChannel}\n        float getValue(${channels.map(x => 'int ' + x)}) {\n          ${getValueSnippet}\n        }\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          int lastDim = coords.${allGlChannels[rank - 1]};\n          coords.${allGlChannels[rank - 1]} = coords.${allGlChannels[rank - 2]};\n          coords.${allGlChannels[rank - 2]} = lastDim;\n\n          vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n          ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n          if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n            result.g = getValue(${coords});\n          }\n\n          ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n          if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n            result.a = getValue(${coords});\n          }\n\n          ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n          if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n              ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n            result.b = getValue(${coords});\n          }\n          ${glsl.output} = result;\n        }\n      `;\n\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t, 4, true, t.dims, true)),\n      outputLayout:\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}),\n      samplers,\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: true,\n      expectPackedOutputs: true\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i], true));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n\n  /**\n   * Generates the snippet to shift a given channel in a list of channels by shift\n   *\n   * i.e: returns a string of the form 'x, y-[shift], z' where any one channel can\n   * have the shift applied.\n   */\n  protected getShiftedChannelsSnippet(channels: string[], channel: string, shift: number) {\n    const channelIdx = channels.indexOf(channel);\n    const res = channels.map((c, idx) => {\n      if (idx === channelIdx) {\n        return `${c} - ${shift}`;\n      } else {\n        return c;\n      }\n    });\n    return res.join();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {Concat} from '../../../ops/concat';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nimport {WebGLPackedConcat} from './concat-packed';\n\n// We provide a wrapper class so that the kernel can switch between packed and unpacked depending on the inputs on the\n// fly.\nexport class WebGLConcat extends Concat implements WebGLOperator {\n  unpackedImpl: WebGLUnpackedConcat;\n  packedImpl: WebGLPackedConcat;\n  constructor() {\n    super();\n    this.unpackedImpl = new WebGLUnpackedConcat();\n    this.packedImpl = new WebGLPackedConcat();\n  }\n\n  // No need to call super since this class only serves as a wrapper.\n  initialize(attributes: Attribute): void {\n    this.unpackedImpl.initialize(attributes);\n    this.packedImpl.initialize(attributes);\n  }\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n      return inferenceHandler.run(this.packedImpl, inputs);\n    } else {\n      return inferenceHandler.run(this.unpackedImpl, inputs);\n    }\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (handler.session.pack && inputs[0].dims.length > 1) {\n      return this.packedImpl.createProgramInfo(handler, inputs);\n    } else {\n      return this.unpackedImpl.createProgramInfo(handler, inputs);\n    }\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    if (handler.session.pack && inputs[0].dims.length > 1) {\n      return this.packedImpl.createRunData(handler, programInfo, inputs);\n    } else {\n      return this.unpackedImpl.createRunData(handler, programInfo, inputs);\n    }\n  }\n}\nexport class WebGLUnpackedConcat extends Concat implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\n      throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n    }\n    if (this.axis < 0) {\n      this.axis = inputShape.length + this.axis;\n    }\n    // ensure all of the non-concatenated axes match each other\n    // calculate the shape of the output tensor while we do that\n    const outputShape = inputShape.slice(0);\n    for (let i = 1; i < inputs.length; i++) {\n      const dataNShape = inputs[i].dims.slice();\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n        // add to the placeholder for computing output shape\n        if (axisIndex === this.axis) {\n          outputShape[this.axis] += dataNShape[axisIndex];\n        }\n        // ensure all non-cancatenated axes match each other\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n          throw new Error('non concat dimensions must match');\n        }\n      }\n    }\n\n    const rank = outputShape.length;\n\n    let getTextureIndexWhereDataResidesMethod = '';\n    // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n    if (inputs.length < 5) {\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesLinearSearch(inputs.length);\n    } else {\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesBinarySearch(inputs.length);\n    }\n\n    const fetchDataFromCorrectTextureMethod = this.fetchDataFromCorrectTextureMethod(inputs.length, rank);\n    const getValueFromArrayIndexMethod = this.getValueFromArrayIndexMethod(inputs.length);\n    const samplers = inputs.map((v, i) => `X${i}`);\n    const shaderSource = `\n      ${fetchDataFromCorrectTextureMethod}\n      ${getValueFromArrayIndexMethod}\n      ${getTextureIndexWhereDataResidesMethod}\n      float process(int indices[${rank}]) {\n        int textureIndex = getTextureWhereDataResides (indices[${this.axis}]);\n\n        if(textureIndex != 0) {\n          indices[${this.axis}] = indices[${\n        this.axis}] - int(getValueFromArrayIndex(sizeInConcatAxis, textureIndex-int(1)));\n        }\n\n        return fetchDataFromCorrectTexture(textureIndex, indices);\n      }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers,\n      variables: [{name: 'sizeInConcatAxis', type: 'int', arrayLength: inputs.length}],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    const sizeInConcatAxis = new Array<number>(programInfo.inputLayouts.length);\n    let previousSum = 0;\n    for (let i = 0; i < programInfo.inputLayouts.length; ++i) {\n      previousSum += programInfo.inputLayouts[i].shape[this.axis];\n      sizeInConcatAxis[i] = previousSum;\n    }\n    const uniformData = {sizeInConcatAxis};\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData\n    };\n  }\n  private getTextureIndexWhereDataResidesLinearSearch(numberOfTensors: number): string {\n    return `int getTextureWhereDataResides(int index) {\n      for(int i=0; i<${numberOfTensors}; i++) {\n          if(index < int(sizeInConcatAxis[i])){\n              return i;\n          }\n        }\n      }`;\n  }\n\n  // TODO: Implement BinarySearch in GLSL\n  private getTextureIndexWhereDataResidesBinarySearch(numberOfTensors: number): string {\n    return this.getTextureIndexWhereDataResidesLinearSearch(numberOfTensors);\n  }\n\n  private fetchDataFromCorrectTextureMethod(numberOfTensors: number, tensorRank: number) {\n    const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n    for (let i = 0; i < numberOfTensors; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            '\\t' +\n            `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n      } else if (i === numberOfTensors - 1) {\n        codeLines.push(\n            '\\t' +\n            `else { return _X${i}(indices); }`);\n      } else {\n        codeLines.push(\n            '\\t' +\n            `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n      }\n    }\n    codeLines.push(\n        '\\t' +\n        '}');\n    return codeLines.join('\\n');\n  }\n\n  private getValueFromArrayIndexMethod(arrayRank: number): string {\n    const codeLines: string[] = [`int getValueFromArrayIndex(int arr[${arrayRank}], int index) {`];\n    for (let i = 0; i < arrayRank; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            '\\t' +\n            `if (index == ${i}) { return arr[${i}]; }`);\n      } else if (i === arrayRank - 1) {\n        codeLines.push(\n            '\\t' +\n            `else { return arr[${i}]; }`);\n      } else {\n        codeLines.push(\n            '\\t' +\n            `else if (index == ${i}) { return arr[${i}]; }`);\n      }\n    }\n    codeLines.push(\n        '\\t' +\n        '}');\n\n    return codeLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {Logger} from '../../../instrument';\nimport {Conv} from '../../../ops/conv';\nimport {Tensor} from '../../../tensor';\nimport {assert, PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo} from '../types';\nimport {WebGLConv} from './conv';\nimport {WebGLIm2ColPacked} from './im2col-pack';\nimport {WebGLMatMulPacked} from './matmul-pack';\nimport {WebGLReshapePacked} from './reshape-packed';\n\nexport class WebGLConvPacked extends Conv {\n  protected artifacts: Artifact[];\n  protected programInfo: ProgramInfo[];\n  protected outputShape: number[];\n\n  private kernelReshape = new WebGLReshapePacked();\n  private im2col: WebGLIm2ColPacked;\n  private matmul = new WebGLMatMulPacked();\n  private outputReshape = new WebGLReshapePacked();\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const programManager = inferenceHandler.session.programManager;\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      for (let i = 2; i < kshape.length; ++i) {\n        this.kernelShape.push(kshape[i]);\n      }\n    }\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\n    Logger.verbose(\n        'Conv',\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\n\n    if (!this.outputShape) {\n      this.outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\n    }\n    if (this.im2col === undefined) {\n      this.im2col = new WebGLIm2ColPacked(this.outputShape, kshape, this.dilations, this.pads, this.strides);\n    }\n    if (this.activation) {\n      const attributes = new Attribute(undefined);\n      attributes.set('__internal_activation', 'string', (this.activation));\n      this.matmul.initialize(attributes);\n    }\n    // shape for kernel reshape\n    const shape =\n        new Tensor([2], 'int32', undefined, undefined, new Int32Array([kshape[0], kshape[1] * kshape[2] * kshape[3]]));\n    if (!this.artifacts) {\n      this.artifacts = [];\n      this.programInfo = [];\n      this.programInfo[0] = this.im2col.createProgramInfo(inferenceHandler, [inputs[0], inputs[1]]);\n      this.artifacts[0] = programManager.build(this.programInfo[0]);\n\n      this.programInfo[1] = this.kernelReshape.createProgramInfo(inferenceHandler, [inputs[1], shape]);\n      this.artifacts[1] = programManager.build(this.programInfo[1]);\n    }\n\n    // run im2col\n    const runDataIm2col = this.im2col.createRunData(inferenceHandler, this.programInfo[0], [inputs[0], inputs[1]]);\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[0], runDataIm2col);\n    programManager.run(this.artifacts[0], runDataIm2col);\n    const im2colOutput = runDataIm2col.outputTextureData.tensor;\n\n    // reshape kernel\n    const runDataKernelReshape =\n        this.kernelReshape.createRunData(inferenceHandler, this.programInfo[1], [inputs[1], shape]);\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[1], runDataKernelReshape);\n    programManager.run(this.artifacts[1], runDataKernelReshape);\n    const kernelReshaped = runDataKernelReshape.outputTextureData.tensor;\n\n    // run matmul\n    const hasBias = (inputs.length === 3);\n    assert(this.artifacts.length > 1, () => 'expect at least 2 artifacts created');\n    if (this.artifacts.length === 2) {\n      this.programInfo[2] = this.matmul.createProgramInfo(\n          inferenceHandler, hasBias ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput]);\n      this.artifacts[2] = programManager.build(this.programInfo[2]);\n    }\n    const runDataMatmul = this.matmul.createRunData(\n        inferenceHandler, this.programInfo[2],\n        hasBias ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput]);\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[2], runDataMatmul);\n    programManager.run(this.artifacts[2], runDataMatmul);\n    const matmulOutput = runDataMatmul.outputTextureData.tensor;\n\n    // reshape output\n    const outputShapeTensor = new Tensor(\n        [this.outputShape.length], 'int32', undefined, undefined,\n        new Int32Array([this.outputShape[0], this.outputShape[1], this.outputShape[2], this.outputShape[3]]));\n\n    assert(this.artifacts.length > 2, () => 'expect at least 3 artifacts created');\n    if (this.artifacts.length === 3) {\n      this.programInfo[3] = this.outputReshape.createProgramInfo(inferenceHandler, [matmulOutput, outputShapeTensor]);\n      this.artifacts[3] = programManager.build(this.programInfo[3]);\n    }\n    const runDataOutputReshape =\n        this.outputReshape.createRunData(inferenceHandler, this.programInfo[3], [matmulOutput, outputShapeTensor]);\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[3], runDataOutputReshape);\n    programManager.run(this.artifacts[3], runDataOutputReshape);\n    return [runDataOutputReshape.outputTextureData.tensor];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {Logger} from '../../../instrument';\nimport {Conv} from '../../../ops/conv';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\nimport {WebGLContext} from '../webgl-context';\n\nimport {WebGLConvPacked} from './conv-pack';\nimport {getActicationSnippet} from './fuse-utils';\n\nexport class WebGLConv extends Conv {\n  unpackedGroupedConvImpl: WebGLUnpackedGroupedConv;\n  unpackedConvImpl: WebGLUnpackedConv;\n  packedConvImpl: WebGLConvPacked;\n\n  constructor() {\n    super();\n    this.unpackedGroupedConvImpl = new WebGLUnpackedGroupedConv();\n    this.unpackedConvImpl = new WebGLUnpackedConv();\n    this.packedConvImpl = new WebGLConvPacked();\n  }\n\n  initialize(attributes: Attribute): void {\n    super.initialize(attributes);\n    this.unpackedGroupedConvImpl.initialize(attributes);\n    this.unpackedConvImpl.initialize(attributes);\n    this.packedConvImpl.initialize(attributes);\n  }\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const packMode = inferenceHandler.session.pack;\n    if (this.group > 1) {\n      return this.unpackedGroupedConvImpl.run(inferenceHandler, inputs);\n    } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1) {\n      return this.packedConvImpl.run(inferenceHandler, inputs);\n    } else {\n      return this.unpackedConvImpl.run(inferenceHandler, inputs);\n    }\n  }\n\n  static calcOutputShape(\n      inputShape: number[], kernelShape: number[], dilations: number[], adjustPads: number[],\n      strides: number[]): number[] {\n    const batchSize = inputShape[0];\n    const inputSpatialShape = inputShape.slice(2);\n    const spatialRank = inputSpatialShape.length;\n    const outChannels = kernelShape[0];\n    const kernelSpatialShape = kernelShape.slice(2);\n    const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n    const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n    const outputSpatialShape =\n        inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n    const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n    return outputShape;\n  }\n}\n\nexport class WebGLUnpackedGroupedConv extends Conv implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const hasBias = inputs.length > 2;\n    const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n    const xShape = inputs[0].dims.slice();\n    const wShape = inputs[1].dims.slice();\n    const outputChannelsPerGroup = wShape[0] / this.group;\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      for (let i = 2; i < wShape.length; ++i) {\n        this.kernelShape.push(wShape[i]);\n      }\n    }\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\n    Logger.verbose(\n        'Conv',\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\n    const outputShape = WebGLConv.calcOutputShape(xShape, wShape, this.dilations, this.pads, this.strides);\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\n\n    const shaderSource = `\n    const ivec2 strides = ivec2(${this.strides[0]}, ${this.strides[1]});\n    const ivec2 pads = ivec2(${this.pads[0]}, ${this.pads[1]});\n    ${activationFunction}\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int batch = coords.x;\n      int output_channel = coords.y;\n      ivec2 xRCCorner = coords.zw * strides - pads;\n      int group_id = output_channel / ${outputChannelsPerGroup};\n\n      float value = 0.0;\n      for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n        int input_channel = group_id * ${wShape[1]} + wInChannel;\n        for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n          int xHeight = xRCCorner.x + wHeight * ${this.dilations[0]};\n\n          if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n            continue;\n          }\n\n          for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n            int xWidth = xRCCorner.y + wWidth * ${this.dilations[1]};\n            if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n              continue;\n            }\n\n            float xVal = getX(batch, input_channel, xWidth, xHeight);\n            float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n            value += xVal*wVal;\n          }\n        }\n      }\n      ${processBias}\n      ${applyActivation}\n      ${glsl.output} = vec4(value, .0, .0, .0);\n    }\n`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n      shaderSource,\n      hasMain: true,\n    };\n  }\n\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLUnpackedConv extends Conv {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const programManager = inferenceHandler.session.programManager;\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const programInfos = this.createProgramInfoArray(inferenceHandler, inputs);\n      for (let i = 0; i < programInfos.length; ++i) {\n        const artifact = inferenceHandler.session.programManager.build(programInfos[i]);\n        this.artifacts.push(artifact);\n      }\n    }\n    const runDataArray = this.createRunDataArray(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[0], runDataArray[0]);\n    programManager.run(this.artifacts[0], runDataArray[0]);\n    programManager.run(this.artifacts[1], runDataArray[1]);\n    return [runDataArray[1].outputTextureData.tensor];\n  }\n  createProgramInfoArray(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      const wDims = inputs[1].dims;\n      for (let i = 2; i < wDims.length; ++i) {\n        this.kernelShape.push(wDims[i]);\n      }\n    }\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\n    Logger.verbose(\n        'Conv',\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\n    const outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\n    const im2colProgramInfo = this.createIm2ColProgramInfo(inferenceHandler, inputs, outputShape);\n    const dotProductProgramInfo =\n        this.createDotProductProgramInfo(inferenceHandler, im2colProgramInfo.outputLayout, inputs, outputShape);\n    return [im2colProgramInfo, dotProductProgramInfo];\n  }\n  createRunDataArray(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]):\n      RunData[] {\n    const k = inputs[1];\n    const b = inputs.length >= 3 ? inputs[2] : undefined;\n    let kTD = inferenceHandler.getTextureData(k.dataId);\n    if (!kTD) {\n      Logger.verbose('Conv', 'Did not find the adjustedKernel texture in the cache. Creating rew.');\n      const newKernelData =\n          WebGLUnpackedConv.prepKernelForDotProduct(k.dims.slice(), this.group, 4, k.floatData as Float32Array);\n      // hack: should use graph transformer to rewrite initializer K\n      kTD = inferenceHandler.createTextureDataFromLayoutBindTensor(\n          programInfos[1].inputLayouts[1], k.type, newKernelData, k);\n    }\n    const runtDataIm2Col = {\n      inputTextureDatas: [inferenceHandler.getOrCreateTextureData(inputs[0])],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, inputs[0].type),\n      uniformData: {}\n    };\n    const inputTDs = [runtDataIm2Col.outputTextureData, kTD];\n    if (b) {\n      inputTDs.push(inferenceHandler.getOrCreateTextureData(b));\n    }\n    const outputTD = inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, inputs[0].type);\n    const runDataDotProduct = {\n      inputTextureDatas: inputTDs,\n      outputTextureData: outputTD,\n      uniformData: {},\n      draw: (glContext: WebGLContext, artifact: Artifact) => {\n        const gl = glContext.gl;\n        const sharedDim = artifact.programInfo.params!.sharedDim as number;\n        const sharedDimReadSize = artifact.programInfo.params!.sharedDimReadSize as number;\n        const sharedDimOffsetLocation = artifact.uniformLocations.find(l => l.name === 'sharedDimOffset')!.location;\n        let blend = false;\n        for (let k = 0; k < sharedDim; k += sharedDimReadSize) {\n          Logger.verbose('MatMul2D', `k = ${k}, sharedDim: ${sharedDim}, readSize = ${sharedDimReadSize}`);\n          if (k === sharedDimReadSize) {\n            blend = true;\n            gl.enable(gl.BLEND);\n            glContext.checkError();\n            gl.blendEquation(gl.FUNC_ADD);\n            glContext.checkError();\n            gl.blendFunc(gl.ONE, gl.ONE);\n            glContext.checkError();\n          }\n\n          gl.uniform1i(sharedDimOffsetLocation, k);\n          glContext.checkError();\n          glContext.draw();\n        }\n\n        if (blend) {\n          gl.disable(gl.BLEND);\n          glContext.checkError();\n        }\n      }\n    };\n    return [runtDataIm2Col, runDataDotProduct];\n  }\n  createIm2ColProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], outputShape: number[]):\n      ProgramInfo {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n\n    const rank = outputShape.length;\n    const im2colDims = WebGLUnpackedConv.calcIm2ColDims(xshape, kshape, outputShape, 4);\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(\n        im2colDims, 4, [im2colDims[0], im2colDims[1], im2colDims[2], im2colDims[3] * 4], {breakAxis: 3});\n\n    const shaderSource = `\n      const int XC = ${xshape[1]};\n      const int XH = ${xshape[2]};\n      const int XW = ${xshape[3]};\n      const int KH = ${this.kernelShape[0]};\n      const int KW = ${this.kernelShape[1]};\n      const int dilationH = ${this.dilations[0]};\n      const int dilationW = ${this.dilations[1]};\n      const int strideH = ${this.strides[0]};\n      const int strideW = ${this.strides[1]};\n      const int padH = ${this.pads[0]};\n      const int padW = ${this.pads[1]};\n      const int KHKW = KH*KW;\n      const int XCKHKW = XC * KHKW;\n      const int outputChannels = 4;\n      vec4 process(int indices[${rank}]) {\n        int b  = indices[0]; // batch size\n        int oh = indices[1] * strideH - padH; //output height\n        int ow = indices[2] * strideW - padW; //output width\n        int p = indices[3] * outputChannels; //patch\n        vec4 value = vec4(0.0);\n        for(int i=0; i < outputChannels; ++i) {\n          if(p < XCKHKW) {\n            int patchC = p / KHKW;\n            int patchH = (p - patchC*KHKW) / KW;\n            int patchW = (p - patchC*KHKW) - patchH * KW;\n            int xh2 = oh + patchH * dilationH;\n            int xw2 = ow + patchW * dilationW;\n            int x[${xshape.length}];\n            x[0] = b;\n            x[1] = patchC;\n            x[2] = xh2;\n            x[3] = xw2;\n            if(xh2 >= 0 &&\n                xh2 < XH &&\n                xw2 >= 0 &&\n                xw2 < XW) {\n              value[i] = _X(x);\n            }\n          }\n          ++p;\n        }\n        return value;\n      }\n      `;\n    return {\n      name: 'Im2Col',\n      inputLayouts: [inferenceHandler.createTextureLayoutFromShape(xshape)],\n      outputLayout,\n      samplers: ['X'],\n      shaderSource,\n    };\n  }\n  createDotProductProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, im2colLayout: TextureLayout, inputs: Tensor[],\n      outputShape: number[]): ProgramInfo {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n    const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n    const kLayout = inferenceHandler.createTextureLayoutFromShape(\n        adjustedKernelShape, 4, [adjustedKernelShape[0], adjustedKernelShape[1] * 4], {breakAxis: 1});\n\n    let bLayout: TextureLayout|undefined;\n    const rank = outputShape.length;\n\n    const inputLayouts = [im2colLayout, kLayout];\n    if (inputs.length === 3) {\n      bLayout = inferenceHandler.createTextureLayoutFromShape(inputs[2].dims.slice());\n      inputLayouts.push(bLayout);\n    }\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(outputShape);\n    const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n    const sharedDim = im2colLayout.shape[3];\n    const blendEnabled = inferenceHandler.session.backend.glContext.isBlendSupported && !this.activation;\n    const sharedDimReadSize = blendEnabled && inferenceHandler.session.backend.matmulMaxBatchSize ?\n        this.calcSharedDimReadSize(inferenceHandler.session.backend.matmulMaxBatchSize, sharedDim) :\n        sharedDim;\n    const samplers = ['Im2Col', 'K'];\n    if (inputs.length === 3) {\n      samplers.push('B');\n    }\n\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\n\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n    ${activationFunction}\n    float process(int indices[${rank}]) {\n      int b[1];\n      b[0] = indices[1];\n      int im2col[${im2colLayout.shape.length}];\n      im2col[0] = indices[0];\n      im2col[1] = indices[2];\n      im2col[2] = indices[3];\n      int im2colOffset = im2col[0] * ${im2colLayout.strides[0]} + im2col[1] * ${\n        im2colLayout.strides[1]} + im2col[2] * ${im2colLayout.strides[2]} + sharedDimOffset;\n      int kernelOffset = indices[1] * ${kLayout.strides[0]} + sharedDimOffset;\n      float value = sharedDimOffset == 0 ? ${initValue} : 0.0;\n      for (int i = 0; i < ${sharedDimReadSize}; ++i) {\n        vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colLayout.width}, ${im2colLayout.height});\n        vec2 kernelCoords = offsetToCoords(kernelOffset, ${kLayout.width}, ${kLayout.height});\n        value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n        ++im2colOffset;\n        ++kernelOffset;\n      }\n      ${applyActivation}\n      return value;\n    }`;\n    return {\n      name: 'dotProduct',\n      inputLayouts: inputs.length === 3 ? [im2colLayout, kLayout, bLayout!] : [im2colLayout, kLayout],\n      outputLayout,\n      shaderSource,\n      samplers,\n      variables: [{name: 'sharedDimOffset', type: 'int'}],\n      params: {sharedDim, sharedDimReadSize}\n    };\n  }\n  static prepKernelForDotProduct(shape: number[], group: number, channels: number, kernel: Float32Array): Float32Array {\n    if (group === 1 && (channels === 1 || (shape[2] * shape[3]) % channels === 0)) {\n      return kernel;\n    }\n    const numFeatureMaps = shape[0];\n    const oldRowSize = shape[1] * shape[2] * shape[3];\n    const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n    const newSize = numFeatureMaps * newRowSize;\n    const buffer = new Float32Array(newSize);\n    for (let f = 0; f < numFeatureMaps; ++f) {\n      const oldOffset = f * oldRowSize;\n      const newOffset = f * newRowSize + f % group * oldRowSize;\n      buffer.set(kernel.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n    }\n    return buffer;\n  }\n  static calcIm2ColDims(inputShape: number[], kernelShape: number[], outputShape: number[], channels = 1): number[] {\n    return [\n      outputShape[0], outputShape[2], outputShape[3],\n      Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)\n    ];\n  }\n\n  protected calcSharedDimReadSize(preferredBatchSize: number, sharedDim: number): number {\n    if (preferredBatchSize <= 0 || sharedDim < preferredBatchSize || sharedDim % preferredBatchSize !== 0) {\n      return sharedDim;\n    }\n    return preferredBatchSize;\n  }\n  protected calcBlockSize(outputLayout: TextureLayout): [number, number]|undefined {\n    const preferredRowCount = 64;\n    const preferredColCount = 64;\n    if (outputLayout.height < preferredRowCount) {\n      return undefined;\n    }\n    return [preferredColCount, preferredRowCount];\n  }\n  protected artifacts: Artifact[];\n  protected readSize = 8;\n  protected blockSize = 64;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {DepthToSpace} from '../../../ops/depth-to-space';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData} from '../types';\n\nimport {reshape} from './reshape';\nimport {WebGLTranspose} from './transpose';\n\nexport class WebGLDepthToSpace extends DepthToSpace {\n  protected transposeProgramInfo: ProgramInfo;\n\n  protected transposeArtifact: Artifact;\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const programManager = inferenceHandler.session.programManager;\n    const transposePerm = this.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n    const firstReshapeShape = this.mode === 'DCR' ?\n        [\n          inputs[0].dims[0], this.blocksize, this.blocksize, inputs[0].dims[1] / this.blocksizeSqr, inputs[0].dims[2],\n          inputs[0].dims[3]\n        ] :\n        [\n          inputs[0].dims[0], inputs[0].dims[1] / this.blocksizeSqr, this.blocksize, this.blocksize, inputs[0].dims[2],\n          inputs[0].dims[3]\n        ];\n\n    const transpose = new WebGLTranspose();\n    const attributes = new Attribute(undefined);\n    attributes.set('perm', 'ints', transposePerm);\n    transpose.initialize(attributes);\n\n    // First reshape\n\n    const firstReshapedTensor = reshape(inferenceHandler, inputs[0], firstReshapeShape);\n\n    // transpose\n    if (!this.transposeProgramInfo) {\n      this.transposeProgramInfo = transpose.createProgramInfo(inferenceHandler, [firstReshapedTensor]);\n      this.transposeArtifact = programManager.build(this.transposeProgramInfo);\n    }\n    const runDataTranspose =\n        transpose.createRunData(inferenceHandler, this.transposeProgramInfo, [firstReshapedTensor]);\n    inferenceHandler.checkAndUpdateTextureForm(this.transposeArtifact, runDataTranspose);\n    programManager.run(this.transposeArtifact, runDataTranspose);\n    const transposeOutput = runDataTranspose.outputTextureData.tensor;\n\n    // Second reshape\n    const result = reshape(inferenceHandler, transposeOutput, [\n      inputs[0].dims[0], inputs[0].dims[1] / this.blocksizeSqr, inputs[0].dims[2] * this.blocksize,\n      inputs[0].dims[3] * this.blocksize\n    ]);\n    return [result];\n  }\n\n  protected getOutShape(input: Tensor): number[] {\n    const batchSize = input.dims[0];\n    const inputDepth = input.dims[1];\n    const inputHeight = input.dims[2];\n    const inputWidth = input.dims[3];\n    if (inputDepth % (this.blocksizeSqr) !== 0) {\n      throw new Error('Input depth must be divisible by squared blocksize.');\n    }\n    const outputDepth = inputDepth / this.blocksizeSqr;\n    const outputHeight = inputHeight * this.blocksize;\n    const outputWidth = inputWidth * this.blocksize;\n    return [batchSize, outputDepth, outputHeight, outputWidth];\n  }\n\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Dropout} from '../../../ops/dropout';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLDropout extends Dropout implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (this.testMode) {\n      return [inputs[0]];\n    }\n    throw new Error('Non test mode Dropout is not implemented yet');\n  }\n  createProgramInfo(_handler: WebGLInferenceHandler, _inputs: Tensor[]): ProgramInfo {\n    throw new Error('Non test mode Dropout is not implemented yet');\n  }\n  createRunData(_handler: WebGLInferenceHandler, _programInfo: ProgramInfo, _inputs: Tensor[]): RunData {\n    throw new Error('Non test mode Dropout is not implemented yet');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Elu} from '../../../ops/elu';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLElu extends Elu implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      void main() {\n        float v = ${glsl.texture2D}(A, TexCoords).r;\n        ${glsl.output} = vec4(v >= 0.0 ? v: (exp(v) - 1.0) * ${this.alpha.toExponential()}); /* float number format */\n      }\n      `;\n    return {\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Flatten} from '../../../ops/flatten';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {reshape} from './reshape';\n\nexport class WebGLFlatten extends Flatten {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.flattenShape(inputs[0].dims, this.axis);\n\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {glslRelu, glslSigmoid} from './unary-op';\n\nexport function getActicationSnippet(activation: string) {\n  let activationFunction = '';\n  let activationName = '';\n  switch (activation) {\n    case 'Relu':\n      activationName = glslRelu().name;\n      activationFunction = glslRelu().body;\n      break;\n    case 'Sigmoid':\n      activationName = glslSigmoid().name;\n      activationFunction = glslSigmoid().body;\n      break;\n    default:\n      // TODO: adding other activations that can be fused.\n      activationName = '';\n      activationFunction = '';\n  }\n  const applyActivation = activation ? `\n  value = ${activationName}(value);` :\n                                       '';\n  return {activationFunction, applyActivation};\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Gather} from '../../../ops/gather';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLGather extends Gather implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    const indexDataShape = inputs[1].dims.slice();\n    const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\n    const indexCopyOps: string[] = [];\n    for (let i = 0; i < outputShape.length; i++) {\n      // outputShape is divided into three parts: A, B, C\n      // |0        axis|  axis + indexDataShape.length |          end|\n      // |     A       |             B                 |      C      |\n      //\n      // inputIdx: [A, inputs[1][B], C]\n      if (i < axis) {  // A\n        outputShape[i] = inputShape[i];\n        indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n      } else {\n        if (i < axis + indexDataShape.length) {  // B\n          outputShape[i] = indexDataShape[i - axis];\n          indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n        } else {                                                       // C\n          outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n          indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n        }\n      }\n    }\n\n    const orank = outputShape.length || 1;\n    const irank = inputShape.length;\n    const iDrank = indexDataShape.length || 1;\n    const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'B'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Gemm} from '../../../ops/gemm';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLGemm extends Gemm implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const aShape = inputs[0].dims.slice();\n    const bShape = inputs[1].dims.slice();\n    const [M, N] = GemmUtil.getShapeOfGemmResult(\n        aShape, this.transA, bShape, this.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n    const oShape = [M, N];\n    if (!oShape) {\n      throw new Error('Can\\'t use gemm on the given tensors');\n    }\n    let sharedDim = aShape[aShape.length - 1];\n    let line = '';\n    if (this.transA) {\n      sharedDim = aShape[0];\n    }\n    if (this.transA && this.transB) {\n      line = 'value += _A_T(a) * _B_T(b);';\n    } else if (this.transA && !this.transB) {\n      line = 'value += _A_T(a) * _B(b);';\n    } else if (!this.transA && this.transB) {\n      line = 'value += _A(a) * _B_T(b);';\n    } else if (!this.transA && !this.transB) {\n      line = 'value += _A(a) * _B(b);';\n    }\n    const rank = oShape.length;\n    const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n    const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n    const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n    const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n    const inputLayouts = inputs.map(t => inferenceHandler.getOrCreateTextureLayout(t));\n    return {\n      inputLayouts,\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(oShape),\n      samplers: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n      variables: [{name: 'alpha', type: 'float'}, {name: 'beta', type: 'float'}],\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => inferenceHandler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {'alpha': this.alpha, 'beta': this.beta}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {unpackFromChannel} from './packing-utils';\n\nexport class WebGLIm2ColPacked implements WebGLOperator {\n  protected convOutputShape: number[];\n  protected kernelShape: number[];\n  protected dilations: number[];\n  protected pads: number[];\n  protected strides: number[];\n\n  constructor(\n      convOutputShape: number[], kernelShape: number[], dilations: number[], pads: number[], strides: number[]) {\n    this.convOutputShape = convOutputShape;\n    this.kernelShape = kernelShape;\n    this.dilations = dilations;\n    this.pads = pads;\n    this.strides = strides;\n  }\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (inputs.length !== 2) {\n      throw new Error('Im2Col kernel should have two input tensors');\n    }\n\n    const xshape = inputs[0].dims.slice();\n    const wshape = inputs[1].dims.slice();\n    const rowDim = 2;\n    const colDim = 3;\n    const rank = this.convOutputShape.length;\n    const im2colShape = [wshape[1] * wshape[2] * wshape[3], this.convOutputShape[2] * this.convOutputShape[3]];\n    const kernelSize = wshape[2] * wshape[3];\n    const unpackChannel = unpackFromChannel();\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    let unrolled = '';\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.x + ${col};\n          pos = rc.y + ${row};\n\n          if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n            offsetY = int(blockIndex / (${this.convOutputShape[rank - 1]})) * ${this.strides[0]} - ${this.pads[0]};\n            d0 = offsetY + ${this.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n            if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n              offsetX = imod(blockIndex, ${this.convOutputShape[rank - 1]}) * ${this.strides[1]} - ${this.pads[1]};\n              d1 = offsetX + ${this.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n              if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                ch = int(float(pos)/ ${kernelSize}.);\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(0, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n              }\n            }\n          }\n\n        `;\n      }\n    }\n\n    const shaderSource = `\n    ${unpackChannel}\n\n    void main() {\n      ivec2 rc = getOutputCoords();\n        vec4 result = vec4(0.0);\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n        ${unrolled}\n        ${glsl.output} = result;\n    }\n          `;\n    return {\n      name: 'WebGLIm2ColPacked',\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(inputs[0], 4, true, xshape, true)],\n      outputLayout:\n          inferenceHandler.createTextureLayoutFromShape(im2colShape, 4, im2colShape, {isPacked: true, reverseWH: true}),\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: true,\n      expectPackedOutputs: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs =\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true)));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ImageScaler} from '../../../ops/image-scaler';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLImageScaler extends ImageScaler implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const rank = outputShape.length;\n    const getBiasMethod = this.createGetBiasMethod(this.bias.length);\n    const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n    return {\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['X'],\n      variables: [{name: 'bias', type: 'float', arrayLength: this.bias.length}, {name: 'scale', type: 'float'}],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {'bias': this.bias, 'scale': this.scale}\n    };\n  }\n  private createGetBiasMethod(numChannels: number): string {\n    const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n    for (let i = 0; i < numChannels; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            '\\t' +\n            `if (channel == ${i}) { return bias[${i}]; }`);\n      } else if (i === numChannels - 1) {\n        codeLines.push(\n            '\\t' +\n            `else { return bias[${i}]; }`);\n      } else {\n        codeLines.push(\n            '\\t' +\n            `else if (channel == ${i}) { return bias[${i}]; }`);\n      }\n    }\n    codeLines.push(\n        '\\t' +\n        '}');\n    return codeLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\n\nexport class WebGLInstanceNormalization extends InstanceNormalization {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\n      programInfos.forEach((programInfo) => {\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\n        this.artifacts.push(artifact);\n      });\n    }\n\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\n    return [runDatas[1].outputTextureData.tensor];\n  }\n\n  checkInputTypes(inputs: Tensor[]): boolean {\n    if (!super.checkInputTypes(inputs)) {\n      return false;\n    }\n\n    if (inputs[0].dims.length !== 4) {\n      // currently webgl implementation only support 4-D input.\n      return false;\n    }\n\n    return true;\n  }\n\n  createMeanAndVarianceProgramInfo(inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout): ProgramInfo {\n    const xDims = xLayout.shape;\n    const channel = xDims[1];\n    const channelSize = xDims[2] * xDims[3];\n    const outputShape = [xDims[0], channel];\n    const outputUnpackedShape = [xDims[0], channel * 4];\n\n    const shaderSource = `\n    vec4 process(int[2] indices) {\n      vec4 v = vec4(0.0);\n      int a[4];\n      a[0] = indices[0];\n      a[1] = indices[1];\n      float temp = 0.0;\n      for(int a2=0; a2<${xDims[2]}; a2++) {\n        a[2] = a2;\n        for(int a3=0; a3<${xDims[3]}; a3++) {\n          a[3] = a3;\n          float x = _X(a);\n          temp += x;\n        }\n      }\n      float mean = temp / float(${channelSize});\n      temp = 0.0;\n      for(int a2=0; a2<${xDims[2]}; a2++) {\n        a[2] = a2;\n        for(int a3=0; a3<${xDims[3]}; a3++) {\n          a[3] = a3;\n          float x = _X(a);\n          temp += (x - mean) * (x - mean);\n        }\n      }\n      v.r = mean;\n      v.g = temp / float(${channelSize});\n\n      return v;\n    }`;\n    return {\n      inputLayouts: [xLayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape, 4, outputUnpackedShape),\n      samplers: ['X'],\n      shaderSource,\n      name: 'MeanAndVariance',\n    };\n  }\n\n  createComputOutputProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout, scaleLayout: TextureLayout,\n      bLayout: TextureLayout, meanAndVarianceLayout: TextureLayout): ProgramInfo {\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n    vec4 get_MeanAndVariance(int[2] mv) {\n      int offset = indicesToOffset_MeanAndVariance(mv);\n      vec2 coords = offsetToCoords(offset, ${meanAndVarianceLayout.width}, ${meanAndVarianceLayout.height});\n      return ${glsl.texture2D}(MeanAndVariance, coords);\n    }\n\n    float process(int[4] indices) {\n\n          int mv[2];\n          mv[0] = indices[0];\n          mv[1] = indices[1];\n          vec4 mean_and_variance = get_MeanAndVariance(mv);\n          float mean = mean_and_variance.r;\n          float variance = mean_and_variance.g;\n\n          int sb[1];\n          sb[0] = indices[1];\n          float scale = _Scale(sb);\n          float b = _B(sb);\n\n          return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n        }`;\n    return {\n      inputLayouts: [xLayout, meanAndVarianceLayout, scaleLayout, bLayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(xLayout.shape),\n      samplers: ['X', 'MeanAndVariance', 'Scale', 'B'],\n      variables: [{name: 'epsilon', type: 'float'}],\n      shaderSource,\n      name: 'ComputOutput',\n    };\n  }\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\n    const xLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\n    const scaleLayout = inferenceHandler.getOrCreateTextureLayout(inputs[1]);\n    const bLayout = inferenceHandler.getOrCreateTextureLayout(inputs[2]);\n    const meanAndVarianceProgramInfo = this.createMeanAndVarianceProgramInfo(inferenceHandler, xLayout);\n    const computeOutputProgramInfo = this.createComputOutputProgramInfo(\n        inferenceHandler, xLayout, scaleLayout, bLayout, meanAndVarianceProgramInfo.outputLayout);\n\n    const programInfos: ProgramInfo[] = [meanAndVarianceProgramInfo, computeOutputProgramInfo];\n    return programInfos;\n  }\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\n    const dataType = inputs[0].type;\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\n    const scaleTD = inferenceHandler.getOrCreateTextureData(inputs[1], programInfos[1].inputLayouts[2]);\n    const bTD = inferenceHandler.getOrCreateTextureData(inputs[2], programInfos[1].inputLayouts[3]);\n    const runDatas: RunData[] = [];\n    runDatas.push({\n      inputTextureDatas: [inputTD],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\n      uniformData: {}\n    });\n    runDatas.push({\n      inputTextureDatas: [inputTD, runDatas[0].outputTextureData, scaleTD, bTD],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, dataType),\n      uniformData: {'epsilon': this.epsilon}\n    });\n    return runDatas;\n  }\n  protected artifacts: Artifact[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {LeakyRelu} from '../../../ops/leaky-relu';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLLeakyRelu extends LeakyRelu implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      void main() {\n        float v = ${glsl.texture2D}(A, TexCoords).r;\n        ${glsl.output} = vec4(v < 0.0 ? v * float(${this.alpha}) : v);\n      }\n      `;\n    return {\n      hasMain: true,\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MatMul} from '../../../ops/matmul';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getActicationSnippet} from './fuse-utils';\n\nexport class WebGLMatMulPacked extends MatMul implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const hasBias = inputs.length > 2;\n    const processBias = hasBias ? 'result += getBiasAtOutCoords();' : '';\n    const aShape = inputs[0].dims;\n    const bShape = inputs[1].dims;\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n\n    if (!outputShape) {\n      throw new Error('Can\\'t use matmul on the given tensors');\n    }\n    const sharedDim = aShape[aShape.length - 1];\n    const sharedDimIndex = Math.ceil(sharedDim / 2);\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const coordsDataType = getCoordsDataType(outputShape.length);\n    const outRank = outputShape.length;\n    const allGlChannels = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\n    const shaderSource = `\n      ${activationFunction}\n      void main() {\n        ${coordsDataType} rc = getOutputCoords();\n        int lastDim = rc.${allGlChannels[outRank - 1]};\n        rc.${allGlChannels[outRank - 1]} = rc.${allGlChannels[outRank - 2]};\n        rc.${allGlChannels[outRank - 2]} = lastDim;\n\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimIndex}; i++) {\n          vec4 a = getA(${getA(allGlChannels, aRank)});\n          vec4 b = getB(${getB(allGlChannels, bRank)});\n          result += (a.rrbb * b.rgrg);\n          result += (a.ggaa * b.baba);\n        }\n        ${processBias}\n        ${applyActivation}\n        ${glsl.output} = result;\n      }`;\n    return {\n      name: 'WebGLMatMulPacked',\n      inputLayouts: inputs.map((t, i) => handler.getOrCreateTextureLayout(t, 4, true, inputs[i].dims, true)),\n      outputLayout:\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}),\n      samplers: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: true,\n      expectPackedOutputs: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs =\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true)));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MatMul} from '../../../ops/matmul';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {WebGLMatMulPacked} from './matmul-pack';\n\nexport class WebGLMatMul extends MatMul implements WebGLOperator {\n  private usePackedTexture?: boolean;\n\n  packedImpl: WebGLMatMulPacked;\n  unpackedImpl: WebGLUnpackedMatMul;\n  constructor() {\n    super();\n    this.packedImpl = new WebGLMatMulPacked();\n    this.unpackedImpl = new WebGLUnpackedMatMul();\n  }\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (this.usePackedTexture === undefined) {\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      this.usePackedTexture = !isBroadcast && inferenceHandler.session.pack;\n    }\n\n    if (this.usePackedTexture) {\n      return inferenceHandler.run(this.packedImpl, inputs);\n    } else {\n      return inferenceHandler.run(this.unpackedImpl, inputs);\n    }\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (this.usePackedTexture === undefined) {\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      this.usePackedTexture = !isBroadcast && handler.session.pack;\n    }\n\n    if (this.usePackedTexture && inputs[0].dims.length > 1) {\n      return this.packedImpl.createProgramInfo(handler, inputs);\n    } else {\n      return this.unpackedImpl.createProgramInfo(handler, inputs);\n    }\n  }\n\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    if (this.usePackedTexture && inputs[0].dims.length > 1) {\n      return this.packedImpl.createRunData(handler, programInfo, inputs);\n    } else {\n      return this.unpackedImpl.createRunData(handler, programInfo, inputs);\n    }\n  }\n}\n\nexport class WebGLUnpackedMatMul extends MatMul implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const aShape = inputs[0].dims;\n    const bShape = inputs[1].dims;\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n    if (!outputShape) {\n      throw new Error('Can\\'t use matmul on the given tensors');\n    }\n    const rank = outputShape.length;\n    const arank = aShape.length;\n    const brank = bShape.length;\n    const sharedDim = aShape[aShape.length - 1];\n    const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${arank}];\n          int b[${brank}];\n          bcastMatmulIndices_A(indices, a);\n          bcastMatmulIndices_B(indices, b);\n\n          float value;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${arank - 1}] = k;\n              b[${brank - 2}] = k;\n              value += _A(a) * _B(b);\n          }\n          return value;\n      }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'B'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nexport class WebGLPack implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (inputs.length !== 1) {\n      throw new Error('Pack kernel should have input tensor count to 1.');\n    }\n\n    const inputShape = inputs[0].dims;\n\n    const outputLayout =\n        handler.createTextureLayoutFromShape(inputShape, 4, inputShape, {isPacked: true, reverseWH: true});\n    const outputShape = outputLayout.shape;\n    const inputRank = inputShape.length;\n    const outputRank = outputShape.length;\n\n    const coordsDataType = getCoordsDataType(outputRank);\n    const channels = getChannels('rc', outputRank);\n    const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n    let reversedInputWH;\n    if (inputRank === 0) {\n      reversedInputWH = [1, 1];\n    } else if (inputRank === 1) {\n      reversedInputWH = [inputShape[0], 1];\n    } else {\n      reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n    }\n    const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n    const output = getOutput(inputShape, channels);\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n\n    return {\n      name: 'WebGLPack',\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true)],\n      outputLayout,\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: false,\n      expectPackedOutputs: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Pad} from '../../../ops/pad';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\n\nexport class WebGLPad extends Pad implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), this.pads);\n    const rank = outputShape.length;\n    const alayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\n    const padFunction = getPadFunction(\n        getGlsl(inferenceHandler.session.backend.glContext.version), 'A', alayout, this.mode, this.pads, this.value);\n    const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n    return {\n      inputLayouts: [alayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\nexport function getPadFunction(\n    glsl: Glsl, name: string, inputLayout: TextureLayout, mode: string, pads: number[], value: number): string {\n  switch (mode) {\n    case 'constant':\n      return getPadConstant(\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads, value);\n    case 'reflect':\n      return getPadReflect(\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\n    case 'edge':\n      return getPadEdge(\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n}\nfunction getPadConstant(\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\n    pads: number[], value: number) {\n  const rank = shape.length;\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n          k = m[${i}] - ${pads[i]};\n          if (k < 0)  return constant;\n          if (k >= ${shape[i]}) return constant;\n          offset += k * ${strides[i]};\n          `;\n  }\n  return `\n        float pad${name}(int m[${rank}]) {\n          const float constant = float(${value});\n          int offset = 0;\n          int k = 0;\n          ${block}\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\n          return value;\n        }\n        `;\n}\nfunction getPadReflect(\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\n    pads: number[]) {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n  }\n  return `\n      float pad${name}(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\n        return value;\n      }\n      `;\n}\nfunction getPadEdge(\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\n    pads: number[]) {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n      k = m[${i}] - ${pads[i]};\n      if (k < 0)  k = 0;\n      if (k >= ${shape[i]}) k = ${shape[i] - 1};\n      offset += k * ${strides[i]};\n      `;\n  }\n  return `\n    float pad${name}(int m[${rank}]) {\n      int offset = 0;\n      int k = 0;\n      ${block}\n      vec2 coords = offsetToCoords(offset, ${width}, ${height});\n      float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\n      return value;\n    }\n    `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\n\nexport class WebGLGlobalAveragePool extends GlobalAveragePool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createAveragePoolProgramInfo(\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLAveragePool extends AveragePool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createAveragePoolProgramInfo(\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\nfunction createAveragePoolProgramInfo(\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\n    autoPad = '', strides: number[] = [], pads: number[] = [], countIncludePad: boolean): ProgramInfo {\n  const inputShape = inputs[0].dims.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\n  const outputShape =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\n  const kernelSize = ShapeUtil.size(kernelShape);\n  const op1 = 'value += _X(x);';\n  let op2 = '';\n  if (countIncludePad) {\n    op2 += `value /= float(${kernelSize});`;\n  } else {\n    op2 += `value /= float(${kernelSize} - pad);`;\n  }\n  const inputLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\n  const poolingCode = generatePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '0.0');\n  const shaderSource = `\n      ${poolingCode}\n    `;\n  return {\n    inputLayouts: [inputLayout],\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n    samplers: ['X'],\n    shaderSource,\n  };\n}\n\nexport class WebGLGlobalMaxPool extends GlobalMaxPool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createMaxPoolProgramInfo(\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLMaxPool extends MaxPool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createMaxPoolProgramInfo(\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\nfunction createMaxPoolProgramInfo(\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\n    autoPad = '', strides: number[] = [], pads: number[] = []): ProgramInfo {\n  const inputShape = inputs[0].dims.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\n  const outputShape =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\n  const op1 = `\n              value = max(_X(x), value);\n      `;\n  const op2 = '';\n  const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\n  const poolingCode = generatePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '-1e5');\n  const shaderSource = `\n    ${poolingCode}\n  `;\n  return {\n    inputLayouts: [inputLayout],\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n    samplers: ['X'],\n    shaderSource,\n  };\n}\n\nexport function generatePoolingCode(\n    x: TextureLayout, kernelShape: number[], pads: number[], strides: number[], op1: string, op2: string,\n    startVal: string): string {\n  const inputDims = x.shape;\n  const rank = x.shape.length;\n  if (kernelShape.length <= 2) {\n    const kw = kernelShape[kernelShape.length - 1];\n    const sw = strides[strides.length - 1];\n    const pwStart = pads[pads.length / 2 - 1];\n    const pwEnd = pads[pads.length - 1];\n    const dimW = inputDims[rank - 1];\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n                for (int i = 0; i < ${kw}; i++) {\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n                  if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n                    pad++;\n                    continue;\n                  }\n                  ${op1}\n                }`;\n    } else {\n      codeW = `\n                for (int i = 0; i < ${kw}; i++) {\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n                  ${op1}\n                }`;\n    }\n\n    if (kernelShape.length === 2) {\n      const kh = kernelShape[kernelShape.length - 2];\n      const sh = strides[strides.length - 2];\n      const phStart = pads[pads.length / 2 - 2];\n      const phEnd = pads[pads.length - 2];\n      const dimH = inputDims[rank - 2];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n              for (int j = 0; j < ${kh}; j++) {\n                x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n                if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                  pad+= ${kw};\n                  continue;\n                }\n            `;\n      } else {\n        codeH = `\n                for (int j = 0; j < ${kh}; j++) {\n                  x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            float process(int indices[${rank}]) {\n              int x[${rank}];\n              copyVec(indices, x);\n\n              float value = ${startVal};\n              int pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n              return value;\n            }\n          `;\n    return poolingCode;\n  } else {\n    const kernelSize = ShapeUtil.size(kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = pads.length;\n    const offsetToIndicesFunction = offsetToIndices(stridesRank);\n    const copyInputDims = copyArray(inputDims, 'inputDims');\n    const copyPads = copyArray(pads, 'pads');\n    const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n    const copyStrides = copyArray(strides, 'strides');\n    const hasPads = pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (x[j] >= inputDims[j] || x[j] < 0) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n                  }\n                  ${op1}`;\n    }\n    const poolingCode = `\n            ${offsetToIndicesFunction}\n            float process(int indices[${rank}]) {\n                int x[${rank}];\n                copyVec(indices, x);\n                int offset[${stridesRank}];\n                int pads[${padsRank}];\n                int inputDims[${rank}];\n                int kernelStrides[${stridesRank}];\n                int strides[${stridesRank}];\n                ${copyPads}\n                ${copyInputDims}\n                ${copyStrides}\n                ${copyKernelStrides}\n\n                float value = ${startVal};\n                int pad = 0;\n                bool isPad = false;\n                for (int i = 0; i < ${kernelSize}; i++) {\n                    offsetToIndices(i, kernelStrides, offset);\n                    isPad = false;\n                    for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n                      x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                        + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n                      ${padCode}\n                }\n                ${op2}\n\n                return value;\n            }`;\n    return poolingCode;\n  }\n}\n\nexport function copyArray(array: readonly number[], arrayName: string): string {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n}\n\nexport function offsetToIndices(rank: number): string {\n  return `\n    void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n      if (${rank} == 0) {\n        return;\n      }\n      for (int i = 0; i < ${rank} - 1; ++i) {\n        indices[i] = offset / strides[i];\n        offset -= indices[i] * strides[i];\n      }\n      indices[${rank} - 1] = offset;\n    }`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ReduceBase} from '../../../ops/reduce-op';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nabstract class WebGLGenericReduce extends ReduceBase implements WebGLOperator {\n  abstract getOps(inputs: Tensor[], axes: number[]): string[];\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape: number[] = [];\n    const iRank = inputs[0].dims.length || 1;\n\n    const idxCopy = [];  // copy output indexes to input indexes\n\n    const axes = ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length);\n    const ops = this.getOps(inputs, axes);  // [init ops, reduce ops, final ops]\n    let reduceOps = ops[1];\n\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      // if this axis is reduced\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        if (this.keepDims) {\n          outputShape.push(1);\n        }  // else { remove the axis from outputShape; }\n\n        // loop over the d-th axis\n        reduceOps = `\n        for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n          inputIdx[${k}] = j${k};\n          ${reduceOps}\n        }\n        `;\n      } else {\n        idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n        outputShape.push(inputs[0].dims[k]);\n      }\n    }\n\n    const oRank = outputShape.length || 1;\n\n    const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLReduceSum extends WebGLGenericReduce {\n  getOps(_inputs: Tensor[]): string[] {\n    return ['value = 0.0;', 'value += _A(inputIdx);', ''];\n  }\n}\n\nexport class WebGLReduceMean extends WebGLGenericReduce {\n  getOps(inputs: Tensor[], axes: number[]): string[] {\n    let size = 1.0;\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        size *= inputs[0].dims[k];\n      }\n    }\n\n    return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n  }\n}\n\nexport class WebGLReduceMax extends WebGLGenericReduce {\n  getOps(inputs: Tensor[], axes: number[]): string[] {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n  }\n}\n\nexport class WebGLReduceMin extends WebGLGenericReduce {\n  getOps(inputs: Tensor[], axes: number[]): string[] {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n  }\n}\n\nexport class WebGLReduceProd extends WebGLGenericReduce {\n  getOps(_inputs: Tensor[]): string[] {\n    return ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n  }\n}\n\nexport class WebGLReduceLogSum extends WebGLGenericReduce {\n  getOps(_inputs: Tensor[]): string[] {\n    return ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n  }\n}\n\nexport class WebGLReduceSumSquare extends WebGLGenericReduce {\n  getOps(_inputs: Tensor[]): string[] {\n    return ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Reshape} from '../../../ops/reshape';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, TextureData, WebGLOperator} from '../types';\nimport {TextureLayout} from '../types';\nimport {unpackFromChannel} from './packing-utils';\n\nexport class WebGLReshapePacked extends Reshape implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (inputs.length !== 2) {\n      throw new Error('resize kernel should have input tensor count to 2.');\n    }\n\n    // For packed reshape, we need to re-arrange texel data for output shape.\n    // Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n    // for the reshaped new tensor, we just need to re-arrange the last h and\n    // w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n    // first convert it to 3D by collapsing other dimension to batch dim, then\n    // process with the last two dimensions.\n    // Note: we only need the shape tensor to calculate output shape, so the\n    // content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n    // TODO: optimize the algorithm -- in some cases, if the last two dims are\n    // the same between input shape and output shape, the packed reshape can be\n    // treated as no-op.\n    // TODO: the implementation is a bit complicated due to the fact tensor shape is\n    // immutable once the tensor is created, plus the tensor shape has a 1-to-1\n    // mapping with texture layout. In the future, we may consider relaxing this\n    // assumption.\n\n    const originInputShape = inputs[0].dims;\n    this.inputShape3D = processDims3D(inputs[0].dims);\n    let inputLayout: TextureLayout;\n    inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true, originInputShape, true);\n    if (originInputShape.length !== 3) {\n      const originalInputLayout = inputLayout;\n      // if originShape is not a 3D shape, create texture layout from the processed shape.\n      inputLayout = handler.createTextureLayoutFromShape(\n          this.inputShape3D, 4, this.inputShape3D, {isPacked: true, reverseWH: true});\n      // if the processed input shape produces texture layout differnt from the original\n      // one, the run data has to use the processed (3D) input shape later.\n      this.needSqueezeInputData =\n          (inputLayout.height !== originalInputLayout.height) || (inputLayout.width !== originalInputLayout.width);\n    }\n\n    this.outputShape = ShapeUtil.calculateReshapedDims(originInputShape, inputs[1].integerData);\n    const squeezedOutputShape = processDims3D(this.outputShape);\n\n    this.outputLayout = handler.createTextureLayoutFromShape(\n        squeezedOutputShape, 4, squeezedOutputShape, {isPacked: true, reverseWH: true});\n\n    let mainLoop = '';\n    for (let i = 0; i < 4; i++) {\n      let outputCoords = '';\n      switch (i) {\n        case 0:\n          outputCoords = 'outputCoords = rc;';\n          break;\n        case 1:\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n          break;\n        case 2:\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n          break;\n        case 3:\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n          break;\n        default:\n          throw new Error();\n      }\n\n      mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n\n    const shaderSource = `\n      ${getReshapedInputCoords(this.inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n    return {\n      name: 'WebGLReshapePacked',\n      inputLayouts: [inputLayout],\n      outputLayout: this.outputLayout,\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: true,\n      expectPackedOutputs: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    let inputTDs: [TextureData];\n    const originalInputLayout = handler.getOrCreateTextureLayout(inputs[0], 1, false, [], false);\n    const originalInputTD = handler.getOrCreateTextureData(inputs[0], originalInputLayout, false);\n\n    if (this.needSqueezeInputData) {\n      const squeezedInputLayout: TextureLayout = {\n        channels: 1,\n        height: originalInputLayout.height,\n        width: originalInputLayout.width,\n        shape: this.inputShape3D,\n        strides: ShapeUtil.computeStrides(this.inputShape3D),\n        unpackedShape: this.inputShape3D,\n      };\n      const squeezedInputTD =\n          handler.createSharedTextureData(squeezedInputLayout, inputs[0].type, originalInputTD.texture);\n      inputTDs = [squeezedInputTD];\n\n    } else {\n      inputTDs = [originalInputTD];\n    }\n    let outputLayout = this.outputLayout;\n    // Use original output shape for runData output layout.\n    outputLayout.shape = this.outputShape;\n    outputLayout.unpackedShape = this.outputShape;\n    if (outputLayout === undefined) {\n      outputLayout = handler.createTextureLayoutFromShape(\n          this.outputShape, 4, this.outputShape, {isPacked: true, reverseWH: true});\n    }\n    // return run data for reshape. Here, we use the original calculate outputLayout to create the real output layout.\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n  protected outputShape: readonly number[];\n  private inputShape3D: [number, number, number];\n  private needSqueezeInputData = false;\n  private outputLayout: TextureLayout;\n}\n\nfunction processDims3D(shape: readonly number[]|readonly number[]|Tensor.IntegerType): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  const batchDims = shape.length >= 3 ? shape.slice(0, shape.length - 2) : [1];\n  let batch = 1;\n  for (let i = 0; i < batchDims.length; ++i) {\n    batch *= batchDims[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Reshape} from '../../../ops/reshape';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureLayout} from '../types';\nimport {getPackedShape} from '../utils';\nimport {WebGLReshapePacked} from './reshape-packed';\n\nexport class WebGLReshape extends Reshape {\n  packedImpl: WebGLReshapePacked;\n  constructor() {\n    super();\n    this.packedImpl = new WebGLReshapePacked();\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (inferenceHandler.session.pack) {\n      return inferenceHandler.run(this.packedImpl, inputs);\n    } else {\n      const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n      const reshapedTensor = reshape(inferenceHandler, inputs[0], reshapedDims);\n      return [reshapedTensor];\n    }\n  }\n}\n\nexport function reshape(\n    inferenceHandler: WebGLInferenceHandler, input: Tensor, reshapedDims: readonly number[]): Tensor {\n  const inputTD = inferenceHandler.getOrCreateTextureData(input);\n  let packedShape = reshapedDims;\n  if (inputTD.channels === 4) {\n    packedShape = getPackedShape(reshapedDims);\n  }\n  const newTextureLayout: TextureLayout = {\n    channels: inputTD.channels,\n    height: inputTD.height,\n    width: inputTD.width,\n    // handle reshaping into scalar Tensors\n    shape: packedShape.length !== 0 ? packedShape : [1],\n    strides: ShapeUtil.computeStrides(packedShape),\n    unpackedShape: reshapedDims,\n  };\n\n  const newTextureData = inferenceHandler.createSharedTextureData(newTextureLayout, input.type, inputTD.texture);\n  return newTextureData.tensor;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Upsample} from '../../../ops/upsample';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\n\nexport class WebGLResizePacked extends Upsample implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true);\n\n    const [roi, scales, outputShape] = this.prepareInputs(inputs);\n\n    const outputLayout =\n        handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true});\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    return createResizeProgramInfo(\n        glsl, this.mode, inputLayout, outputLayout, scales, roi, this.useExtrapolation, this.extrapolationValue,\n        this.cubicCoefficientA, this.excludeOutside, this.coordinateTransformMode);\n  }\n\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTD =\n        handler.getOrCreateTextureData(inputs[0], handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true));\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTD.tensor.type);\n    return {inputTextureDatas: [inputTD], outputTextureData: outputTD, uniformData: {}};\n  }\n\n  protected artifacts: Artifact[];\n}\n\nfunction createResizeProgramInfo(\n    glsl: Glsl, mode: string, inputLayout: TextureLayout, outputLayout: TextureLayout, scales: readonly number[],\n    roi: readonly number[], extrapolationEnabled: boolean, extrapolationValue: number, cubicCoefficientA: number,\n    excludeOutside: boolean, coordinateTransformMode: string): ProgramInfo {\n  const isSame = scales.every(s => s === 1) && coordinateTransformMode !== 'tf_crop_and_resize';\n  if (isSame) {\n    return {\n      inputLayouts: [inputLayout],\n      outputLayout,\n      samplers: ['X'],\n      hasMain: true,\n      shaderSource: `void main() {\n      vec4 v = ${glsl.texture2D}(X, TexCoords);\n      ${glsl.output} = v;\n    }`\n    };\n  }\n  const outputShape = outputLayout.unpackedShape;\n  const dim = outputShape.length;\n  if (dim < 2) {\n    throw new Error(`output dimension should be at least 2, but got ${dim}`);\n  }\n\n  const outputHeight = outputShape[dim - 2];\n  const outputWidth = outputShape[dim - 1];\n\n  const inputShape = inputLayout.unpackedShape;\n  if (dim !== inputShape.length) {\n    throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n  }\n  const inputHeight = inputShape[dim - 2];\n  const inputWidth = inputShape[dim - 1];\n\n  const scalesHeight = scales[dim - 2];\n  const scalesWidth = scales[dim - 1];\n\n  let getSourceFracIndex = '';\n\n  if (mode !== 'linear') {\n    // TODO: support other modes\n    throw new Error(`resize (packed) does not support mode: '${mode}'`);\n  }\n  switch (coordinateTransformMode) {\n    case 'asymmetric':\n      getSourceFracIndex = `\n        vec4 getSourceFracIndex(ivec4 coords){\n          return vec4(coords) / scaleWHWH;\n        }\n    `;\n      break;\n    case 'half_pixel':\n      getSourceFracIndex = `\n        vec4 getSourceFracIndex(ivec4 coords){\n          return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n        }\n    `;\n      break;\n    case 'align_corners':\n      getSourceFracIndex = `\n        vec4 getSourceFracIndex(ivec4 coords){\n          vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0, ${\n          outputHeight}.0 - 1.0);\n          vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0, ${\n          inputHeight}.0 - 1.0);\n          vec4 new_scale = original / resized;\n          return vec4(coords) * new_scale;\n        }\n      `;\n      break;\n    default:\n      // TODO:supporting other coordinateTransformModes\n      throw new Error(`resize (packed) does not support coordinateTransformMode: '${coordinateTransformMode}'`);\n  }\n\n  const coordsDataType = getCoordsDataType(dim);\n  const unpackChannel = unpackFromChannel();\n  const shader = `\n        const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n        const vec4 scaleWHWH = vec4(${scalesHeight}.0, ${scalesWidth}.0, ${scalesHeight}.0, ${scalesWidth}.0);\n        ${unpackChannel}\n        ${getSourceFracIndex}\n        float getAValue(int x10, int r, int c, int d) {\n          return getChannel(getA(x10, r, c, d), vec2(c, d));\n        }\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          int batch = rc[0];\n          int depth = rc[1];\n\n          // retrieve the 4 coordinates that is used in the 4 packed output values.\n          ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n          // calculate the source index in fraction\n          vec4 sourceFrac = getSourceFracIndex(coords);\n\n          // get the lower and upper bound of the 4 values that will be packed into one texel.\n          ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n          ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n          ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n          ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n          bool hasNextRow = rc.w < ${outputHeight - 1};\n          bool hasNextCol = rc.z < ${outputWidth - 1};\n\n          // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n          vec4 topLeft = vec4(\n            getAValue(batch, depth, x00.x, x00.y),\n            hasNextCol ? getAValue(batch, depth, x01.x, x01.y)\n                      : 0.0,\n            hasNextRow ? getAValue(batch, depth, x10.x, x10.y)\n                      : 0.0,\n            (hasNextRow && hasNextCol) ?\n              getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n          // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n          vec4 topRight = vec4(\n            getAValue(batch, depth, x00.x, x00.w),\n            hasNextCol ? getAValue(batch, depth, x01.x, x01.w)\n                      : 0.0,\n            hasNextRow ? getAValue(batch, depth, x10.x, x10.w)\n                      : 0.0,\n            (hasNextRow && hasNextCol) ?\n              getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n          // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n          vec4 bottomLeft = vec4(\n            getAValue(batch, depth, x00.z, x00.y),\n            hasNextCol ? getAValue(batch, depth, x01.z, x01.y)\n                      : 0.0,\n            hasNextRow ? getAValue(batch, depth, x10.z, x10.y)\n                      : 0.0,\n            (hasNextRow && hasNextCol) ?\n              getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n          // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n          vec4 bottomRight = vec4(\n            getAValue(batch, depth, x00.z, x00.w),\n            hasNextCol ? getAValue(batch, depth, x01.z, x01.w)\n                      : 0.0,\n            hasNextRow ? getAValue(batch, depth, x10.z, x10.w)\n                      : 0.0,\n            (hasNextRow && hasNextCol) ?\n              getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n          // calculate the interpolation fraction on u and v direction\n          vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n          vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n          vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n          vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n          vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n          ${glsl.output} = vec4(newValue);\n        }\n      `;\n  return {\n    inputLayouts: [inputLayout],\n    outputLayout,\n    samplers: ['A'],\n    shaderSource: shader,\n    hasMain: true,\n    expectPackedInputs: true,\n    expectPackedOutputs: true,\n  };\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Shape} from '../../../ops/shape';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\n\nexport class WebGLShape extends Shape {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Slice, SliceV10} from '../../../ops/slice';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLSlice extends Slice implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createProgramInfo(handler, inputs[0], this.starts, this.ends, this.axes);\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    return createRunData(handler, programInfo, inputs);\n  }\n}\n\nexport class WebGLSliceV10 extends SliceV10 implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId) ||\n        (inputs.length >= 4 && !handler.session.isInitializer(inputs[3].dataId)) ||\n        (inputs.length >= 5 && !handler.session.isInitializer(inputs[4].dataId))) {\n      throw new Error('dynamic slice attributes are not allowed');\n    }\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n      throw new Error('currently non-1 steps is not supported for Slice');\n    }\n    const starts = Array.from(inputs[1].integerData);\n    const ends = Array.from(inputs[2].integerData);\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n\n    return createProgramInfo(handler, inputs[0], starts, ends, axes);\n  }\n\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    return createRunData(handler, programInfo, inputs);\n  }\n}\n\nfunction createProgramInfo(\n    handler: WebGLInferenceHandler, x: Tensor, starts: readonly number[], ends: readonly number[],\n    axes: readonly number[]): ProgramInfo {\n  if (axes.length === 0) {\n    axes = x.dims.slice(0).map((val, ind) => ind);\n  }\n  axes = ShapeUtil.normalizeAxes(axes, x.dims.length);\n  starts = starts.map((start, ind) => {\n    if (start > x.dims[axes[ind]] - 1) {\n      return x.dims[axes[ind]];\n    }\n    return ShapeUtil.normalizeAxis(start, x.dims[axes[ind]]);\n  });\n  ends = ends.map((end, ind) => {\n    if (end > x.dims[axes[ind]] - 1) {\n      return x.dims[axes[ind]];\n    }\n    return ShapeUtil.normalizeAxis(end, x.dims[axes[ind]]);\n  });\n\n  const outputShape = x.dims.slice();\n\n  const sliceOps: string[] = [];\n  for (let i = 0; i < axes.length; i++) {\n    outputShape[axes[i]] = ends[i] - starts[i];\n    if (starts[i] > 0) {\n      sliceOps.push(`outputIdx[${axes[i]}] += ${starts[i]};`);\n    }  // else { sliceOps.push(`outputIdx[${axes[i]}] += 0;`); }\n  }\n\n  const rank = outputShape.length;\n  const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n  return {\n    inputLayouts: [handler.getOrCreateTextureLayout(x)],\n    outputLayout: handler.createTextureLayoutFromShape(outputShape),\n    samplers: ['A'],\n    shaderSource,\n  };\n}\n\nfunction createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n  const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n  return {\n    inputTextureDatas: inputTDs,\n    outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n    uniformData: {}\n  };\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Softmax} from '../../../ops/softmax';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\n\nexport class WebGLSoftmax extends Softmax {\n  constructor() {\n    super();\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\n      programInfos.forEach((pi) => {\n        const artifact = inferenceHandler.session.programManager.build(pi);\n        this.artifacts.push(artifact);\n      });\n    }\n\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\n    // return only the last output\n    return [runDatas[runDatas.length - 1].outputTextureData.tensor];\n  }\n  createSoftMaxProgramInfo(\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      inferenceHandler: WebGLInferenceHandler, input: Tensor, N: number, D: number,\n      maxElementPerLogicalRow: TextureLayout, normalizationPerLogicalRow: TextureLayout): ProgramInfo {\n    const inputShape = input.dims.slice();\n    const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\n    const outputShape = inputShape;\n    const rank = outputShape.length;\n    const textureWidth = inputLayout.width;\n    const textureHeight = inputLayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n    }\n\n    if (maxElementPerLogicalRow.shape.length !== 1 || normalizationPerLogicalRow.shape.length !== 1) {\n      throw new Error('Dimensionality of the intermediate results should be 1');\n    }\n\n    if (maxElementPerLogicalRow.shape[0] !== N || normalizationPerLogicalRow.shape[0] !== N) {\n      throw new Error('Shape of the intermediate results should be equal to logical row count');\n    }\n\n    const shaderSource = `\n    float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${D};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n    return {\n      inputLayouts: [inputLayout, maxElementPerLogicalRow, normalizationPerLogicalRow],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'Max', 'Norm'],\n      shaderSource,\n      name: 'SoftMax',\n    };\n  }\n\n  /**\n   * Create a texture that contains the normalization factor for each of the 'N' rows\n   */\n  createComputScaleProgramInfo(\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, maxElementPerLogicalRow: TextureLayout,\n      outputShape: number[]): ProgramInfo {\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\n    const rank = outputShape.length;\n    const textureWidth = xlayout.width;\n    const textureHeight = xlayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n    }\n\n    if (outputShape.length !== 1) {\n      throw new Error('Dimensionality of the output should be 1');\n    }\n\n    if (outputShape[0] !== N) {\n      throw new Error('Shape of the output should be equal to logical row count');\n    }\n\n    if (maxElementPerLogicalRow.shape.length !== 1) {\n      throw new Error('Dimensionality of the intermediate results should be 1');\n    }\n\n    if (maxElementPerLogicalRow.shape[0] !== N) {\n      throw new Error('Shape of the intermediate results should be equal to logical row count');\n    }\n\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n    float process(int[${rank}] indices) {\n\n      int logical_row_start_offset = indices[0] * ${D};\n\n      float norm_factor = 0.0;\n      float max = _Max(indices);\n      for(int i=0; i<${D}; ++i)\n      {\n        norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\n        textureWidth}, ${textureHeight}))) - max);\n      }\n\n      return norm_factor;\n    }`;\n    return {\n      inputLayouts: [xlayout, maxElementPerLogicalRow],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'Max'],\n      shaderSource,\n      name: 'ComputScale',\n    };\n  }\n  /**\n   * Create a texture that contains the maximum value of each of the 'N' rows\n   */\n  createComputeMaxProgramInfo(\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, outputShape: number[]): ProgramInfo {\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\n    const rank = outputShape.length;\n    const textureWidth = xlayout.width;\n    const textureHeight = xlayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n    }\n\n    if (outputShape.length !== 1) {\n      throw new Error('Dimensionality of the output should be 1');\n    }\n\n    if (outputShape[0] !== N) {\n      throw new Error('Shape of the output should be equal to logical row count');\n    }\n\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n        float process(int[${rank}] indices) {\n\n          int logical_row_start_offset = indices[0] * ${D};\n\n          float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth}, ${\n        textureHeight} )));\n          for(int i=1; i<${D}; ++i)\n          {\n            float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\n        textureWidth}, ${textureHeight})));\n            if(current > max)\n              max = current;\n          }\n\n          return max;\n        }`;\n    return {\n      inputLayouts: [xlayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n      name: 'ComputeMax',\n    };\n  }\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\n    const inputShape = inputs[0].dims.slice();\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\n    const N = ShapeUtil.sizeToDimension(inputShape, axis);\n    const D = ShapeUtil.sizeFromDimension(inputShape, axis);\n    const computeMaxProgramInfo = this.createComputeMaxProgramInfo(inferenceHandler, inputs[0], N, D, [N]);\n    const computeScaleProgramInfo =\n        this.createComputScaleProgramInfo(inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, [N]);\n    const softMaxProgramInfo = this.createSoftMaxProgramInfo(\n        inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, computeScaleProgramInfo.outputLayout);\n\n    const programInfos: ProgramInfo[] = [computeMaxProgramInfo, computeScaleProgramInfo, softMaxProgramInfo];\n    return programInfos;\n  }\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\n    const dataType = inputs[0].type;\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\n    const runDatas: RunData[] = [];\n    runDatas.push({\n      inputTextureDatas: [inputTD],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\n      uniformData: {}\n    });\n    for (let i = 1; i < programInfos.length; ++i) {\n      runDatas.push({\n        inputTextureDatas: [...runDatas[i - 1].inputTextureDatas, runDatas[i - 1].outputTextureData],\n        outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[i].outputLayout, dataType),\n        uniformData: {}\n      });\n    }\n    return runDatas;\n  }\n  protected artifacts: Artifact[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Split} from '../../../ops/split';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData} from '../types';\n\nexport class WebGLSplit extends Split {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const axis = ShapeUtil.normalizeAxis(this.axis, inputs[0].dims.length);\n      const count = this.getProgramCount(inferenceHandler, inputs, axis);\n      for (let i = 0; i < count; ++i) {\n        const programInfo = this.createProgramInfo(inferenceHandler, inputs[0], axis, i);\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\n        this.artifacts.push(artifact);\n      }\n    }\n    const results: Tensor[] = [];\n\n    this.artifacts.forEach(artifact => {\n      const rundata = this.createRunData(inferenceHandler, artifact.programInfo, inputs);\n      inferenceHandler.session.programManager.run(artifact, rundata);\n      results.push(rundata.outputTextureData.tensor);\n    });\n    return results;\n  }\n  getProgramCount(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): number {\n    const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, this.split, this.numOutputs);\n    return offsets.length;\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, input: Tensor, axis: number, index: number): ProgramInfo {\n    const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, this.split, this.numOutputs);\n    const offset = offsets[index];\n    const outputShape = shapes[index];\n    const rank = outputShape.length;\n    const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }`;\n    return {\n      name: 'WebGLSplit',\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(input)],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n  protected artifacts: Artifact[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Squeeze} from '../../../ops/squeeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {reshape} from './reshape';\n\nexport class WebGLSqueeze extends Squeeze {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.squeezeShape(inputs[0].dims, this.axes);\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Sum} from '../../../ops/sum';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLSum extends Sum implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const outputShape = inputs[0].dims.slice();\n    const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n    const samplers = inputs.map((v, i) => `X${i}`);\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers,\n      shaderSource: `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }`,\n      hasMain: true\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tile} from '../../../ops/tile';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLTile extends Tile implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    const outputShape = new Array(inputShape.length);  // inputs[0].dims.slice();\n\n    const tileOps: string[] = [];\n    for (let i = 0; i < inputShape.length; i++) {\n      outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n      tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n    }\n\n    const rank = outputShape.length;\n    const shaderSource = `\n    float process(int outputIdx[${rank}]) {\n      int inputIdx[${rank}];\n      ${tileOps.join('\\n')}\n      return _A(inputIdx);\n    }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Transpose} from '../../../ops/transpose';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {FunctionType, GlslPositionalFunction} from '../glsl-definitions';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLTranspose extends Transpose implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  getOutputShape(inputShapes: Array<readonly number[]>): readonly number[] {\n    const perm = this.getAdjustedPerm(inputShapes[0]);\n    return ShapeUtil.sortBasedOnPerm(inputShapes[0], perm);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShapes = inputs.map(t => t.dims.slice());\n    const perm = this.getAdjustedPerm(inputShapes[0]);\n    const unpackedOutputShape = this.getOutputShape(inputShapes);\n    const rank = inputs[0].dims.length;\n    // A dims=[${inputs[0].dims.toString()}]\n    // out Dims=[${unpackedOutputShape.toString()}]\n    // based on perm=[${perm.toString()}]\n    const shaderSource = `\n      ${this.getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n    const outputLayout = handler.createTextureLayoutFromShape(unpackedOutputShape, 1, unpackedOutputShape);\n    return {inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])], outputLayout, samplers: ['A'], shaderSource};\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n  getPositionalFunction(handler: WebGLInferenceHandler, inputShape: number[], name?: string): GlslPositionalFunction {\n    const outputShape = this.getOutputShape([inputShape]);\n    if (!name) {\n      name = 'perm';\n    }\n    return {\n      name,\n      body: this.getPermFunctionBody(name, this.getAdjustedPerm(inputShape), outputShape.length),\n      type: FunctionType.Positional,\n      inputShape,\n      outputShape\n    };\n  }\n  protected getAdjustedPerm(inputShape: readonly number[]): number[] {\n    let perm = this.perm;\n    if (perm && perm.length !== inputShape.length) {\n      perm = [...(inputShape.keys())].reverse();\n    }\n    return perm;\n  }\n  protected getPermFunctionBody(name: string, perm: number[], rank: number): string {\n    const reverseFunc = [];\n    reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n    for (let i = 0; i < rank; ++i) {\n      reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n    }\n    reverseFunc.push('\\t}');\n    return reverseFunc.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureLayout} from '../types';\n\nexport class WebGLUint8Encode {\n  runInternal(inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData {\n    const outputShape = input.shape;\n    const [width, height] = inferenceHandler.session.layoutStrategy.computeTextureWH(input.shape);\n    const outputLayout: TextureLayout = {\n      width,\n      height,\n      channels: 4,\n      shape: outputShape,\n      strides: ShapeUtil.computeStrides(outputShape),\n      unpackedShape: outputShape\n    };\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    // TODO: remove this special script. Use graph transformer instead.\n    /**\n     * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n     */\n    const shaderSource = `\n      const float FLOAT_MAX = 1.70141184e38;\n      const float FLOAT_MIN = 1.17549435e-38;\n\n      bool isNaN(float val) {\n        return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n      }\n\n      highp vec4 encodeAsUint8(highp float v) {\n        if (isNaN(v)) {\n          return vec4(255, 255, 255, 255);\n        }\n\n        highp float av = abs(v);\n\n        if(av < FLOAT_MIN) {\n          return vec4(0.0, 0.0, 0.0, 0.0);\n        } else if(v > FLOAT_MAX) {\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n        } else if(v < -FLOAT_MAX) {\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n        }\n\n        highp vec4 c = vec4(0,0,0,0);\n\n        highp float e = floor(log2(av));\n        highp float m = exp2(fract(log2(av))) - 1.0;\n\n        c[2] = floor(128.0 * m);\n        m -= c[2] / 128.0;\n        c[1] = floor(32768.0 * m);\n        m -= c[1] / 32768.0;\n        c[0] = floor(8388608.0 * m);\n\n        highp float ebias = e + 127.0;\n        c[3] = floor(ebias / 2.0);\n        ebias -= c[3] * 2.0;\n        c[2] += floor(ebias) * 128.0;\n\n        c[3] += 128.0 * step(0.0, -v);\n\n        return c / 255.0;\n      }\n\n      void main() {\n        float value = ${glsl.texture2D}(X,TexCoords).r;\n        ${glsl.output} = encodeAsUint8(value);\n      }`;\n    const programInfo =\n        {name: 'Uint8Encode', inputLayouts: [input], outputLayout, samplers: ['X'], shaderSource, hasMain: true};\n    const artifact = inferenceHandler.session.programManager.build(programInfo);\n\n    const encoder = inferenceHandler.session.backend.glContext.getEncoder('byte', 4);\n    const texture =\n        inferenceHandler.session.backend.glContext.allocateTexture(outputLayout.width, outputLayout.height, encoder);\n    const outputTextureData = inferenceHandler.createSharedTextureData(outputLayout, 'uint8', texture);\n    const runData = {inputTextureDatas: [input], outputTextureData, uniformData: {}};\n\n    inferenceHandler.session.programManager.run(artifact, runData);\n    return runData.outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {UnaryOp} from '../../../ops/unary-op';\nimport {Tensor} from '../../../tensor';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLUnaryOp extends UnaryOp implements WebGLOperator {\n  constructor(protected typeConstraint: readonly Tensor.DataType[], protected glslFunc: GlslValueFunction) {\n    super(typeConstraint);\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const inputLayout = handler.session.pack ?\n        handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true) :\n        handler.getOrCreateTextureLayout(inputs[0]);\n\n    const outputLayout = handler.session.pack ?\n        handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}) :\n        handler.createTextureLayoutFromShape(outputShape);\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      ${this.glslFunc.body}\n      void main() {\n        vec4 v = ${glsl.texture2D}(A, TexCoords);\n        v = ${this.glslFunc.name}(v);\n        ${glsl.output} = v;\n      }\n      `;\n\n    if (handler.session.pack) {\n      return {\n        inputLayouts: [inputLayout],\n        outputLayout,\n        samplers: ['A'],\n        shaderSource,\n        hasMain: true,\n        expectPackedInputs: true,\n        expectPackedOutputs: true\n      };\n    } else {\n      return {inputLayouts: [inputLayout], outputLayout, samplers: ['A'], shaderSource, hasMain: true};\n    }\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTD = handler.session.pack ?\n        handler.getOrCreateTextureData(inputs[0], handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true)) :\n        handler.getOrCreateTextureData(inputs[0]);\n    return {\n      inputTextureDatas: [inputTD],\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTD.tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity_';\n  const body = `\n  float ${name}(float a) {\n    return a;\n  }\n  vec4 ${name}(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg_';\n  const body = `\n  float ${name}(float a) {\n    return -a;\n  }\n  vec4 ${name}(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not_';\n  const body = `\n  float ${name}(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}(bool a) {\n    return !a;\n  }\n  vec4 ${name}(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu_';\n  const body = `\n  float ${name}(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid_';\n  const body = `\n  float ${name}(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh_';\n  const body = `\n  float ${name}(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a) {\n    return ${fname}(a);\n  }\n  vec4 ${name}(vec4 v) {\n    return ${fname}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\nimport {getCoordsDataType} from '../utils';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nexport class WebGLUnpack implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (inputs.length !== 1) {\n      throw new Error('Pack kernel should have input tensor count to 1.');\n    }\n\n    const inputTexture = handler.getTextureData(inputs[0].dataId, true);\n    if (!inputTexture) {\n      throw new Error('packed input texture must exist');\n    }\n\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true);\n    const isScalar = (inputLayout.unpackedShape.length === 0);\n    const outputLayout = handler.createTextureLayoutFromShape(inputTexture.unpackedShape);\n    const outputShape = outputLayout.shape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const innerDims = channels.slice(-2);\n    const coordsDataType = getCoordsDataType(rank);\n    const unpackChannel = unpackFromChannel();\n    const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n      // Sample the texture with the coords to get the rgba channel value.\n      vec4 packedInput = getA(${sourceCoords});\n\n      ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n    }\n  `;\n\n    return {\n      name: 'WebGLUnpack',\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true)],\n      outputLayout,\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n      expectPackedInputs: true,\n      expectPackedOutputs: false,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0], true)];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Unsqueeze} from '../../../ops/unsqueeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {reshape} from './reshape';\n\nexport class WebGLUnsqueeze extends Unsqueeze {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.unsqueezeShape(inputs[0].dims, this.axes);\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Upsample} from '../../../ops/upsample';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLUpsample extends Upsample implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0]);\n    const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * this.scales[i]));\n    const outputLayout = handler.createTextureLayoutFromShape(outputShape);\n    const dim = outputShape.length;\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n\n    const outputPitches = new Array<number>(dim);\n    const inputPitches = new Array<number>(dim);\n    let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n    for (let d = dim - 1; d >= 0; d--) {\n      outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n      inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n      precalculatedPitches += `\n      output_pitches[${d}] = ${outputPitches[d]};\n      input_pitches[${d}] = ${inputPitches[d]};\n      `;\n    }\n    const getInputFloatFunction = `\n    float getInputFloat(int index) {\n      vec2 coords = offsetToCoords(index, ${inputLayout.width}, ${inputLayout.height});\n      float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n      return value;\n    }\n    `;\n\n    const shaderSource = this.mode === 'nearest' ?\n        // nearest\n        `\n      ${getInputFloatFunction}\n      float process(int indices[${dim}]) {\n        int input_index = 0;\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n        ${precalculatedPitches}\n\n        int d, m;\n        for (int dim = 0; dim < ${dim}; ++dim) {\n          d = output_index / output_pitches[dim];\n          m = output_index - d * output_pitches[dim];\n          output_index = m;\n\n          if (scales[dim] != 1 && d > 0) {\n            int d2 = d / scales[dim];\n            m = d - d2 * scales[dim];\n            d = d2;\n          }\n          input_index += input_pitches[dim] * d;\n        }\n\n        return getInputFloat(input_index);\n      }` :\n        dim === 4 ?\n        // bilinear 4D\n            `\n      ${getInputFloatFunction}\n      float process(int indices[4]) {\n        int input_index = 0;\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n        ${precalculatedPitches}\n\n        int m;\n        int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n        index_of_dim0 = output_index / output_pitches[0];\n        m = output_index - index_of_dim0 * output_pitches[0];\n        index_of_dim1 = m / output_pitches[1];\n        m = m - index_of_dim1 * output_pitches[1];\n        index_of_dim2 = m / output_pitches[2];\n        m = m - index_of_dim2 * output_pitches[2];\n        index_of_dim3 = m;\n\n        int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n        index_of_input_dim2 = index_of_dim2 / scales[2];\n        y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n        index_of_input_dim3 = index_of_dim3 / scales[3];\n        x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n        input_index = index_of_dim0 * input_pitches[0] +\n                      index_of_dim1 * input_pitches[1] +\n                      index_of_input_dim2 * input_pitches[2] +\n                      index_of_input_dim3;\n\n        float x00 = getInputFloat(input_index);\n        float x10, x01, x11;\n\n        bool end_of_dim2 = false;\n        if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n          // It's the end in dimension 2\n          x01 = x00;\n          end_of_dim2 = true;\n        } else {\n          x01 = getInputFloat(input_index + input_pitches[2]);\n        }\n\n        if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n          // It's the end in dimension 3\n          x10 = x00;\n          x11 = x01;\n        }\n        else {\n          x10 = getInputFloat(input_index + 1);\n          x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n        }\n\n        float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n        float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n        return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n      }` :\n            // bilinear 2D\n            `\n      ${getInputFloatFunction}\n      float process(int indices[2]) {\n        int input_index = 0;\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n        ${precalculatedPitches}\n\n        int m;\n        int index_of_dim0, index_of_dim1;\n        index_of_dim0 = output_index / output_pitches[0];\n        m = output_index - index_of_dim0 * output_pitches[0];\n        index_of_dim1 = m;\n\n        int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n        index_of_input_dim0 = index_of_dim0 / scales[0];\n        y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n        index_of_input_dim1 = index_of_dim1 / scales[1];\n        x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n        input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n        float x00 = getInputFloat(input_index);\n        float x10, x01, x11;\n\n        bool end_of_dim0 = false;\n        if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n          // It's the end in dimension 0\n          x01 = x00;\n          end_of_dim0 = true;\n        } else {\n          x01 = getInputFloat(input_index + input_pitches[0]);\n        }\n\n        if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n          // It's the end in dimension 1\n          x10 = x00;\n          x11 = x01;\n        }\n        else {\n          x10 = getInputFloat(input_index + 1);\n          x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n        }\n\n        float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n        float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n        return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n      }`;\n    return {\n      inputLayouts: [inputLayout],\n      outputLayout,\n      samplers: ['X'],\n      shaderSource,\n      variables: [{name: 'scales', type: 'int', arrayLength: this.scales.length}]\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {scales: this.scales.map(x => Math.ceil(x))}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, RunData, TextureData, UniformData, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, runData: RunData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(runData.outputTextureData);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, runData.uniformData, runData.inputTextureDatas);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.doDraw(buildArtifact, runData);\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.samplers, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected doDraw(artifact: Artifact, runData: RunData): void {\n    if (runData.draw) {\n      Logger.verbose('ProgramManager', 'Custom draw function');\n      runData.draw(this.glContext, artifact);\n    } else {\n      this.glContext.draw();\n    }\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, uniformData: UniformData, textures: TextureData[]): void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, uniformData[name] as number[]);\n          } else {\n            gl.uniform1f(location, uniformData[name] as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, uniformData[name] as number[]);\n          } else {\n            gl.uniform1i(location, uniformData[name] as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData, WebGLOperator} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  packOpCache: Map<string, WebGLOperator>;\n  unpackOpCache: Map<string, WebGLOperator>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.packOpCache = new Map();\n    this.unpackOpCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    op.initialize(node.attributes, node, graph);\n    return op;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\nfunction createCanvas(): HTMLCanvasElement {\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const execNodeFn = async () => {\n          const op = thisOp.op;\n          if (!op.checkInputs(inputTensors)) {\n            throw new Error(`invalid inputs detected; op: ${thisOp.node.name}`);\n          }\n\n          const result = op.run(inferenceHandler, inputTensors);\n\n          return result;\n        };\n\n        const outputList = await this.profiler.event('node', thisOp.node.name, execNodeFn);\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      this.graph.getOutputIndices().forEach((outputIndex) => {\n        const thisValue = this._values[outputIndex];\n        if (thisValue === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        // eslint-disable-next-line no-unused-expressions\n        thisValue.data;\n        output.push(thisValue);\n      });\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\nimport {Tensor} from './tensor';\nimport {LongUtil, ProtoUtil} from './util';\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has only one input and the first output connected to other nodes\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.inputs.length > 1) {\n      throw new Error('Node deletion with multiple inputs is not supported. ');\n    }\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          node.attributes.set('__internal_activation', 'string', (this._nodes[next[0]].opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\nimport {LongUtil} from './util';\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport interface Operator {\n  initialize(attributes: Attribute, node: Graph.Node, graph: Graph): void;\n  checkInputs(inputs: Tensor[]): boolean;\n  run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\n// currently this operator supports ONLY 'test' mode\n// inputs/outputs and parameters will reflect that\n// the operator implementation only supports test mode\nexport abstract class BatchNormalization implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\n    this.momentum = attributes.getFloat('momentum', 0.9);\n    this.spatial = attributes.getInt('spatial', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 5) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n    const mean = inputs[3];\n    const var_ = inputs[4];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs can have only one dimensions\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n        var_.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n        var_.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n        (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n        (var_.type !== 'float32' && var_.type !== 'float64')) {\n      return false;\n    }\n    return true;\n  }\n\n  protected epsilon: number;\n  protected momentum: number;\n  protected spatial: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class BinaryOp implements Operator {\n  constructor(\n      protected typeConstraint: readonly Tensor.DataType[], protected opType?: string,\n      protected resultType?: Tensor.DataType) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[0].type !== inputs[1].type) {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Clip implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.min = attributes.getFloat('min', -3.4028234663852886e+38);\n    this.max = attributes.getFloat('max', 3.4028234663852886e+38);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected min: number;\n  protected max: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Concat implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length < 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const inputType = inputs[0].type;\n    const inputDimensionality = inputs[0].dims.length;\n\n    // TODO: Support string concat\n    if (inputType === 'string') {\n      return false;\n    }\n\n    for (const input of inputs) {\n      // make sure types of all inputs match\n      if (input.type !== inputType) {\n        return false;\n      }\n\n      // make sure the dimensionality of all inputs are the same\n      if (input.dims.length !== inputDimensionality) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Conv implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.dilations = attributes.getInts('dilations', [1, 1]);\n    this.group = attributes.getInt('group', 1);\n    this.kernelShape = attributes.getInts('kernel_shape', []);\n    this.pads = attributes.getInts('pads', [0, 0, 0, 0]);\n    this.strides = attributes.getInts('strides', [1, 1]);\n    this.activation = attributes.getString('__internal_activation', '');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    // Refer to the below link for all input checks\n    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n    if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n      return false;\n    }\n\n    // TODO : Need to add support for multi-dimensional conv\n    // currently only support 2-dimensional conv\n    if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n      return false;\n    }\n\n    // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n    const dataChannel = inputs[0].dims[1];\n    const filterInChannel = inputs[1].dims[1] * this.group;\n    if (dataChannel !== filterInChannel) {\n      return false;\n    }\n\n    // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n    if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n      return false;\n    }\n\n    const spatialRank = inputs[0].dims.length - 2;\n    // wrong dilations dimension\n    if (this.dilations.length !== spatialRank) {\n      return false;\n    }\n\n    // Wrong strides dimension\n    if (this.strides.length !== spatialRank) {\n      return false;\n    }\n\n    // Wrong pads dimension\n    if (this.pads.length !== spatialRank * 2) {\n      return false;\n    }\n\n    // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n    // (the first 2 dims are batch_size and channels)\n    if (this.kernelShape.length !== 0 && this.kernelShape.length !== inputs[1].dims.length - 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO : Need to add support for float64\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n      return false;\n    }\n\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected autoPad: string;\n  protected dilations: number[];\n  protected group: number;\n  protected kernelShape: number[];\n  protected pads: number[];\n  protected strides: number[];\n  protected activation: string;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class DepthToSpace implements Operator {\n  constructor() {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    // processing node attributes\n    this.blocksize = attributes.getInt('blocksize');\n    if (this.blocksize < 1) {\n      throw new Error(`blocksize must be >= 1, but got : ${this.blocksize} for DepthToSpace`);\n    }\n    this.blocksizeSqr = this.blocksize * this.blocksize;\n    this.mode = attributes.getString('mode', 'DCR');\n    if (DepthToSpace.supportedModes.indexOf(this.mode) < 0) {\n      throw new Error(`unrecognized mode: ${this.mode} for DepthToSpace`);\n    }\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const inputType = inputs[0].type;\n    const inputDimensionality = inputs[0].dims.length;\n\n    // Input has to be a 4-D tensor\n    // TODO: Support string depth-to-space.\n    if (inputType === 'string' || inputDimensionality !== 4) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected mode: string;\n  protected blocksize: number;\n  protected blocksizeSqr: number;\n\n  private static readonly supportedModes = ['DCR', 'CRD'];\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Dropout implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.ratio = attributes.getFloat('ratio', 0.5);\n    this.testMode = true;  // this is a hack to reflect that test mode is hardcoded\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected ratio: number;\n  protected testMode: boolean;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Elu implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.alpha = attributes.getFloat('alpha', 1.0);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected alpha: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Flatten implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 1);  // default axis is 1\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    const r = inputs[0].dims.length;\n    if (r === 0) {\n      return false;  // scalar tensor is not supported\n    }\n\n    if (this.axis < -r || this.axis > r) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Gather implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 0);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n    const tensorRank = inputs[0].dims.length;\n    if (tensorRank < 1) {\n      return false;\n    }\n    if (this.axis < -tensorRank || this.axis > tensorRank - 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n      return false;\n    }\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Gemm implements Operator {\n  constructor(isOptionalC: boolean) {\n    this.isOptionalC = isOptionalC;\n  }\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.transA = attributes.getInt('transA', 0) !== 0;\n    this.transB = attributes.getInt('transB', 0) !== 0;\n    this.alpha = attributes.getFloat('alpha', 1);\n    this.beta = attributes.getFloat('beta', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs) {\n      return false;\n    }\n    if (this.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n      return false;\n    }\n    if (!this.isOptionalC && inputs.length !== 3) {\n      return false;\n    }\n\n    // 'C' can be of dimensionality 1 or 2 only\n    if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n        (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n        (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n      return false;\n    }\n\n    if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected transA: boolean;\n  protected transB: boolean;\n  protected alpha: number;\n  protected beta: number;\n\n  protected isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class ImageScaler implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.scale = attributes.getFloat('scale');\n    this.bias = attributes.getFloats('bias');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    if (inputs[0].dims.length !== 4) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected scale: number;\n  protected bias: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class InstanceNormalization implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 3) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs can have only one dimensions\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n        (B.type !== 'float32' && B.type !== 'float64')) {\n      return false;\n    }\n    return true;\n  }\n\n  protected epsilon: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class LeakyRelu implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.alpha = attributes.getFloat('alpha', 0.01);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected alpha: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class MatMul implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.activation = attributes.getString('__internal_activation', '');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n\n    if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    if (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') {\n      return false;\n    }\n\n    if (inputs[0].type !== inputs[1].type) {\n      return false;\n    }\n\n    return true;\n  }\n  protected activation: string;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Pad implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.mode = attributes.getString('mode', 'constant');\n    this.value = attributes.getFloat('value', 0.0);\n    this.pads = attributes.getInts('pads');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected mode: string;\n  protected pads: number[];\n  protected value: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nclass PoolBase {\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected autoPad: string;\n  protected ceilMode: number;\n  protected countIncludePad: boolean;\n  protected kernelShape: number[];\n  protected strides: number[];\n  protected pads: number[];\n}\n\nexport abstract class AveragePool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.kernelShape = attributes.getInts('kernel_shape');\n    this.strides = attributes.getInts('strides', []);\n    this.pads = attributes.getInts('pads', []);\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\n\n    // TODO: support attribute 'ceil_mode'\n    if (this.ceilMode !== 0) {\n      throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n    }\n  }\n}\n\nexport abstract class GlobalAveragePool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n  }\n}\n\nexport abstract class MaxPool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.kernelShape = attributes.getInts('kernel_shape');\n    this.strides = attributes.getInts('strides', []);\n    this.pads = attributes.getInts('pads', []);\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\n    this.storageOrder = attributes.getInt('storage_order', 0);\n\n    // TODO: support attribute 'ceil_mode' and 'storage_order'\n    if (this.storageOrder !== 0) {\n      throw new Error('column major storage order is not yet supported for MaxPool');\n    }\n    if (this.ceilMode !== 0) {\n      throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n    }\n  }\n\n  protected storageOrder: number;\n}\n\nexport abstract class GlobalMaxPool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class ReduceBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes', []);\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n  protected keepDims: boolean;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Reshape implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2 || inputs[1].dims.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    if (inputs[1].type !== 'int32') {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Shape implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Slice implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.starts = attributes.getInts('starts');\n    this.ends = attributes.getInts('ends');\n    this.axes = attributes.getInts('axes', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    return true;\n  }\n\n  protected axes: number[];\n  protected ends: number[];\n  protected starts: number[];\n}\n\nexport abstract class SliceV10 implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length < 3 || inputs.length > 5) {\n      return false;\n    }\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n      return false;\n    }\n    if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n      return false;\n    }\n    if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n      return false;\n    }\n    if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Softmax implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Split implements Operator {\n  constructor(protected numOutputs?: number) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 0);\n    this.split = attributes.getInts('split', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n        inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n        inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected split: number[];\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Squeeze implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Sum implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length === 0) {\n      return false;\n    }\n\n    const length = inputs[0].dims.length;\n    for (let i = 1; i < inputs.length; i++) {\n      if (length !== inputs[i].dims.length) {\n        return false;\n      }\n\n      for (let j = 0; j < length; j++) {\n        if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n          return false;\n        }\n      }\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n    for (let i = 1; i < inputs.length; i++) {\n      if (inputs[0].type !== inputs[i].type) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Tile implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n    if (inputs[1].dims.length !== 1) {\n      return false;\n    }\n    if (inputs[1].dims[0] !== inputs[0].dims.length) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Transpose implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.perm = attributes.getInts('perm', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected perm: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class UnaryOp implements Operator {\n  constructor(protected typeConstraint: readonly Tensor.DataType[], protected resultType?: Tensor.DataType) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(_attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Unsqueeze implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Graph} from '../graph';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Upsample implements Operator {\n  constructor(protected opset: number) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute, _node: Graph.Node, _graph: Graph): void {\n    this.isResize = (this.opset >= 10);\n\n    // processing node attributes\n    this.mode = attributes.getString('mode', 'nearest');\n    if (this.mode !== 'nearest' && this.mode !== 'linear' && (this.opset < 11 || this.mode !== 'cubic')) {\n      throw new Error(`unrecognized mode: ${this.mode}`);\n    }\n\n    if (this.opset < 9) {\n      this.scales = attributes.getFloats('scales');\n      scalesValidataion(this.scales, this.mode, this.isResize);\n    }\n\n    this.extrapolationValue = attributes.getFloat('extrapolation_value', 0.0);\n\n    this.coordinateTransformMode =\n        this.opset > 10 ? attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n    if ([\n          'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize',\n          'half_pixel'\n        ].indexOf(this.coordinateTransformMode) === -1) {\n      throw new Error(`coordinate_transform_mode '${this.coordinateTransformMode}' is not supported`);\n    }\n    this.useExtrapolation = this.needRoiInput = (this.coordinateTransformMode === 'tf_crop_and_resize');\n\n    this.nearestMode =\n        (this.mode === 'nearest' && this.opset >= 11) ? attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n    if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(this.nearestMode) === -1) {\n      throw new Error(`nearest_mode '${this.nearestMode}' is not supported`);\n    }\n\n    this.cubicCoefficientA = attributes.getFloat('cubic_coeff_a', -0.75);\n    this.excludeOutside = attributes.getInt('exclude_outside', 0) !== 0;\n    if (this.excludeOutside && this.mode !== 'cubic') {\n      throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n    }\n\n    this.useNearest2xOptimization = (this.opset < 11) ?\n        true :\n        (this.mode === 'nearest' && this.coordinateTransformMode === 'asymmetric' && this.nearestMode === 'floor');\n\n    if (this.opset > 10) {\n      this.roiInputIdx = 1;\n      this.scalesInputIdx = 2;\n      this.sizesInputIdx = 3;\n    } else if (this.opset === 9) {\n      this.scalesInputIdx = 1;\n    }\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || (this.opset < 9 && inputs.length !== 1) ||\n        (this.opset >= 9 && this.opset < 11 && inputs.length !== 2) ||\n        (this.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\n      return false;\n    }\n\n    if (this.scales && inputs[0].dims.length !== this.scales.length) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected prepareInputs(inputs: Tensor[]): [number[], number[], readonly number[]] {\n    const x = inputs[0];\n    const xDims = x.dims;\n\n    // get roi data\n    let roi = this.roi;\n    if (!roi) {\n      if (this.needRoiInput) {\n        if (this.roiInputIdx <= 0) {\n          throw new Error('Invalid roi input index.');\n        }\n        roi = parseRoiData(inputs[this.roiInputIdx]);\n      } else {\n        roi = new Array(xDims.length * 2).fill(0);\n      }\n    }\n\n    let scales = this.scales;\n    let outputSizes: number[]|undefined;\n    if (!scales) {\n      const scalesTensor = inputs[this.scalesInputIdx];\n      if (scalesTensor && scalesTensor.size !== 0) {\n        if (inputs[this.sizesInputIdx]) {\n          throw new Error('Only one of scales or sizes must be provided as input.');\n        }\n        scales = parseScalesData(scalesTensor, this.mode, this.isResize);\n      } else {\n        const sizesTensor = inputs[this.sizesInputIdx];\n        if (!sizesTensor || sizesTensor.size === 0) {\n          throw new Error('Either scales or sizes MUST be provided as input.');\n        }\n\n        outputSizes = Array.from(sizesTensor.integerData);\n        scales = parseScalesDataFromOutputSize(outputSizes, xDims, this.mode, this.isResize);\n      }\n    } else {\n      if (inputs[this.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n    }\n\n    const yDims = outputSizes || computeOutputShape(scales, xDims);\n\n    return [roi, scales, yDims];\n  }\n\n  protected isResize: boolean;\n  protected mode: string;\n  protected scales: number[];\n  protected extrapolationValue: number;\n  protected coordinateTransformMode: string;\n  protected useExtrapolation: boolean;\n  protected needRoiInput: boolean;\n  protected nearestMode: string;\n  protected cubicCoefficientA: number;\n  protected excludeOutside: boolean;\n  protected useNearest2xOptimization: boolean;\n  protected roiInputIdx: number;\n  protected scalesInputIdx: number;\n  protected sizesInputIdx: number;\n  protected roi: number[];\n}\n\nfunction scalesValidataion(scales: number[], mode: string, isResize: boolean) {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') or 4-D inputs\\\nwith the corresponding outermost 2 scale values being 1 in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n}\n\nexport function parseRoiData(roi: Tensor): number[] {\n  return roi.size > 0 ? Array.from(roi.floatData) : [];\n}\n\nexport function parseScalesData(scale: Tensor, mode: string, isResize: boolean): number[] {\n  const scales = Array.from(scale.floatData);\n  scalesValidataion(scales, mode, isResize);\n  return scales;\n}\n\nexport function parseScalesDataFromOutputSize(\n    yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] {\n  const length = xDims.length;\n  const scales = new Array<number>(length);\n\n  for (let i = 0, end = length; i < end; i++) {\n    if (xDims[i] === 0) {\n      if (yDims[i] !== 0) {\n        throw new Error('Input dim is zero but required output dim is non-zero.');\n      }\n      scales[i] = 1;\n    } else {\n      scales[i] = yDims[i] / xDims[i];\n    }\n  }\n  scalesValidataion(scales, mode, isResize);\n  return scales;\n}\n\nexport function computeOutputShape(scales: readonly number[], inputDims: readonly number[]): number[] {\n  return inputDims.map((dim, i) => Math.floor(dim * scales[i]));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {Operator} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  interface OperatorConstructor {\n    (node: Graph.Node): Operator;\n  }\n\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml';\n\n  /**\n   * A resolve rule consists of 4 items: opType, opSetDomain, versionSelector and operatorConstructor\n   */\n  type ResolveRule = [string, Domain, string, OperatorConstructor];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opConstructor = rule[3];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return opConstructor(node);\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(Buffer.from(buf), isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nimport {ProtoUtil, ShapeUtil} from './util';\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    // TBD: This function is designed for usage when any backend data provider offers a way to retrieve data in an\n    //      asynchronous way. should implement this function when enabling webgl async read data.\n\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        const buf = Buffer.from(str.buffer, str.byteOffset, str.byteLength);\n        value.data[i] = buf.toString();\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  static longToNumber(n: Long|flatbuffers.Long|number) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: true}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(\n      originalDims: readonly number[], shapeHints: number[]|readonly number[]|Tensor.IntegerType): readonly number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: number[], dilations: number[], kernelShape: number[], pads: number[],\n      autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], kernelShape: number[], pads: number[],\n      autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    // TODO: support dilations for pool operators\n    const dilations = new Array<number>(kernelShape.length).fill(1);\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\nimport {env, InferenceSession, SessionHandler, Tensor, TypedTensor} from 'onnxruntime-common';\n\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nlet ortInit: boolean;\n\nconst tensorDataTypeStringToEnum = (type: string): onnx.TensorProto.DataType => {\n  switch (type) {\n    case 'int8':\n      return onnx.TensorProto.DataType.INT8;\n    case 'uint8':\n      return onnx.TensorProto.DataType.UINT8;\n    case 'bool':\n      return onnx.TensorProto.DataType.BOOL;\n    case 'int16':\n      return onnx.TensorProto.DataType.INT16;\n    case 'uint16':\n      return onnx.TensorProto.DataType.UINT16;\n    case 'int32':\n      return onnx.TensorProto.DataType.INT32;\n    case 'uint32':\n      return onnx.TensorProto.DataType.UINT32;\n    case 'float32':\n      return onnx.TensorProto.DataType.FLOAT;\n    case 'float64':\n      return onnx.TensorProto.DataType.DOUBLE;\n    case 'string':\n      return onnx.TensorProto.DataType.STRING;\n    case 'int64':\n      return onnx.TensorProto.DataType.INT64;\n    case 'uint64':\n      return onnx.TensorProto.DataType.UINT64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: onnx.TensorProto.DataType): Tensor.Type => {\n  switch (typeProto) {\n    case onnx.TensorProto.DataType.INT8:\n      return 'int8';\n    case onnx.TensorProto.DataType.UINT8:\n      return 'uint8';\n    case onnx.TensorProto.DataType.BOOL:\n      return 'bool';\n    case onnx.TensorProto.DataType.INT16:\n      return 'int16';\n    case onnx.TensorProto.DataType.UINT16:\n      return 'uint16';\n    case onnx.TensorProto.DataType.INT32:\n      return 'int32';\n    case onnx.TensorProto.DataType.UINT32:\n      return 'uint32';\n    case onnx.TensorProto.DataType.FLOAT:\n      return 'float32';\n    case onnx.TensorProto.DataType.DOUBLE:\n      return 'float64';\n    case onnx.TensorProto.DataType.STRING:\n      return 'string';\n    case onnx.TensorProto.DataType.INT64:\n      return 'int32';\n    case onnx.TensorProto.DataType.UINT64:\n      return 'uint32';\n\n    default:\n      throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionHandle: number;\n\n  inputNames: string[];\n  private inputNamesUTF8Encoded: number[];\n  outputNames: string[];\n  private outputNamesUTF8Encoded: number[];\n\n  loadModel(model: Uint8Array, options?: InferenceSession.SessionOptions): void {\n    const wasm = getInstance();\n    if (!ortInit) {\n      const errorCode = wasm._OrtInit(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      if (errorCode !== 0) {\n        throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n      }\n      ortInit = true;\n    }\n\n    const modelDataOffset = wasm._malloc(model.byteLength);\n    let sessionOptionsHandle = 0;\n    let allocs: number[] = [];\n\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n      wasm.HEAPU8.set(model, modelDataOffset);\n      this.sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\n      if (this.sessionHandle === 0) {\n        throw new Error('Can\\'t create a session');\n      }\n    } finally {\n      wasm._free(modelDataOffset);\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n      allocs.forEach(wasm._free);\n    }\n\n    const inputCount = wasm._OrtGetInputCount(this.sessionHandle);\n    const outputCount = wasm._OrtGetOutputCount(this.sessionHandle);\n\n    this.inputNames = [];\n    this.inputNamesUTF8Encoded = [];\n    this.outputNames = [];\n    this.outputNamesUTF8Encoded = [];\n    for (let i = 0; i < inputCount; i++) {\n      const name = wasm._OrtGetInputName(this.sessionHandle, i);\n      if (name === 0) {\n        throw new Error('Can\\'t get an input name');\n      }\n      this.inputNamesUTF8Encoded.push(name);\n      this.inputNames.push(wasm.UTF8ToString(name));\n    }\n    for (let i = 0; i < outputCount; i++) {\n      const name = wasm._OrtGetOutputName(this.sessionHandle, i);\n      if (name === 0) {\n        throw new Error('Can\\'t get an output name');\n      }\n      this.outputNamesUTF8Encoded.push(name);\n      this.outputNames.push(wasm.UTF8ToString(name));\n    }\n  }\n\n  async dispose(): Promise<void> {\n    const wasm = getInstance();\n    if (this.inputNamesUTF8Encoded) {\n      this.inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n      this.inputNamesUTF8Encoded = [];\n    }\n    if (this.outputNamesUTF8Encoded) {\n      this.outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n      this.outputNamesUTF8Encoded = [];\n    }\n    if (this.sessionHandle) {\n      wasm._OrtReleaseSession(this.sessionHandle);\n      this.sessionHandle = 0;\n    }\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const wasm = getInstance();\n\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n\n    let runOptionsHandle = 0;\n    let runOptionsAllocs: number[] = [];\n\n    const inputValues: number[] = [];\n    const inputAllocs: number[] = [];\n\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n      // create input tensors\n      for (let i = 0; i < inputCount; i++) {\n        const data = inputArray[i].data;\n\n        let dataOffset: number;\n        let dataByteLength: number;\n\n        if (Array.isArray(data)) {\n          // string tensor\n          dataByteLength = 4 * data.length;\n          dataOffset = wasm._malloc(dataByteLength);\n          inputAllocs.push(dataOffset);\n          let dataIndex = dataOffset / 4;\n          for (let i = 0; i < data.length; i++) {\n            if (typeof data[i] !== 'string') {\n              throw new TypeError(`tensor data at index ${i} is not a string`);\n            }\n            wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n          }\n        } else {\n          dataByteLength = data.byteLength;\n          dataOffset = wasm._malloc(dataByteLength);\n          inputAllocs.push(dataOffset);\n          wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n        }\n\n        const dims = inputArray[i].dims;\n\n        const stack = wasm.stackSave();\n        const dimsOffset = wasm.stackAlloc(4 * dims.length);\n        try {\n          let dimIndex = dimsOffset / 4;\n          dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n          const tensor = wasm._OrtCreateTensor(\n              tensorDataTypeStringToEnum(inputArray[i].type), dataOffset, dataByteLength, dimsOffset, dims.length);\n          if (tensor === 0) {\n            throw new Error('Can\\'t create a tensor');\n          }\n          inputValues.push(tensor);\n        } finally {\n          wasm.stackRestore(stack);\n        }\n      }\n\n      const beforeRunStack = wasm.stackSave();\n      const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n      const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n      const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n      const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n      try {\n        let inputValuesIndex = inputValuesOffset / 4;\n        let inputNamesIndex = inputNamesOffset / 4;\n        let outputValuesIndex = outputValuesOffset / 4;\n        let outputNamesIndex = outputNamesOffset / 4;\n        for (let i = 0; i < inputCount; i++) {\n          wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n          wasm.HEAPU32[inputNamesIndex++] = this.inputNamesUTF8Encoded[inputIndices[i]];\n        }\n        for (let i = 0; i < outputCount; i++) {\n          wasm.HEAPU32[outputValuesIndex++] = 0;\n          wasm.HEAPU32[outputNamesIndex++] = this.outputNamesUTF8Encoded[outputIndices[i]];\n        }\n\n        // support RunOptions\n        let errorCode = wasm._OrtRun(\n            this.sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n            outputValuesOffset, runOptionsHandle);\n\n        const output: {[name: string]: Tensor} = {};\n\n        if (errorCode === 0) {\n          for (let i = 0; i < outputCount; i++) {\n            const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n            const beforeGetTensorDataStack = wasm.stackSave();\n            // stack allocate 4 pointer value\n            const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n            let type: Tensor.Type|undefined, dataOffset = 0;\n            try {\n              errorCode = wasm._OrtGetTensorData(\n                  tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n              if (errorCode !== 0) {\n                throw new Error(`Can't get a tensor data. error code = ${errorCode}`);\n              }\n              let tensorDataIndex = tensorDataOffset / 4;\n              const dataType = wasm.HEAPU32[tensorDataIndex++];\n              dataOffset = wasm.HEAPU32[tensorDataIndex++];\n              const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n              const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n              const dims = [];\n              for (let i = 0; i < dimsLength; i++) {\n                dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n              }\n              wasm._OrtFree(dimsOffset);\n\n              const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n              type = tensorDataTypeEnumToString(dataType);\n              if (type === 'string') {\n                const stringData: string[] = [];\n                let dataIndex = dataOffset / 4;\n                for (let i = 0; i < size; i++) {\n                  const offset = wasm.HEAPU32[dataIndex++];\n                  const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                  stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                }\n                output[this.outputNames[outputIndices[i]]] = new Tensor('string', stringData, dims);\n              } else {\n                const typedArray = numericTensorTypeToTypedArray(type);\n                const t = new Tensor(type, new typedArray(size), dims) as TypedTensor<Exclude<Tensor.Type, 'string'>>;\n                new Uint8Array(t.data.buffer, t.data.byteOffset, t.data.byteLength)\n                    .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + t.data.byteLength));\n                output[this.outputNames[outputIndices[i]]] = t;\n              }\n            } finally {\n              wasm.stackRestore(beforeGetTensorDataStack);\n              if (type === 'string' && dataOffset) {\n                wasm._free(dataOffset);\n              }\n              wasm._OrtReleaseTensor(tensor);\n            }\n          }\n        }\n\n        if (errorCode === 0) {\n          return output;\n        } else {\n          throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n        }\n      } finally {\n        wasm.stackRestore(beforeRunStack);\n      }\n    } finally {\n      inputValues.forEach(wasm._OrtReleaseTensor);\n      inputAllocs.forEach(wasm._free);\n\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n      runOptionsAllocs.forEach(wasm._free);\n    }\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    // TODO: implement profiling\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    // TODO: Support profiling\n    sessionOptions.enableProfiling = false;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        sessionOptions.enableProfiling, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    if (options?.executionProviders) {\n      const eps = options.executionProviders;\n      const epsNames = eps.map(i => typeof i === 'string' ? i : i.name);\n      if (epsNames.indexOf('webnn') !== -1) {\n        if (wasm._OrtSessionOptionsAppendExecutionProviderWebNN(sessionOptionsHandle, 0) !== 0) {\n          throw new Error(`Can't append WebNN execution provider`);\n        }\n      }\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactoryThreaded from './binding/ort-wasm-threaded.js';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nlet wasm: OrtWasmModule;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    if ((typeof process !== 'undefined') &&\n        (typeof process.versions !== 'undefined') &&\n        (typeof process.versions.node !== 'undefined')) {\n      throw Error('Threads is not supported in Node.js');\n    }\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n    return WebAssembly.validate(new Uint8Array(\n        [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]));\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const initializeWebAssembly = async(): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = env.wasm.initTimeout!;\n  const numThreads = env.wasm.numThreads!;\n  const simd = env.wasm.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {};\n\n    if (!useThreads) {\n      config.locateFile = (fileName: string, scriptDirectory: string) => {\n        if (useSimd && fileName === 'ort-wasm.wasm') {\n          return scriptDirectory + 'ort-wasm-simd.wasm';\n        }\n        return scriptDirectory + fileName;\n      };\n    } else {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode =\n            `var ortWasmThreaded=(function(){var _scriptDir;return ${ortWasmFactoryThreaded.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n        config.locateFile = (fileName: string, scriptDirectory: string) => {\n          if (fileName.endsWith('.worker.js')) {\n            return URL.createObjectURL(new Blob(\n                [\n                  // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                  // eslint-disable-next-line @typescript-eslint/no-require-imports\n                  require('./binding/ort-wasm-threaded.worker.js')\n                ],\n                {type: 'text/javascript'}));\n          }\n\n          if (useSimd && fileName === 'ort-wasm-threaded.wasm') {\n            return scriptDirectory + 'ort-wasm-simd-threaded.wasm';\n          }\n          return scriptDirectory + fileName;\n        };\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}